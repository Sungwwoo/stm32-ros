
ros32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4ac  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000090c  0800d674  0800d674  0001d674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df80  0800df80  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800df80  0800df80  0001df80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df88  0800df88  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800df88  0800df88  0001df88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800df90  0800df90  0001df90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800df98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012d8  20000090  0800e028  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001368  0800e028  00021368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f2f4  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b4  00000000  00000000  0003f3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00042768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00043760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024458  00000000  00000000  00044678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001456d  00000000  00000000  00068ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6b74  00000000  00000000  0007d03d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00153bb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a74  00000000  00000000  00153c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000090 	.word	0x20000090
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800d65c 	.word	0x0800d65c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000094 	.word	0x20000094
 8000204:	0800d65c 	.word	0x0800d65c

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b9a2 	b.w	8000ec0 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f83a 	bl	8000bfc <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__aeabi_f2lz>:
 8000b94:	ee07 0a90 	vmov	s15, r0
 8000b98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ba0:	d401      	bmi.n	8000ba6 <__aeabi_f2lz+0x12>
 8000ba2:	f000 b80b 	b.w	8000bbc <__aeabi_f2ulz>
 8000ba6:	eef1 7a67 	vneg.f32	s15, s15
 8000baa:	b508      	push	{r3, lr}
 8000bac:	ee17 0a90 	vmov	r0, s15
 8000bb0:	f000 f804 	bl	8000bbc <__aeabi_f2ulz>
 8000bb4:	4240      	negs	r0, r0
 8000bb6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bba:	bd08      	pop	{r3, pc}

08000bbc <__aeabi_f2ulz>:
 8000bbc:	b5d0      	push	{r4, r6, r7, lr}
 8000bbe:	f7ff fc8f 	bl	80004e0 <__aeabi_f2d>
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <__aeabi_f2ulz+0x38>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	4606      	mov	r6, r0
 8000bc8:	460f      	mov	r7, r1
 8000bca:	f7ff fce1 	bl	8000590 <__aeabi_dmul>
 8000bce:	f000 f979 	bl	8000ec4 <__aeabi_d2uiz>
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	f7ff fc62 	bl	800049c <__aeabi_ui2d>
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <__aeabi_f2ulz+0x3c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f7ff fcd8 	bl	8000590 <__aeabi_dmul>
 8000be0:	4602      	mov	r2, r0
 8000be2:	460b      	mov	r3, r1
 8000be4:	4630      	mov	r0, r6
 8000be6:	4639      	mov	r1, r7
 8000be8:	f7ff fb1a 	bl	8000220 <__aeabi_dsub>
 8000bec:	f000 f96a 	bl	8000ec4 <__aeabi_d2uiz>
 8000bf0:	4621      	mov	r1, r4
 8000bf2:	bdd0      	pop	{r4, r6, r7, pc}
 8000bf4:	3df00000 	.word	0x3df00000
 8000bf8:	41f00000 	.word	0x41f00000

08000bfc <__udivmoddi4>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	9d08      	ldr	r5, [sp, #32]
 8000c02:	4604      	mov	r4, r0
 8000c04:	468c      	mov	ip, r1
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f040 8083 	bne.w	8000d12 <__udivmoddi4+0x116>
 8000c0c:	428a      	cmp	r2, r1
 8000c0e:	4617      	mov	r7, r2
 8000c10:	d947      	bls.n	8000ca2 <__udivmoddi4+0xa6>
 8000c12:	fab2 f282 	clz	r2, r2
 8000c16:	b142      	cbz	r2, 8000c2a <__udivmoddi4+0x2e>
 8000c18:	f1c2 0020 	rsb	r0, r2, #32
 8000c1c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c20:	4091      	lsls	r1, r2
 8000c22:	4097      	lsls	r7, r2
 8000c24:	ea40 0c01 	orr.w	ip, r0, r1
 8000c28:	4094      	lsls	r4, r2
 8000c2a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2e:	0c23      	lsrs	r3, r4, #16
 8000c30:	fbbc f6f8 	udiv	r6, ip, r8
 8000c34:	fa1f fe87 	uxth.w	lr, r7
 8000c38:	fb08 c116 	mls	r1, r8, r6, ip
 8000c3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c40:	fb06 f10e 	mul.w	r1, r6, lr
 8000c44:	4299      	cmp	r1, r3
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x60>
 8000c48:	18fb      	adds	r3, r7, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 8119 	bcs.w	8000e84 <__udivmoddi4+0x288>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 8116 	bls.w	8000e84 <__udivmoddi4+0x288>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	443b      	add	r3, r7
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c70:	45a6      	cmp	lr, r4
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x8c>
 8000c74:	193c      	adds	r4, r7, r4
 8000c76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7a:	f080 8105 	bcs.w	8000e88 <__udivmoddi4+0x28c>
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	f240 8102 	bls.w	8000e88 <__udivmoddi4+0x28c>
 8000c84:	3802      	subs	r0, #2
 8000c86:	443c      	add	r4, r7
 8000c88:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8c:	eba4 040e 	sub.w	r4, r4, lr
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa0>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	b902      	cbnz	r2, 8000ca6 <__udivmoddi4+0xaa>
 8000ca4:	deff      	udf	#255	; 0xff
 8000ca6:	fab2 f282 	clz	r2, r2
 8000caa:	2a00      	cmp	r2, #0
 8000cac:	d150      	bne.n	8000d50 <__udivmoddi4+0x154>
 8000cae:	1bcb      	subs	r3, r1, r7
 8000cb0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb4:	fa1f f887 	uxth.w	r8, r7
 8000cb8:	2601      	movs	r6, #1
 8000cba:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cbe:	0c21      	lsrs	r1, r4, #16
 8000cc0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc8:	fb08 f30c 	mul.w	r3, r8, ip
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0xe4>
 8000cd0:	1879      	adds	r1, r7, r1
 8000cd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0xe2>
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	f200 80e9 	bhi.w	8000eb0 <__udivmoddi4+0x2b4>
 8000cde:	4684      	mov	ip, r0
 8000ce0:	1ac9      	subs	r1, r1, r3
 8000ce2:	b2a3      	uxth	r3, r4
 8000ce4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cf0:	fb08 f800 	mul.w	r8, r8, r0
 8000cf4:	45a0      	cmp	r8, r4
 8000cf6:	d907      	bls.n	8000d08 <__udivmoddi4+0x10c>
 8000cf8:	193c      	adds	r4, r7, r4
 8000cfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x10a>
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	f200 80d9 	bhi.w	8000eb8 <__udivmoddi4+0x2bc>
 8000d06:	4618      	mov	r0, r3
 8000d08:	eba4 0408 	sub.w	r4, r4, r8
 8000d0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d10:	e7bf      	b.n	8000c92 <__udivmoddi4+0x96>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0x12e>
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	f000 80b1 	beq.w	8000e7e <__udivmoddi4+0x282>
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d22:	4630      	mov	r0, r6
 8000d24:	4631      	mov	r1, r6
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	fab3 f683 	clz	r6, r3
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d14a      	bne.n	8000dc8 <__udivmoddi4+0x1cc>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d302      	bcc.n	8000d3c <__udivmoddi4+0x140>
 8000d36:	4282      	cmp	r2, r0
 8000d38:	f200 80b8 	bhi.w	8000eac <__udivmoddi4+0x2b0>
 8000d3c:	1a84      	subs	r4, r0, r2
 8000d3e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d42:	2001      	movs	r0, #1
 8000d44:	468c      	mov	ip, r1
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	d0a8      	beq.n	8000c9c <__udivmoddi4+0xa0>
 8000d4a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4e:	e7a5      	b.n	8000c9c <__udivmoddi4+0xa0>
 8000d50:	f1c2 0320 	rsb	r3, r2, #32
 8000d54:	fa20 f603 	lsr.w	r6, r0, r3
 8000d58:	4097      	lsls	r7, r2
 8000d5a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d62:	40d9      	lsrs	r1, r3
 8000d64:	4330      	orrs	r0, r6
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d6c:	fa1f f887 	uxth.w	r8, r7
 8000d70:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f108 	mul.w	r1, r6, r8
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x19c>
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d8a:	f080 808d 	bcs.w	8000ea8 <__udivmoddi4+0x2ac>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 808a 	bls.w	8000ea8 <__udivmoddi4+0x2ac>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	443b      	add	r3, r7
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b281      	uxth	r1, r0
 8000d9c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000da0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da8:	fb00 f308 	mul.w	r3, r0, r8
 8000dac:	428b      	cmp	r3, r1
 8000dae:	d907      	bls.n	8000dc0 <__udivmoddi4+0x1c4>
 8000db0:	1879      	adds	r1, r7, r1
 8000db2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db6:	d273      	bcs.n	8000ea0 <__udivmoddi4+0x2a4>
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d971      	bls.n	8000ea0 <__udivmoddi4+0x2a4>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	4439      	add	r1, r7
 8000dc0:	1acb      	subs	r3, r1, r3
 8000dc2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc6:	e778      	b.n	8000cba <__udivmoddi4+0xbe>
 8000dc8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dcc:	fa03 f406 	lsl.w	r4, r3, r6
 8000dd0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd4:	431c      	orrs	r4, r3
 8000dd6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dda:	fa01 f306 	lsl.w	r3, r1, r6
 8000dde:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000de2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de6:	431f      	orrs	r7, r3
 8000de8:	0c3b      	lsrs	r3, r7, #16
 8000dea:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dee:	fa1f f884 	uxth.w	r8, r4
 8000df2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dfa:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	fa02 f206 	lsl.w	r2, r2, r6
 8000e04:	fa00 f306 	lsl.w	r3, r0, r6
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x220>
 8000e0a:	1861      	adds	r1, r4, r1
 8000e0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e10:	d248      	bcs.n	8000ea4 <__udivmoddi4+0x2a8>
 8000e12:	458a      	cmp	sl, r1
 8000e14:	d946      	bls.n	8000ea4 <__udivmoddi4+0x2a8>
 8000e16:	f1a9 0902 	sub.w	r9, r9, #2
 8000e1a:	4421      	add	r1, r4
 8000e1c:	eba1 010a 	sub.w	r1, r1, sl
 8000e20:	b2bf      	uxth	r7, r7
 8000e22:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e26:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e2a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2e:	fb00 f808 	mul.w	r8, r0, r8
 8000e32:	45b8      	cmp	r8, r7
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x24a>
 8000e36:	19e7      	adds	r7, r4, r7
 8000e38:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e3c:	d22e      	bcs.n	8000e9c <__udivmoddi4+0x2a0>
 8000e3e:	45b8      	cmp	r8, r7
 8000e40:	d92c      	bls.n	8000e9c <__udivmoddi4+0x2a0>
 8000e42:	3802      	subs	r0, #2
 8000e44:	4427      	add	r7, r4
 8000e46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e4a:	eba7 0708 	sub.w	r7, r7, r8
 8000e4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e52:	454f      	cmp	r7, r9
 8000e54:	46c6      	mov	lr, r8
 8000e56:	4649      	mov	r1, r9
 8000e58:	d31a      	bcc.n	8000e90 <__udivmoddi4+0x294>
 8000e5a:	d017      	beq.n	8000e8c <__udivmoddi4+0x290>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x27a>
 8000e5e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e62:	eb67 0701 	sbc.w	r7, r7, r1
 8000e66:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e6a:	40f2      	lsrs	r2, r6
 8000e6c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e70:	40f7      	lsrs	r7, r6
 8000e72:	e9c5 2700 	strd	r2, r7, [r5]
 8000e76:	2600      	movs	r6, #0
 8000e78:	4631      	mov	r1, r6
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	462e      	mov	r6, r5
 8000e80:	4628      	mov	r0, r5
 8000e82:	e70b      	b.n	8000c9c <__udivmoddi4+0xa0>
 8000e84:	4606      	mov	r6, r0
 8000e86:	e6e9      	b.n	8000c5c <__udivmoddi4+0x60>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6fd      	b.n	8000c88 <__udivmoddi4+0x8c>
 8000e8c:	4543      	cmp	r3, r8
 8000e8e:	d2e5      	bcs.n	8000e5c <__udivmoddi4+0x260>
 8000e90:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e94:	eb69 0104 	sbc.w	r1, r9, r4
 8000e98:	3801      	subs	r0, #1
 8000e9a:	e7df      	b.n	8000e5c <__udivmoddi4+0x260>
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e7d2      	b.n	8000e46 <__udivmoddi4+0x24a>
 8000ea0:	4660      	mov	r0, ip
 8000ea2:	e78d      	b.n	8000dc0 <__udivmoddi4+0x1c4>
 8000ea4:	4681      	mov	r9, r0
 8000ea6:	e7b9      	b.n	8000e1c <__udivmoddi4+0x220>
 8000ea8:	4666      	mov	r6, ip
 8000eaa:	e775      	b.n	8000d98 <__udivmoddi4+0x19c>
 8000eac:	4630      	mov	r0, r6
 8000eae:	e74a      	b.n	8000d46 <__udivmoddi4+0x14a>
 8000eb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb4:	4439      	add	r1, r7
 8000eb6:	e713      	b.n	8000ce0 <__udivmoddi4+0xe4>
 8000eb8:	3802      	subs	r0, #2
 8000eba:	443c      	add	r4, r7
 8000ebc:	e724      	b.n	8000d08 <__udivmoddi4+0x10c>
 8000ebe:	bf00      	nop

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_d2uiz>:
 8000ec4:	004a      	lsls	r2, r1, #1
 8000ec6:	d211      	bcs.n	8000eec <__aeabi_d2uiz+0x28>
 8000ec8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ecc:	d211      	bcs.n	8000ef2 <__aeabi_d2uiz+0x2e>
 8000ece:	d50d      	bpl.n	8000eec <__aeabi_d2uiz+0x28>
 8000ed0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ed4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ed8:	d40e      	bmi.n	8000ef8 <__aeabi_d2uiz+0x34>
 8000eda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ede:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ee2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ee6:	fa23 f002 	lsr.w	r0, r3, r2
 8000eea:	4770      	bx	lr
 8000eec:	f04f 0000 	mov.w	r0, #0
 8000ef0:	4770      	bx	lr
 8000ef2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ef6:	d102      	bne.n	8000efe <__aeabi_d2uiz+0x3a>
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	4770      	bx	lr
 8000efe:	f04f 0000 	mov.w	r0, #0
 8000f02:	4770      	bx	lr

08000f04 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	0a5a      	lsrs	r2, r3, #9
 8000f14:	490f      	ldr	r1, [pc, #60]	; (8000f54 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000f16:	fba1 1202 	umull	r1, r2, r1, r2
 8000f1a:	09d2      	lsrs	r2, r2, #7
 8000f1c:	490e      	ldr	r1, [pc, #56]	; (8000f58 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000f1e:	fb01 f202 	mul.w	r2, r1, r2
 8000f22:	1a9b      	subs	r3, r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	0a5b      	lsrs	r3, r3, #9
 8000f2c:	4a09      	ldr	r2, [pc, #36]	; (8000f54 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f32:	09db      	lsrs	r3, r3, #7
 8000f34:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	441a      	add	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	601a      	str	r2, [r3, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	00044b83 	.word	0x00044b83
 8000f58:	3b9aca00 	.word	0x3b9aca00

08000f5c <_ZN9ImuDriver18MPU9250_OnActivateEv>:
class ImuDriver{
private:
	SPI_HandleTypeDef* imuPort;
	GPIO_TypeDef* MPU9250_CS_GPIO;
	uint16_t MPU9250_CS_PIN;
	__weak void MPU9250_OnActivate(){};
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <_ZN9ImuDriver8imu_initEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:


static uint8_t _buffer[21];
static uint8_t _mag_adjust[3];

void ImuDriver::imu_init(SPI_HandleTypeDef* port, GPIO_TypeDef* portx, uint16_t pin){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	807b      	strh	r3, [r7, #2]
	imuPort = port;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	68ba      	ldr	r2, [r7, #8]
 8000f82:	601a      	str	r2, [r3, #0]
	MPU9250_CS_GPIO = portx;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	605a      	str	r2, [r3, #4]
	MPU9250_CS_PIN = pin;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	887a      	ldrh	r2, [r7, #2]
 8000f8e:	811a      	strh	r2, [r3, #8]
	MPU9250_Init();
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f000 f937 	bl	8001204 <_ZN9ImuDriver12MPU9250_InitEv>
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <_ZN9ImuDriver16MPU9250_ActivateEv>:

__weak void MPU9250_OnActivate(){};
inline void ImuDriver::MPU9250_Activate(){
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
	MPU9250_OnActivate();
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ffd8 	bl	8000f5c <_ZN9ImuDriver18MPU9250_OnActivateEv>
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_RESET);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6858      	ldr	r0, [r3, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	891b      	ldrh	r3, [r3, #8]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f009 fad2 	bl	800a560 <HAL_GPIO_WritePin>
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_ZN9ImuDriver18MPU9250_DeactivateEv>:
inline void ImuDriver::MPU9250_Deactivate(){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_SET);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6858      	ldr	r0, [r3, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	891b      	ldrh	r3, [r3, #8]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f009 fac2 	bl	800a560 <HAL_GPIO_WritePin>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_ZN9ImuDriver13SPI_WriteReadEh>:
uint8_t ImuDriver::SPI_WriteRead(uint8_t byte){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	70fb      	strb	r3, [r7, #3]
	uint8_t receivedbyte = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(imuPort,(uint8_t*) &byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	f107 020f 	add.w	r2, r7, #15
 8000ffc:	1cf9      	adds	r1, r7, #3
 8000ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2301      	movs	r3, #1
 8001006:	f00a fb1f 	bl	800b648 <HAL_SPI_TransmitReceive>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	bf14      	ite	ne
 8001010:	2301      	movne	r3, #1
 8001012:	2300      	moveq	r3, #0
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <_ZN9ImuDriver13SPI_WriteReadEh+0x3a>
		return -1;
 800101a:	23ff      	movs	r3, #255	; 0xff
 800101c:	e000      	b.n	8001020 <_ZN9ImuDriver13SPI_WriteReadEh+0x3c>

	return receivedbyte;
 800101e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <_ZN9ImuDriver13MPU_SPI_WriteEPhht>:
void ImuDriver::MPU_SPI_Write (uint8_t *pBuffer, uint8_t writeAddr, uint16_t numByteToWrite){
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	4611      	mov	r1, r2
 8001034:	461a      	mov	r2, r3
 8001036:	460b      	mov	r3, r1
 8001038:	71fb      	strb	r3, [r7, #7]
 800103a:	4613      	mov	r3, r2
 800103c:	80bb      	strh	r3, [r7, #4]
	MPU9250_Activate();
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f7ff ffad 	bl	8000f9e <_ZN9ImuDriver16MPU9250_ActivateEv>
	SPI_WriteRead(writeAddr);
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	4619      	mov	r1, r3
 8001048:	68f8      	ldr	r0, [r7, #12]
 800104a:	f7ff ffcb 	bl	8000fe4 <_ZN9ImuDriver13SPI_WriteReadEh>
	while(numByteToWrite>=0x01)
 800104e:	88bb      	ldrh	r3, [r7, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00c      	beq.n	800106e <_ZN9ImuDriver13MPU_SPI_WriteEPhht+0x46>
	{
		SPI_WriteRead(*pBuffer);
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f7ff ffc2 	bl	8000fe4 <_ZN9ImuDriver13SPI_WriteReadEh>
		numByteToWrite--;
 8001060:	88bb      	ldrh	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	80bb      	strh	r3, [r7, #4]
		pBuffer++;
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	3301      	adds	r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
	while(numByteToWrite>=0x01)
 800106c:	e7ef      	b.n	800104e <_ZN9ImuDriver13MPU_SPI_WriteEPhht+0x26>
	}
	MPU9250_Deactivate();
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f7ff ffa8 	bl	8000fc4 <_ZN9ImuDriver18MPU9250_DeactivateEv>
}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <_ZN9ImuDriver12MPU_SPI_ReadEPhht>:
void ImuDriver::MPU_SPI_Read(uint8_t *pBuffer, uint8_t readAddr, uint16_t numByteToRead){
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	4611      	mov	r1, r2
 8001088:	461a      	mov	r2, r3
 800108a:	460b      	mov	r3, r1
 800108c:	71fb      	strb	r3, [r7, #7]
 800108e:	4613      	mov	r3, r2
 8001090:	80bb      	strh	r3, [r7, #4]
	MPU9250_Activate();
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f7ff ff83 	bl	8000f9e <_ZN9ImuDriver16MPU9250_ActivateEv>
	uint8_t data = readAddr | READWRITE_CMD;
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(imuPort, &data, 1, HAL_MAX_DELAY);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6818      	ldr	r0, [r3, #0]
 80010a6:	f107 0117 	add.w	r1, r7, #23
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	2201      	movs	r2, #1
 80010b0:	f00a f87d 	bl	800b1ae <HAL_SPI_Transmit>
	HAL_SPI_Receive(imuPort, pBuffer, numByteToRead, HAL_MAX_DELAY);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6818      	ldr	r0, [r3, #0]
 80010b8:	88ba      	ldrh	r2, [r7, #4]
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	68b9      	ldr	r1, [r7, #8]
 80010c0:	f00a f9b1 	bl	800b426 <HAL_SPI_Receive>
	MPU9250_Deactivate();
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f7ff ff7d 	bl	8000fc4 <_ZN9ImuDriver18MPU9250_DeactivateEv>
}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <_ZN9ImuDriver13writeRegisterEhh>:
void ImuDriver::writeRegister(uint8_t subAddress, uint8_t data){
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	460b      	mov	r3, r1
 80010dc:	70fb      	strb	r3, [r7, #3]
 80010de:	4613      	mov	r3, r2
 80010e0:	70bb      	strb	r3, [r7, #2]
	MPU_SPI_Write(&data, subAddress, 1);
 80010e2:	78fa      	ldrb	r2, [r7, #3]
 80010e4:	1cb9      	adds	r1, r7, #2
 80010e6:	2301      	movs	r3, #1
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff9d 	bl	8001028 <_ZN9ImuDriver13MPU_SPI_WriteEPhht>
	HAL_Delay(10);
 80010ee:	200a      	movs	r0, #10
 80010f0:	f008 fb6a 	bl	80097c8 <HAL_Delay>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_ZN9ImuDriver13readRegistersEhhPh>:
void ImuDriver::readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	460b      	mov	r3, r1
 8001108:	72fb      	strb	r3, [r7, #11]
 800110a:	4613      	mov	r3, r2
 800110c:	72bb      	strb	r3, [r7, #10]
	MPU_SPI_Read(dest, subAddress, count);
 800110e:	7abb      	ldrb	r3, [r7, #10]
 8001110:	b29b      	uxth	r3, r3
 8001112:	7afa      	ldrb	r2, [r7, #11]
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f7ff ffb0 	bl	800107c <_ZN9ImuDriver12MPU_SPI_ReadEPhht>
}/* writes a register to the AK8963 given a register address and data */
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <_ZN9ImuDriver19writeAK8963RegisterEhh>:
void ImuDriver::writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	70fb      	strb	r3, [r7, #3]
 8001130:	4613      	mov	r3, r2
 8001132:	70bb      	strb	r3, [r7, #2]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 8001134:	220c      	movs	r2, #12
 8001136:	2125      	movs	r1, #37	; 0x25
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ffca 	bl	80010d2 <_ZN9ImuDriver13writeRegisterEhh>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 800113e:	78fb      	ldrb	r3, [r7, #3]
 8001140:	461a      	mov	r2, r3
 8001142:	2126      	movs	r1, #38	; 0x26
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ffc4 	bl	80010d2 <_ZN9ImuDriver13writeRegisterEhh>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 800114a:	78bb      	ldrb	r3, [r7, #2]
 800114c:	461a      	mov	r2, r3
 800114e:	2163      	movs	r1, #99	; 0x63
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ffbe 	bl	80010d2 <_ZN9ImuDriver13writeRegisterEhh>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 8001156:	2281      	movs	r2, #129	; 0x81
 8001158:	2127      	movs	r1, #39	; 0x27
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffb9 	bl	80010d2 <_ZN9ImuDriver13writeRegisterEhh>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <_ZN9ImuDriver19readAK8963RegistersEhhPh>:

/* reads registers from the AK8963 */
void ImuDriver::readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	460b      	mov	r3, r1
 8001174:	72fb      	strb	r3, [r7, #11]
 8001176:	4613      	mov	r3, r2
 8001178:	72bb      	strb	r3, [r7, #10]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 800117a:	228c      	movs	r2, #140	; 0x8c
 800117c:	2125      	movs	r1, #37	; 0x25
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	f7ff ffa7 	bl	80010d2 <_ZN9ImuDriver13writeRegisterEhh>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8001184:	7afb      	ldrb	r3, [r7, #11]
 8001186:	461a      	mov	r2, r3
 8001188:	2126      	movs	r1, #38	; 0x26
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f7ff ffa1 	bl	80010d2 <_ZN9ImuDriver13writeRegisterEhh>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 8001190:	7abb      	ldrb	r3, [r7, #10]
 8001192:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001196:	b2db      	uxtb	r3, r3
 8001198:	461a      	mov	r2, r3
 800119a:	2127      	movs	r1, #39	; 0x27
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f7ff ff98 	bl	80010d2 <_ZN9ImuDriver13writeRegisterEhh>

	// takes some time for these registers to fill
	HAL_Delay(1);
 80011a2:	2001      	movs	r0, #1
 80011a4:	f008 fb10 	bl	80097c8 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 80011a8:	7aba      	ldrb	r2, [r7, #10]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2149      	movs	r1, #73	; 0x49
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f7ff ffa4 	bl	80010fc <_ZN9ImuDriver13readRegistersEhhPh>
}
 80011b4:	bf00      	nop
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <_ZN9ImuDriver6whoAmIEv>:

uint8_t ImuDriver::whoAmI(){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	// read the WHO AM I register
	readRegisters(WHO_AM_I,1,_buffer);
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <_ZN9ImuDriver6whoAmIEv+0x20>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	2175      	movs	r1, #117	; 0x75
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ff96 	bl	80010fc <_ZN9ImuDriver13readRegistersEhhPh>

	// return the register value
	return _buffer[0];
 80011d0:	4b02      	ldr	r3, [pc, #8]	; (80011dc <_ZN9ImuDriver6whoAmIEv+0x20>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200000ac 	.word	0x200000ac

080011e0 <_ZN9ImuDriver12whoAmIAK8963Ev>:
int ImuDriver::whoAmIAK8963(){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I,1,_buffer);
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <_ZN9ImuDriver12whoAmIAK8963Ev+0x20>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	2100      	movs	r1, #0
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffba 	bl	8001168 <_ZN9ImuDriver19readAK8963RegistersEhhPh>
	// return the register value
	return _buffer[0];
 80011f4:	4b02      	ldr	r3, [pc, #8]	; (8001200 <_ZN9ImuDriver12whoAmIAK8963Ev+0x20>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200000ac 	.word	0x200000ac

08001204 <_ZN9ImuDriver12MPU9250_InitEv>:
uint8_t ImuDriver::MPU9250_Init(){
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 800120c:	2201      	movs	r2, #1
 800120e:	216b      	movs	r1, #107	; 0x6b
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff5e 	bl	80010d2 <_ZN9ImuDriver13writeRegisterEhh>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 8001216:	2220      	movs	r2, #32
 8001218:	216a      	movs	r1, #106	; 0x6a
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ff59 	bl	80010d2 <_ZN9ImuDriver13writeRegisterEhh>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 8001220:	220d      	movs	r2, #13
 8001222:	2124      	movs	r1, #36	; 0x24
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff54 	bl	80010d2 <_ZN9ImuDriver13writeRegisterEhh>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 800122a:	2200      	movs	r2, #0
 800122c:	210a      	movs	r1, #10
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ff78 	bl	8001124 <_ZN9ImuDriver19writeAK8963RegisterEhh>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1,PWR_RESET);
 8001234:	2280      	movs	r2, #128	; 0x80
 8001236:	216b      	movs	r1, #107	; 0x6b
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff4a 	bl	80010d2 <_ZN9ImuDriver13writeRegisterEhh>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 800123e:	200a      	movs	r0, #10
 8001240:	f008 fac2 	bl	80097c8 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 8001244:	2201      	movs	r2, #1
 8001246:	210b      	movs	r1, #11
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ff6b 	bl	8001124 <_ZN9ImuDriver19writeAK8963RegisterEhh>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 800124e:	2201      	movs	r2, #1
 8001250:	216b      	movs	r1, #107	; 0x6b
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ff3d 	bl	80010d2 <_ZN9ImuDriver13writeRegisterEhh>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI();
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ffaf 	bl	80011bc <_ZN9ImuDriver6whoAmIEv>
 800125e:	4603      	mov	r3, r0
 8001260:	73fb      	strb	r3, [r7, #15]
	if((who != 0x71) &&( who != 0x73))
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	2b71      	cmp	r3, #113	; 0x71
 8001266:	d004      	beq.n	8001272 <_ZN9ImuDriver12MPU9250_InitEv+0x6e>
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	2b73      	cmp	r3, #115	; 0x73
 800126c:	d001      	beq.n	8001272 <_ZN9ImuDriver12MPU9250_InitEv+0x6e>
	{
		return 1;
 800126e:	2301      	movs	r3, #1
 8001270:	e066      	b.n	8001340 <_ZN9ImuDriver12MPU9250_InitEv+0x13c>
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2,SEN_ENABLE);
 8001272:	2200      	movs	r2, #0
 8001274:	216c      	movs	r1, #108	; 0x6c
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ff2b 	bl	80010d2 <_ZN9ImuDriver13writeRegisterEhh>

	// setting accel range to 16G as default
	writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_16G);
 800127c:	2218      	movs	r2, #24
 800127e:	211c      	movs	r1, #28
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ff26 	bl	80010d2 <_ZN9ImuDriver13writeRegisterEhh>

	// setting the gyro range to 2000DPS as default
	writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS);
 8001286:	2200      	movs	r2, #0
 8001288:	211b      	movs	r1, #27
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ff21 	bl	80010d2 <_ZN9ImuDriver13writeRegisterEhh>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2,DLPF_184);
 8001290:	2201      	movs	r2, #1
 8001292:	211d      	movs	r1, #29
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff1c 	bl	80010d2 <_ZN9ImuDriver13writeRegisterEhh>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG,DLPF_184);
 800129a:	2201      	movs	r2, #1
 800129c:	211a      	movs	r1, #26
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ff17 	bl	80010d2 <_ZN9ImuDriver13writeRegisterEhh>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV,0x00);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2119      	movs	r1, #25
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ff12 	bl	80010d2 <_ZN9ImuDriver13writeRegisterEhh>

	// enable I2C master mode
	writeRegister(USER_CTRL,I2C_MST_EN);
 80012ae:	2220      	movs	r2, #32
 80012b0:	216a      	movs	r1, #106	; 0x6a
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ff0d 	bl	80010d2 <_ZN9ImuDriver13writeRegisterEhh>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL,I2C_MST_CLK);
 80012b8:	220d      	movs	r2, #13
 80012ba:	2124      	movs	r1, #36	; 0x24
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ff08 	bl	80010d2 <_ZN9ImuDriver13writeRegisterEhh>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ff8c 	bl	80011e0 <_ZN9ImuDriver12whoAmIAK8963Ev>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b48      	cmp	r3, #72	; 0x48
 80012cc:	bf14      	ite	ne
 80012ce:	2301      	movne	r3, #1
 80012d0:	2300      	moveq	r3, #0
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <_ZN9ImuDriver12MPU9250_InitEv+0xd8>
	{
		return 1;
 80012d8:	2301      	movs	r3, #1
 80012da:	e031      	b.n	8001340 <_ZN9ImuDriver12MPU9250_InitEv+0x13c>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80012dc:	2200      	movs	r2, #0
 80012de:	210a      	movs	r1, #10
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff1f 	bl	8001124 <_ZN9ImuDriver19writeAK8963RegisterEhh>

	HAL_Delay(100); // long wait between AK8963 mode changes
 80012e6:	2064      	movs	r0, #100	; 0x64
 80012e8:	f008 fa6e 	bl	80097c8 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM);
 80012ec:	220f      	movs	r2, #15
 80012ee:	210a      	movs	r1, #10
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff17 	bl	8001124 <_ZN9ImuDriver19writeAK8963RegisterEhh>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80012f6:	2064      	movs	r0, #100	; 0x64
 80012f8:	f008 fa66 	bl	80097c8 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <_ZN9ImuDriver12MPU9250_InitEv+0x144>)
 80012fe:	2203      	movs	r2, #3
 8001300:	2110      	movs	r1, #16
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ff30 	bl	8001168 <_ZN9ImuDriver19readAK8963RegistersEhhPh>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8001308:	2200      	movs	r2, #0
 800130a:	210a      	movs	r1, #10
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff09 	bl	8001124 <_ZN9ImuDriver19writeAK8963RegisterEhh>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8001312:	2064      	movs	r0, #100	; 0x64
 8001314:	f008 fa58 	bl	80097c8 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2);
 8001318:	2216      	movs	r2, #22
 800131a:	210a      	movs	r1, #10
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ff01 	bl	8001124 <_ZN9ImuDriver19writeAK8963RegisterEhh>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8001322:	2064      	movs	r0, #100	; 0x64
 8001324:	f008 fa50 	bl	80097c8 <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 8001328:	2201      	movs	r2, #1
 800132a:	216b      	movs	r1, #107	; 0x6b
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff fed0 	bl	80010d2 <_ZN9ImuDriver13writeRegisterEhh>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL,7,_buffer);
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <_ZN9ImuDriver12MPU9250_InitEv+0x148>)
 8001334:	2207      	movs	r2, #7
 8001336:	2103      	movs	r1, #3
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff15 	bl	8001168 <_ZN9ImuDriver19readAK8963RegistersEhhPh>
	// successful init, return 0

	return 0;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200000c4 	.word	0x200000c4
 800134c:	200000ac 	.word	0x200000ac

08001350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001356:	f008 f9c5 	bl	80096e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800135a:	f000 f82f 	bl	80013bc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  HAL_Delay(10000); // Wait for raspberry pi boot
 800135e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001362:	f008 fa31 	bl	80097c8 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001366:	f000 f99d 	bl	80016a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800136a:	f000 f8f5 	bl	8001558 <MX_USART2_UART_Init>
  MX_DMA_Init();
 800136e:	f000 f971 	bl	8001654 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001372:	f000 f91b 	bl	80015ac <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8001376:	f000 f8c5 	bl	8001504 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800137a:	f000 f941 	bl	8001600 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 800137e:	f000 f88b 	bl	8001498 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  setup(&huart6, &huart1, &hspi2, GPIOB, GPIO_PIN_12);
 8001382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <main+0x58>)
 800138a:	4a08      	ldr	r2, [pc, #32]	; (80013ac <main+0x5c>)
 800138c:	4908      	ldr	r1, [pc, #32]	; (80013b0 <main+0x60>)
 800138e:	4809      	ldr	r0, [pc, #36]	; (80013b4 <main+0x64>)
 8001390:	f006 f91e 	bl	80075d0 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8001394:	f006 f948 	bl	8007628 <loop>

	  // Indicating operation
	  HAL_Delay(100);
 8001398:	2064      	movs	r0, #100	; 0x64
 800139a:	f008 fa15 	bl	80097c8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800139e:	2120      	movs	r1, #32
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <main+0x68>)
 80013a2:	f009 f8f6 	bl	800a592 <HAL_GPIO_TogglePin>
	  loop();
 80013a6:	e7f5      	b.n	8001394 <main+0x44>
 80013a8:	40020400 	.word	0x40020400
 80013ac:	2000112c 	.word	0x2000112c
 80013b0:	20001288 	.word	0x20001288
 80013b4:	200012cc 	.word	0x200012cc
 80013b8:	40020000 	.word	0x40020000

080013bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b094      	sub	sp, #80	; 0x50
 80013c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c2:	f107 031c 	add.w	r3, r7, #28
 80013c6:	2234      	movs	r2, #52	; 0x34
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f00b fffc 	bl	800d3c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d0:	f107 0308 	add.w	r3, r7, #8
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e0:	2300      	movs	r3, #0
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <SystemClock_Config+0xd4>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	4a29      	ldr	r2, [pc, #164]	; (8001490 <SystemClock_Config+0xd4>)
 80013ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ee:	6413      	str	r3, [r2, #64]	; 0x40
 80013f0:	4b27      	ldr	r3, [pc, #156]	; (8001490 <SystemClock_Config+0xd4>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013fc:	2300      	movs	r3, #0
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	4b24      	ldr	r3, [pc, #144]	; (8001494 <SystemClock_Config+0xd8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001408:	4a22      	ldr	r2, [pc, #136]	; (8001494 <SystemClock_Config+0xd8>)
 800140a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4b20      	ldr	r3, [pc, #128]	; (8001494 <SystemClock_Config+0xd8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800141c:	2302      	movs	r3, #2
 800141e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001420:	2301      	movs	r3, #1
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001424:	2310      	movs	r3, #16
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001428:	2302      	movs	r3, #2
 800142a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800142c:	2300      	movs	r3, #0
 800142e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001430:	2310      	movs	r3, #16
 8001432:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001434:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001438:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800143a:	2304      	movs	r3, #4
 800143c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800143e:	2302      	movs	r3, #2
 8001440:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001442:	2302      	movs	r3, #2
 8001444:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4618      	mov	r0, r3
 800144c:	f009 fb88 	bl	800ab60 <HAL_RCC_OscConfig>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001456:	f000 f9ab 	bl	80017b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145a:	230f      	movs	r3, #15
 800145c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145e:	2302      	movs	r3, #2
 8001460:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001470:	f107 0308 	add.w	r3, r7, #8
 8001474:	2102      	movs	r1, #2
 8001476:	4618      	mov	r0, r3
 8001478:	f009 f8a6 	bl	800a5c8 <HAL_RCC_ClockConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001482:	f000 f995 	bl	80017b0 <Error_Handler>
  }
}
 8001486:	bf00      	nop
 8001488:	3750      	adds	r7, #80	; 0x50
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	40007000 	.word	0x40007000

08001498 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <MX_SPI2_Init+0x64>)
 800149e:	4a18      	ldr	r2, [pc, #96]	; (8001500 <MX_SPI2_Init+0x68>)
 80014a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014a2:	4b16      	ldr	r3, [pc, #88]	; (80014fc <MX_SPI2_Init+0x64>)
 80014a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014aa:	4b14      	ldr	r3, [pc, #80]	; (80014fc <MX_SPI2_Init+0x64>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <MX_SPI2_Init+0x64>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_SPI2_Init+0x64>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <MX_SPI2_Init+0x64>)
 80014be:	2200      	movs	r2, #0
 80014c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <MX_SPI2_Init+0x64>)
 80014c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <MX_SPI2_Init+0x64>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014d0:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <MX_SPI2_Init+0x64>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <MX_SPI2_Init+0x64>)
 80014d8:	2200      	movs	r2, #0
 80014da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014dc:	4b07      	ldr	r3, [pc, #28]	; (80014fc <MX_SPI2_Init+0x64>)
 80014de:	2200      	movs	r2, #0
 80014e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <MX_SPI2_Init+0x64>)
 80014e4:	220a      	movs	r2, #10
 80014e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014e8:	4804      	ldr	r0, [pc, #16]	; (80014fc <MX_SPI2_Init+0x64>)
 80014ea:	f009 fdd7 	bl	800b09c <HAL_SPI_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80014f4:	f000 f95c 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	2000112c 	.word	0x2000112c
 8001500:	40003800 	.word	0x40003800

08001504 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <MX_USART1_UART_Init+0x4c>)
 800150a:	4a12      	ldr	r2, [pc, #72]	; (8001554 <MX_USART1_UART_Init+0x50>)
 800150c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <MX_USART1_UART_Init+0x4c>)
 8001510:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001514:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <MX_USART1_UART_Init+0x4c>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <MX_USART1_UART_Init+0x4c>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <MX_USART1_UART_Init+0x4c>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <MX_USART1_UART_Init+0x4c>)
 800152a:	220c      	movs	r2, #12
 800152c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <MX_USART1_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <MX_USART1_UART_Init+0x4c>)
 8001536:	2200      	movs	r2, #0
 8001538:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800153a:	4805      	ldr	r0, [pc, #20]	; (8001550 <MX_USART1_UART_Init+0x4c>)
 800153c:	f00a fba3 	bl	800bc86 <HAL_HalfDuplex_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001546:	f000 f933 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20001288 	.word	0x20001288
 8001554:	40011000 	.word	0x40011000

08001558 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 800155e:	4a12      	ldr	r2, [pc, #72]	; (80015a8 <MX_USART2_UART_Init+0x50>)
 8001560:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 8001564:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001568:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 800157e:	220c      	movs	r2, #12
 8001580:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 8001590:	f00a fb2c 	bl	800bbec <HAL_UART_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800159a:	f000 f909 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20001310 	.word	0x20001310
 80015a8:	40004400 	.word	0x40004400

080015ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015b2:	4a12      	ldr	r2, [pc, #72]	; (80015fc <MX_USART3_UART_Init+0x50>)
 80015b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015b8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80015bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015d2:	220c      	movs	r2, #12
 80015d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015e4:	f00a fb02 	bl	800bbec <HAL_UART_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015ee:	f000 f8df 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200011e4 	.word	0x200011e4
 80015fc:	40004800 	.word	0x40004800

08001600 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <MX_USART6_UART_Init+0x4c>)
 8001606:	4a12      	ldr	r2, [pc, #72]	; (8001650 <MX_USART6_UART_Init+0x50>)
 8001608:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 57600;
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <MX_USART6_UART_Init+0x4c>)
 800160c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001610:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <MX_USART6_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <MX_USART6_UART_Init+0x4c>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <MX_USART6_UART_Init+0x4c>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_USART6_UART_Init+0x4c>)
 8001626:	220c      	movs	r2, #12
 8001628:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <MX_USART6_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <MX_USART6_UART_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_USART6_UART_Init+0x4c>)
 8001638:	f00a fb25 	bl	800bc86 <HAL_HalfDuplex_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001642:	f000 f8b5 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200012cc 	.word	0x200012cc
 8001650:	40011400 	.word	0x40011400

08001654 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <MX_DMA_Init+0x4c>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a0f      	ldr	r2, [pc, #60]	; (80016a0 <MX_DMA_Init+0x4c>)
 8001664:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <MX_DMA_Init+0x4c>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	200c      	movs	r0, #12
 800167c:	f008 f9a3 	bl	80099c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001680:	200c      	movs	r0, #12
 8001682:	f008 f9bc 	bl	80099fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	200e      	movs	r0, #14
 800168c:	f008 f99b 	bl	80099c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001690:	200e      	movs	r0, #14
 8001692:	f008 f9b4 	bl	80099fe <HAL_NVIC_EnableIRQ>

}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800

080016a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
 80016b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	4b38      	ldr	r3, [pc, #224]	; (80017a0 <MX_GPIO_Init+0xfc>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a37      	ldr	r2, [pc, #220]	; (80017a0 <MX_GPIO_Init+0xfc>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b35      	ldr	r3, [pc, #212]	; (80017a0 <MX_GPIO_Init+0xfc>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <MX_GPIO_Init+0xfc>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a30      	ldr	r2, [pc, #192]	; (80017a0 <MX_GPIO_Init+0xfc>)
 80016e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <MX_GPIO_Init+0xfc>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <MX_GPIO_Init+0xfc>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a29      	ldr	r2, [pc, #164]	; (80017a0 <MX_GPIO_Init+0xfc>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <MX_GPIO_Init+0xfc>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <MX_GPIO_Init+0xfc>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a22      	ldr	r2, [pc, #136]	; (80017a0 <MX_GPIO_Init+0xfc>)
 8001718:	f043 0302 	orr.w	r3, r3, #2
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <MX_GPIO_Init+0xfc>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	2120      	movs	r1, #32
 800172e:	481d      	ldr	r0, [pc, #116]	; (80017a4 <MX_GPIO_Init+0x100>)
 8001730:	f008 ff16 	bl	800a560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_3, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	f241 0108 	movw	r1, #4104	; 0x1008
 800173a:	481b      	ldr	r0, [pc, #108]	; (80017a8 <MX_GPIO_Init+0x104>)
 800173c:	f008 ff10 	bl	800a560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001740:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001746:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800174a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	4815      	ldr	r0, [pc, #84]	; (80017ac <MX_GPIO_Init+0x108>)
 8001758:	f008 fd6e 	bl	800a238 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800175c:	2320      	movs	r3, #32
 800175e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	480c      	ldr	r0, [pc, #48]	; (80017a4 <MX_GPIO_Init+0x100>)
 8001774:	f008 fd60 	bl	800a238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_3;
 8001778:	f241 0308 	movw	r3, #4104	; 0x1008
 800177c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177e:	2301      	movs	r3, #1
 8001780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	4619      	mov	r1, r3
 8001790:	4805      	ldr	r0, [pc, #20]	; (80017a8 <MX_GPIO_Init+0x104>)
 8001792:	f008 fd51 	bl	800a238 <HAL_GPIO_Init>

}
 8001796:	bf00      	nop
 8001798:	3728      	adds	r7, #40	; 0x28
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40020000 	.word	0x40020000
 80017a8:	40020400 	.word	0x40020400
 80017ac:	40020800 	.word	0x40020800

080017b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b4:	b672      	cpsid	i
}
 80017b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <Error_Handler+0x8>

080017ba <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <_ZN3ros3MsgC1Ev+0x1c>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	0800dd50 	.word	0x0800dd50

080017fc <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
      data()
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff ffe8 	bl	80017dc <_ZN3ros3MsgC1Ev>
 800180c:	4a06      	ldr	r2, [pc, #24]	; (8001828 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3304      	adds	r3, #4
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ffcf 	bl	80017ba <_ZN3ros4TimeC1Ev>
    {
    }
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	0800dd38 	.word	0x0800dd38

0800182c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6859      	ldr	r1, [r3, #4]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	4413      	add	r3, r2
 8001844:	b2ca      	uxtb	r2, r1
 8001846:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	0a19      	lsrs	r1, r3, #8
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3301      	adds	r3, #1
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	4413      	add	r3, r2
 8001856:	b2ca      	uxtb	r2, r1
 8001858:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	0c19      	lsrs	r1, r3, #16
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3302      	adds	r3, #2
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	4413      	add	r3, r2
 8001868:	b2ca      	uxtb	r2, r1
 800186a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	0e19      	lsrs	r1, r3, #24
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	3303      	adds	r3, #3
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	4413      	add	r3, r2
 800187a:	b2ca      	uxtb	r2, r1
 800187c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	3304      	adds	r3, #4
 8001882:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6899      	ldr	r1, [r3, #8]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	4413      	add	r3, r2
 800188e:	b2ca      	uxtb	r2, r1
 8001890:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	0a19      	lsrs	r1, r3, #8
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	3301      	adds	r3, #1
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	b2ca      	uxtb	r2, r1
 80018a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	0c19      	lsrs	r1, r3, #16
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	3302      	adds	r3, #2
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	4413      	add	r3, r2
 80018b2:	b2ca      	uxtb	r2, r1
 80018b4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	0e19      	lsrs	r1, r3, #24
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	3303      	adds	r3, #3
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	4413      	add	r3, r2
 80018c4:	b2ca      	uxtb	r2, r1
 80018c6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	3304      	adds	r3, #4
 80018cc:	60fb      	str	r3, [r7, #12]
      return offset;
 80018ce:	68fb      	ldr	r3, [r7, #12]
    }
 80018d0:	4618      	mov	r0, r3
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	3301      	adds	r3, #1
 8001900:	6839      	ldr	r1, [r7, #0]
 8001902:	440b      	add	r3, r1
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	021b      	lsls	r3, r3, #8
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3302      	adds	r3, #2
 8001916:	6839      	ldr	r1, [r7, #0]
 8001918:	440b      	add	r3, r1
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	041b      	lsls	r3, r3, #16
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	3303      	adds	r3, #3
 800192c:	6839      	ldr	r1, [r7, #0]
 800192e:	440b      	add	r3, r1
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	061b      	lsls	r3, r3, #24
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	3304      	adds	r3, #4
 800193e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	4413      	add	r3, r2
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3301      	adds	r3, #1
 8001956:	6839      	ldr	r1, [r7, #0]
 8001958:	440b      	add	r3, r1
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3302      	adds	r3, #2
 800196c:	6839      	ldr	r1, [r7, #0]
 800196e:	440b      	add	r3, r1
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	041b      	lsls	r3, r3, #16
 8001974:	431a      	orrs	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	3303      	adds	r3, #3
 8001982:	6839      	ldr	r1, [r7, #0]
 8001984:	440b      	add	r3, r1
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	061b      	lsls	r3, r3, #24
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3304      	adds	r3, #4
 8001994:	60fb      	str	r3, [r7, #12]
     return offset;
 8001996:	68fb      	ldr	r3, [r7, #12]
    }
 8001998:	4618      	mov	r0, r3
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	0800d674 	.word	0x0800d674

080019c0 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	4b03      	ldr	r3, [pc, #12]	; (80019d8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	0800d684 	.word	0x0800d684

080019dc <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fef8 	bl	80017dc <_ZN3ros3MsgC1Ev>
 80019ec:	4a0b      	ldr	r2, [pc, #44]	; (8001a1c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	809a      	strh	r2, [r3, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001a02:	60da      	str	r2, [r3, #12]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a06      	ldr	r2, [pc, #24]	; (8001a20 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001a08:	611a      	str	r2, [r3, #16]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	615a      	str	r2, [r3, #20]
    {
    }
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	0800dd20 	.word	0x0800dd20
 8001a20:	0800d6a8 	.word	0x0800d6a8

08001a24 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	8899      	ldrh	r1, [r3, #4]
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	b2ca      	uxtb	r2, r1
 8001a3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	889b      	ldrh	r3, [r3, #4]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	b299      	uxth	r1, r3
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	b2ca      	uxtb	r2, r1
 8001a52:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	3302      	adds	r3, #2
 8001a58:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fbd2 	bl	8000208 <strlen>
 8001a64:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	69b9      	ldr	r1, [r7, #24]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f005 fdfc 	bl	800766c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	3304      	adds	r3, #4
 8001a78:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	18d0      	adds	r0, r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4619      	mov	r1, r3
 8001a88:	f00b fc90 	bl	800d3ac <memcpy>
      offset += length_topic_name;
 8001a8c:	69fa      	ldr	r2, [r7, #28]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	4413      	add	r3, r2
 8001a92:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fbb5 	bl	8000208 <strlen>
 8001a9e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	6979      	ldr	r1, [r7, #20]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f005 fddf 	bl	800766c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	18d0      	adds	r0, r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f00b fc73 	bl	800d3ac <memcpy>
      offset += length_message_type;
 8001ac6:	69fa      	ldr	r2, [r7, #28]
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	4413      	add	r3, r2
 8001acc:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fb98 	bl	8000208 <strlen>
 8001ad8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	4413      	add	r3, r2
 8001ae0:	6939      	ldr	r1, [r7, #16]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f005 fdc2 	bl	800766c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	3304      	adds	r3, #4
 8001aec:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	18d0      	adds	r0, r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4619      	mov	r1, r3
 8001afc:	f00b fc56 	bl	800d3ac <memcpy>
      offset += length_md5sum;
 8001b00:	69fa      	ldr	r2, [r7, #28]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4413      	add	r3, r2
 8001b06:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001b0e:	68f9      	ldr	r1, [r7, #12]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	4413      	add	r3, r2
 8001b16:	b2ca      	uxtb	r2, r1
 8001b18:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	0a19      	lsrs	r1, r3, #8
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3301      	adds	r3, #1
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	4413      	add	r3, r2
 8001b26:	b2ca      	uxtb	r2, r1
 8001b28:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	0c19      	lsrs	r1, r3, #16
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3302      	adds	r3, #2
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	4413      	add	r3, r2
 8001b36:	b2ca      	uxtb	r2, r1
 8001b38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	0e19      	lsrs	r1, r3, #24
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3303      	adds	r3, #3
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	4413      	add	r3, r2
 8001b46:	b2ca      	uxtb	r2, r1
 8001b48:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	61fb      	str	r3, [r7, #28]
      return offset;
 8001b50:	69fb      	ldr	r3, [r7, #28]
    }
 8001b52:	4618      	mov	r0, r3
 8001b54:	3720      	adds	r7, #32
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b08a      	sub	sp, #40	; 0x28
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	889b      	ldrh	r3, [r3, #4]
 8001b7a:	b21a      	sxth	r2, r3
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	6839      	ldr	r1, [r7, #0]
 8001b82:	440b      	add	r3, r1
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	021b      	lsls	r3, r3, #8
 8001b88:	b21b      	sxth	r3, r3
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	b21b      	sxth	r3, r3
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	3302      	adds	r3, #2
 8001b98:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	441a      	add	r2, r3
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f005 fd7e 	bl	80076a8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	3304      	adds	r3, #4
 8001bb0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	4413      	add	r3, r2
 8001bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d20c      	bcs.n	8001bdc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	441a      	add	r2, r3
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	6839      	ldr	r1, [r7, #0]
 8001bce:	440b      	add	r3, r1
 8001bd0:	7812      	ldrb	r2, [r2, #0]
 8001bd2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bda:	e7ec      	b.n	8001bb6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	4413      	add	r3, r2
 8001be2:	3b01      	subs	r3, #1
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	441a      	add	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	441a      	add	r2, r3
 8001c06:	f107 0310 	add.w	r3, r7, #16
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f005 fd4b 	bl	80076a8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	3304      	adds	r3, #4
 8001c16:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	623b      	str	r3, [r7, #32]
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4413      	add	r3, r2
 8001c22:	6a3a      	ldr	r2, [r7, #32]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d20c      	bcs.n	8001c42 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	441a      	add	r2, r3
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	3b01      	subs	r3, #1
 8001c32:	6839      	ldr	r1, [r7, #0]
 8001c34:	440b      	add	r3, r1
 8001c36:	7812      	ldrb	r2, [r2, #0]
 8001c38:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	623b      	str	r3, [r7, #32]
 8001c40:	e7ec      	b.n	8001c1c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4413      	add	r3, r2
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	441a      	add	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4413      	add	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	441a      	add	r2, r3
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	4611      	mov	r1, r2
 8001c72:	4618      	mov	r0, r3
 8001c74:	f005 fd18 	bl	80076a8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	3304      	adds	r3, #4
 8001c7c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	69fa      	ldr	r2, [r7, #28]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d20c      	bcs.n	8001ca8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	441a      	add	r2, r3
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	6839      	ldr	r1, [r7, #0]
 8001c9a:	440b      	add	r3, r1
 8001c9c:	7812      	ldrb	r2, [r2, #0]
 8001c9e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	e7ec      	b.n	8001c82 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4413      	add	r3, r2
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	441a      	add	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4413      	add	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	6839      	ldr	r1, [r7, #0]
 8001cd6:	440a      	add	r2, r1
 8001cd8:	7812      	ldrb	r2, [r2, #0]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	6839      	ldr	r1, [r7, #0]
 8001ce6:	440b      	add	r3, r1
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	4313      	orrs	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	6839      	ldr	r1, [r7, #0]
 8001cf8:	440b      	add	r3, r1
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	041b      	lsls	r3, r3, #16
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	3303      	adds	r3, #3
 8001d08:	6839      	ldr	r1, [r7, #0]
 8001d0a:	440b      	add	r3, r1
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	061b      	lsls	r3, r3, #24
 8001d10:	4313      	orrs	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	61bb      	str	r3, [r7, #24]
     return offset;
 8001d20:	69bb      	ldr	r3, [r7, #24]
    }
 8001d22:	4618      	mov	r0, r3
 8001d24:	3728      	adds	r7, #40	; 0x28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	0800d6ac 	.word	0x0800d6ac

08001d48 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	0800d6c8 	.word	0x0800d6c8

08001d64 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fd34 	bl	80017dc <_ZN3ros3MsgC1Ev>
 8001d74:	4a06      	ldr	r2, [pc, #24]	; (8001d90 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	711a      	strb	r2, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001d84:	609a      	str	r2, [r3, #8]
    {
    }
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	0800dd08 	.word	0x0800dd08
 8001d94:	0800d6a8 	.word	0x0800d6a8

08001d98 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	4413      	add	r3, r2
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	7912      	ldrb	r2, [r2, #4]
 8001db0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	3301      	adds	r3, #1
 8001db6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fa23 	bl	8000208 <strlen>
 8001dc2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	4413      	add	r3, r2
 8001dca:	68b9      	ldr	r1, [r7, #8]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f005 fc4d 	bl	800766c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	18d0      	adds	r0, r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	4619      	mov	r1, r3
 8001de6:	f00b fae1 	bl	800d3ac <memcpy>
      offset += length_msg;
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4413      	add	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
      return offset;
 8001df2:	68fb      	ldr	r3, [r7, #12]
    }
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	781a      	ldrb	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	441a      	add	r2, r3
 8001e22:	f107 030c 	add.w	r3, r7, #12
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f005 fc3d 	bl	80076a8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	3304      	adds	r3, #4
 8001e32:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d20c      	bcs.n	8001e5e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	441a      	add	r2, r3
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	6839      	ldr	r1, [r7, #0]
 8001e50:	440b      	add	r3, r1
 8001e52:	7812      	ldrb	r2, [r2, #0]
 8001e54:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	e7ec      	b.n	8001e38 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4413      	add	r3, r2
 8001e64:	3b01      	subs	r3, #1
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	4413      	add	r3, r2
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	441a      	add	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4413      	add	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
     return offset;
 8001e82:	693b      	ldr	r3, [r7, #16]
    }
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	4b03      	ldr	r3, [pc, #12]	; (8001ea4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	0800d6ec 	.word	0x0800d6ec

08001ea8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	0800d700 	.word	0x0800d700

08001ec4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fc84 	bl	80017dc <_ZN3ros3MsgC1Ev>
 8001ed4:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	619a      	str	r2, [r3, #24]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	61da      	str	r2, [r3, #28]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	0800dcf0 	.word	0x0800dcf0

08001f0c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08a      	sub	sp, #40	; 0x28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6859      	ldr	r1, [r3, #4]
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	b2ca      	uxtb	r2, r1
 8001f26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	0a19      	lsrs	r1, r3, #8
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	3301      	adds	r3, #1
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	4413      	add	r3, r2
 8001f36:	b2ca      	uxtb	r2, r1
 8001f38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	0c19      	lsrs	r1, r3, #16
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	3302      	adds	r3, #2
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	b2ca      	uxtb	r2, r1
 8001f4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	0e19      	lsrs	r1, r3, #24
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	3303      	adds	r3, #3
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	4413      	add	r3, r2
 8001f5a:	b2ca      	uxtb	r2, r1
 8001f5c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	3304      	adds	r3, #4
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001f64:	2300      	movs	r3, #0
 8001f66:	623b      	str	r3, [r7, #32]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	6a3a      	ldr	r2, [r7, #32]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d22b      	bcs.n	8001fca <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001f80:	6939      	ldr	r1, [r7, #16]
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	4413      	add	r3, r2
 8001f88:	b2ca      	uxtb	r2, r1
 8001f8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	0a19      	lsrs	r1, r3, #8
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	3301      	adds	r3, #1
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	4413      	add	r3, r2
 8001f98:	b2ca      	uxtb	r2, r1
 8001f9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	0c19      	lsrs	r1, r3, #16
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	3302      	adds	r3, #2
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	b2ca      	uxtb	r2, r1
 8001faa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	0e19      	lsrs	r1, r3, #24
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	3303      	adds	r3, #3
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	b2ca      	uxtb	r2, r1
 8001fba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	623b      	str	r3, [r7, #32]
 8001fc8:	e7ce      	b.n	8001f68 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6919      	ldr	r1, [r3, #16]
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	b2ca      	uxtb	r2, r1
 8001fd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	0a19      	lsrs	r1, r3, #8
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	b2ca      	uxtb	r2, r1
 8001fe8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	0c19      	lsrs	r1, r3, #16
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	3302      	adds	r3, #2
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	b2ca      	uxtb	r2, r1
 8001ffa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	0e19      	lsrs	r1, r3, #24
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	3303      	adds	r3, #3
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	4413      	add	r3, r2
 800200a:	b2ca      	uxtb	r2, r1
 800200c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	3304      	adds	r3, #4
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002014:	2300      	movs	r3, #0
 8002016:	61fb      	str	r3, [r7, #28]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	429a      	cmp	r2, r3
 8002020:	d22b      	bcs.n	800207a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699a      	ldr	r2, [r3, #24]
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002030:	68f9      	ldr	r1, [r7, #12]
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	4413      	add	r3, r2
 8002038:	b2ca      	uxtb	r2, r1
 800203a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	0a19      	lsrs	r1, r3, #8
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	3301      	adds	r3, #1
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	4413      	add	r3, r2
 8002048:	b2ca      	uxtb	r2, r1
 800204a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	0c19      	lsrs	r1, r3, #16
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	3302      	adds	r3, #2
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	4413      	add	r3, r2
 8002058:	b2ca      	uxtb	r2, r1
 800205a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	0e19      	lsrs	r1, r3, #24
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	3303      	adds	r3, #3
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	4413      	add	r3, r2
 8002068:	b2ca      	uxtb	r2, r1
 800206a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	3304      	adds	r3, #4
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3301      	adds	r3, #1
 8002076:	61fb      	str	r3, [r7, #28]
 8002078:	e7ce      	b.n	8002018 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69d9      	ldr	r1, [r3, #28]
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	4413      	add	r3, r2
 8002084:	b2ca      	uxtb	r2, r1
 8002086:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	0a19      	lsrs	r1, r3, #8
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	3301      	adds	r3, #1
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	4413      	add	r3, r2
 8002096:	b2ca      	uxtb	r2, r1
 8002098:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	0c19      	lsrs	r1, r3, #16
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	3302      	adds	r3, #2
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	4413      	add	r3, r2
 80020a8:	b2ca      	uxtb	r2, r1
 80020aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	0e19      	lsrs	r1, r3, #24
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	3303      	adds	r3, #3
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	4413      	add	r3, r2
 80020ba:	b2ca      	uxtb	r2, r1
 80020bc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	3304      	adds	r3, #4
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80020c4:	2300      	movs	r3, #0
 80020c6:	61bb      	str	r3, [r7, #24]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d228      	bcs.n	8002124 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe f892 	bl	8000208 <strlen>
 80020e4:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	4413      	add	r3, r2
 80020ec:	6979      	ldr	r1, [r7, #20]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f005 fabc 	bl	800766c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	3304      	adds	r3, #4
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	18d0      	adds	r0, r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	4619      	mov	r1, r3
 8002110:	f00b f94c 	bl	800d3ac <memcpy>
      offset += length_stringsi;
 8002114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	4413      	add	r3, r2
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	3301      	adds	r3, #1
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	e7d1      	b.n	80020c8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002126:	4618      	mov	r0, r3
 8002128:	3728      	adds	r7, #40	; 0x28
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800212e:	b580      	push	{r7, lr}
 8002130:	b08e      	sub	sp, #56	; 0x38
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800213c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	4413      	add	r3, r2
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002148:	3301      	adds	r3, #1
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	4413      	add	r3, r2
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	021b      	lsls	r3, r3, #8
 8002152:	6a3a      	ldr	r2, [r7, #32]
 8002154:	4313      	orrs	r3, r2
 8002156:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800215a:	3302      	adds	r3, #2
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	4413      	add	r3, r2
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	041b      	lsls	r3, r3, #16
 8002164:	6a3a      	ldr	r2, [r7, #32]
 8002166:	4313      	orrs	r3, r2
 8002168:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800216a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800216c:	3303      	adds	r3, #3
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	4413      	add	r3, r2
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	061b      	lsls	r3, r3, #24
 8002176:	6a3a      	ldr	r2, [r7, #32]
 8002178:	4313      	orrs	r3, r2
 800217a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800217c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217e:	3304      	adds	r3, #4
 8002180:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	6a3a      	ldr	r2, [r7, #32]
 8002188:	429a      	cmp	r2, r3
 800218a:	d90a      	bls.n	80021a2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	6a3b      	ldr	r3, [r7, #32]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4619      	mov	r1, r3
 8002196:	4610      	mov	r0, r2
 8002198:	f00b f9c8 	bl	800d52c <realloc>
 800219c:	4602      	mov	r2, r0
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a3a      	ldr	r2, [r7, #32]
 80021a6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80021a8:	2300      	movs	r3, #0
 80021aa:	633b      	str	r3, [r7, #48]	; 0x30
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d236      	bcs.n	8002224 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021be:	6839      	ldr	r1, [r7, #0]
 80021c0:	440a      	add	r2, r1
 80021c2:	7812      	ldrb	r2, [r2, #0]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021cc:	3301      	adds	r3, #1
 80021ce:	6839      	ldr	r1, [r7, #0]
 80021d0:	440b      	add	r3, r1
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	021b      	lsls	r3, r3, #8
 80021d6:	4313      	orrs	r3, r2
 80021d8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021de:	3302      	adds	r3, #2
 80021e0:	6839      	ldr	r1, [r7, #0]
 80021e2:	440b      	add	r3, r1
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	041b      	lsls	r3, r3, #16
 80021e8:	4313      	orrs	r3, r2
 80021ea:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f0:	3303      	adds	r3, #3
 80021f2:	6839      	ldr	r1, [r7, #0]
 80021f4:	440b      	add	r3, r1
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	061b      	lsls	r3, r3, #24
 80021fa:	4313      	orrs	r3, r2
 80021fc:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002206:	3304      	adds	r3, #4
 8002208:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	3208      	adds	r2, #8
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800221c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221e:	3301      	adds	r3, #1
 8002220:	633b      	str	r3, [r7, #48]	; 0x30
 8002222:	e7c3      	b.n	80021ac <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	4413      	add	r3, r2
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800222e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002230:	3301      	adds	r3, #1
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	4413      	add	r3, r2
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	69fa      	ldr	r2, [r7, #28]
 800223c:	4313      	orrs	r3, r2
 800223e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002242:	3302      	adds	r3, #2
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	4413      	add	r3, r2
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	041b      	lsls	r3, r3, #16
 800224c:	69fa      	ldr	r2, [r7, #28]
 800224e:	4313      	orrs	r3, r2
 8002250:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002254:	3303      	adds	r3, #3
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	4413      	add	r3, r2
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	061b      	lsls	r3, r3, #24
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	4313      	orrs	r3, r2
 8002262:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002266:	3304      	adds	r3, #4
 8002268:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	69fa      	ldr	r2, [r7, #28]
 8002270:	429a      	cmp	r2, r3
 8002272:	d90a      	bls.n	800228a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699a      	ldr	r2, [r3, #24]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4619      	mov	r1, r3
 800227e:	4610      	mov	r0, r2
 8002280:	f00b f954 	bl	800d52c <realloc>
 8002284:	4602      	mov	r2, r0
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69fa      	ldr	r2, [r7, #28]
 800228e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002290:	2300      	movs	r3, #0
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800229a:	429a      	cmp	r2, r3
 800229c:	d236      	bcs.n	800230c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022a6:	6839      	ldr	r1, [r7, #0]
 80022a8:	440a      	add	r2, r1
 80022aa:	7812      	ldrb	r2, [r2, #0]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b4:	3301      	adds	r3, #1
 80022b6:	6839      	ldr	r1, [r7, #0]
 80022b8:	440b      	add	r3, r1
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	021b      	lsls	r3, r3, #8
 80022be:	4313      	orrs	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c6:	3302      	adds	r3, #2
 80022c8:	6839      	ldr	r1, [r7, #0]
 80022ca:	440b      	add	r3, r1
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	041b      	lsls	r3, r3, #16
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d8:	3303      	adds	r3, #3
 80022da:	6839      	ldr	r1, [r7, #0]
 80022dc:	440b      	add	r3, r1
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	061b      	lsls	r3, r3, #24
 80022e2:	4313      	orrs	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80022ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ee:	3304      	adds	r3, #4
 80022f0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699a      	ldr	r2, [r3, #24]
 80022f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	3214      	adds	r2, #20
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002306:	3301      	adds	r3, #1
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800230a:	e7c3      	b.n	8002294 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800230c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	4413      	add	r3, r2
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002318:	3301      	adds	r3, #1
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	4413      	add	r3, r2
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	021b      	lsls	r3, r3, #8
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800232a:	3302      	adds	r3, #2
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	4413      	add	r3, r2
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	041b      	lsls	r3, r3, #16
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800233a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800233c:	3303      	adds	r3, #3
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	4413      	add	r3, r2
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	061b      	lsls	r3, r3, #24
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800234c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800234e:	3304      	adds	r3, #4
 8002350:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	429a      	cmp	r2, r3
 800235a:	d90a      	bls.n	8002372 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4619      	mov	r1, r3
 8002366:	4610      	mov	r0, r2
 8002368:	f00b f8e0 	bl	800d52c <realloc>
 800236c:	4602      	mov	r2, r0
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002378:	2300      	movs	r3, #0
 800237a:	62bb      	str	r3, [r7, #40]	; 0x28
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002382:	429a      	cmp	r2, r3
 8002384:	d23f      	bcs.n	8002406 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	441a      	add	r2, r3
 800238c:	f107 030c 	add.w	r3, r7, #12
 8002390:	4611      	mov	r1, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f005 f988 	bl	80076a8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800239a:	3304      	adds	r3, #4
 800239c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800239e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
 80023a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4413      	add	r3, r2
 80023a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d20c      	bcs.n	80023c8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	441a      	add	r2, r3
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	3b01      	subs	r3, #1
 80023b8:	6839      	ldr	r1, [r7, #0]
 80023ba:	440b      	add	r3, r1
 80023bc:	7812      	ldrb	r2, [r2, #0]
 80023be:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	3301      	adds	r3, #1
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
 80023c6:	e7ec      	b.n	80023a2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80023c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4413      	add	r3, r2
 80023ce:	3b01      	subs	r3, #1
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	4413      	add	r3, r2
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80023d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023da:	3b01      	subs	r3, #1
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	441a      	add	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80023e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4413      	add	r3, r2
 80023ea:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	3220      	adds	r2, #32
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80023fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002400:	3301      	adds	r3, #1
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
 8002404:	e7ba      	b.n	800237c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002408:	4618      	mov	r0, r3
 800240a:	3738      	adds	r7, #56	; 0x38
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	4b03      	ldr	r3, [pc, #12]	; (8002428 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	0800db0c 	.word	0x0800db0c

0800242c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	4b03      	ldr	r3, [pc, #12]	; (8002444 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	0800d724 	.word	0x0800d724

08002448 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	611a      	str	r2, [r3, #16]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4618      	mov	r0, r3
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68d8      	ldr	r0, [r3, #12]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6891      	ldr	r1, [r2, #8]
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	4798      	blx	r3
 8002494:	4603      	mov	r3, r0
  };
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
  }
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80024cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <_ZN13STM32HardwareC1Ev+0x34>)
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4618      	mov	r0, r3
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	200011e4 	.word	0x200011e4

08002514 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f804 	bl	800252a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3304      	adds	r3, #4
 800253a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800253e:	4619      	mov	r1, r3
 8002540:	f009 fda8 	bl	800c094 <HAL_UART_Receive_DMA>
    }
 8002544:	bf00      	nop
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <_ZN13STM32Hardware4readEv>:

    int read(){
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002554:	f04f 33ff 	mov.w	r3, #4294967295
 8002558:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ffa8 	bl	80024b6 <_ZN13STM32Hardware10getRdmaIndEv>
 8002566:	4603      	mov	r3, r0
 8002568:	429c      	cmp	r4, r3
 800256a:	bf14      	ite	ne
 800256c:	2301      	movne	r3, #1
 800256e:	2300      	moveq	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d012      	beq.n	800259c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800257c:	1c59      	adds	r1, r3, #1
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	4413      	add	r3, r2
 8002588:	791b      	ldrb	r3, [r3, #4]
 800258a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002592:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 800259c:	68fb      	ldr	r3, [r7, #12]
    }
 800259e:	4618      	mov	r0, r3
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd90      	pop	{r4, r7, pc}
	...

080025a8 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b20      	cmp	r3, #32
 80025bc:	d108      	bne.n	80025d0 <_ZN13STM32Hardware5flushEv+0x28>
 80025be:	4b28      	ldr	r3, [pc, #160]	; (8002660 <_ZN13STM32Hardware5flushEv+0xb8>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	f083 0301 	eor.w	r3, r3, #1
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <_ZN13STM32Hardware5flushEv+0x28>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <_ZN13STM32Hardware5flushEv+0x2a>
 80025d0:	2300      	movs	r3, #0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d03f      	beq.n	8002656 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 80025d6:	4b22      	ldr	r3, [pc, #136]	; (8002660 <_ZN13STM32Hardware5flushEv+0xb8>)
 80025d8:	2201      	movs	r2, #1
 80025da:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d031      	beq.n	8002650 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d20a      	bcs.n	8002612 <_ZN13STM32Hardware5flushEv+0x6a>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002602:	b29a      	uxth	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800260a:	b29b      	uxth	r3, r3
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	b29b      	uxth	r3, r3
 8002610:	e006      	b.n	8002620 <_ZN13STM32Hardware5flushEv+0x78>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002618:	b29b      	uxth	r3, r3
 800261a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800261e:	b29b      	uxth	r3, r3
 8002620:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800262c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	4413      	add	r3, r2
 8002634:	89fa      	ldrh	r2, [r7, #14]
 8002636:	4619      	mov	r1, r3
 8002638:	f009 fcae 	bl	800bf98 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002642:	89fb      	ldrh	r3, [r7, #14]
 8002644:	4413      	add	r3, r2
 8002646:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002650:	4b03      	ldr	r3, [pc, #12]	; (8002660 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
      }
    }
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	200000c7 	.word	0x200000c7

08002664 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
      int n = length;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800267a:	bfa8      	it	ge
 800267c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002680:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002688:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	4293      	cmp	r3, r2
 8002690:	bf28      	it	cs
 8002692:	4613      	movcs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800269c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	4413      	add	r3, r2
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	68b9      	ldr	r1, [r7, #8]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f00a fe7f 	bl	800d3ac <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	4413      	add	r3, r2
 80026b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d00b      	beq.n	80026e2 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	18d1      	adds	r1, r2, r3
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	461a      	mov	r2, r3
 80026de:	f00a fe65 	bl	800d3ac <memcpy>
      }

      flush();
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f7ff ff60 	bl	80025a8 <_ZN13STM32Hardware5flushEv>
    }
 80026e8:	bf00      	nop
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	f007 f85a 	bl	80097b0 <HAL_GetTick>
 80026fc:	4603      	mov	r3, r0
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
      data("")
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff f862 	bl	80017dc <_ZN3ros3MsgC1Ev>
 8002718:	4a05      	ldr	r2, [pc, #20]	; (8002730 <_ZN8std_msgs6StringC1Ev+0x28>)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a04      	ldr	r2, [pc, #16]	; (8002734 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8002722:	605a      	str	r2, [r3, #4]
    {
    }
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	0800dcac 	.word	0x0800dcac
 8002734:	0800d6a8 	.word	0x0800d6a8

08002738 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4618      	mov	r0, r3
 800274c:	f7fd fd5c 	bl	8000208 <strlen>
 8002750:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	4413      	add	r3, r2
 8002758:	68b9      	ldr	r1, [r7, #8]
 800275a:	4618      	mov	r0, r3
 800275c:	f004 ff86 	bl	800766c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	3304      	adds	r3, #4
 8002764:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	18d0      	adds	r0, r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	4619      	mov	r1, r3
 8002774:	f00a fe1a 	bl	800d3ac <memcpy>
      offset += length_data;
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	4413      	add	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
      return offset;
 8002780:	68fb      	ldr	r3, [r7, #12]
    }
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	441a      	add	r2, r3
 800279e:	f107 030c 	add.w	r3, r7, #12
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f004 ff7f 	bl	80076a8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	3304      	adds	r3, #4
 80027ae:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4413      	add	r3, r2
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d20c      	bcs.n	80027da <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	441a      	add	r2, r3
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	6839      	ldr	r1, [r7, #0]
 80027cc:	440b      	add	r3, r1
 80027ce:	7812      	ldrb	r2, [r2, #0]
 80027d0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	3301      	adds	r3, #1
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	e7ec      	b.n	80027b4 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4413      	add	r3, r2
 80027e0:	3b01      	subs	r3, #1
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	4413      	add	r3, r2
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	3b01      	subs	r3, #1
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	441a      	add	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	605a      	str	r2, [r3, #4]
      offset += length_data;
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4413      	add	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
     return offset;
 80027fe:	693b      	ldr	r3, [r7, #16]
    }
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	4b03      	ldr	r3, [pc, #12]	; (8002820 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	0800d748 	.word	0x0800d748

08002824 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <_ZN8std_msgs6String6getMD5Ev+0x18>)
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	0800d758 	.word	0x0800d758

08002840 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe ffc6 	bl	80017dc <_ZN3ros3MsgC1Ev>
 8002850:	4a0e      	ldr	r2, [pc, #56]	; (800288c <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	0800dc94 	.word	0x0800dc94

08002890 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002890:	b480      	push	{r7}
 8002892:	b08b      	sub	sp, #44	; 0x2c
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800289a:	2300      	movs	r3, #0
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80028a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80028a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ae:	6838      	ldr	r0, [r7, #0]
 80028b0:	4401      	add	r1, r0
 80028b2:	b2d3      	uxtb	r3, r2
 80028b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80028b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	0a02      	lsrs	r2, r0, #8
 80028c4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80028c8:	0a0b      	lsrs	r3, r1, #8
 80028ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028cc:	3101      	adds	r1, #1
 80028ce:	6838      	ldr	r0, [r7, #0]
 80028d0:	4401      	add	r1, r0
 80028d2:	b2d3      	uxtb	r3, r2
 80028d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80028d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	0c02      	lsrs	r2, r0, #16
 80028e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80028e8:	0c0b      	lsrs	r3, r1, #16
 80028ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ec:	3102      	adds	r1, #2
 80028ee:	6838      	ldr	r0, [r7, #0]
 80028f0:	4401      	add	r1, r0
 80028f2:	b2d3      	uxtb	r3, r2
 80028f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80028f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	0e02      	lsrs	r2, r0, #24
 8002904:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002908:	0e0b      	lsrs	r3, r1, #24
 800290a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800290c:	3103      	adds	r1, #3
 800290e:	6838      	ldr	r0, [r7, #0]
 8002910:	4401      	add	r1, r0
 8002912:	b2d3      	uxtb	r3, r2
 8002914:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002916:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	000a      	movs	r2, r1
 8002924:	2300      	movs	r3, #0
 8002926:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002928:	3104      	adds	r1, #4
 800292a:	6838      	ldr	r0, [r7, #0]
 800292c:	4401      	add	r1, r0
 800292e:	b2d3      	uxtb	r3, r2
 8002930:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002932:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	0a0a      	lsrs	r2, r1, #8
 8002940:	2300      	movs	r3, #0
 8002942:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002944:	3105      	adds	r1, #5
 8002946:	6838      	ldr	r0, [r7, #0]
 8002948:	4401      	add	r1, r0
 800294a:	b2d3      	uxtb	r3, r2
 800294c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800294e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	0c0a      	lsrs	r2, r1, #16
 800295c:	2300      	movs	r3, #0
 800295e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002960:	3106      	adds	r1, #6
 8002962:	6838      	ldr	r0, [r7, #0]
 8002964:	4401      	add	r1, r0
 8002966:	b2d3      	uxtb	r3, r2
 8002968:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800296a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	0e0a      	lsrs	r2, r1, #24
 8002978:	2300      	movs	r3, #0
 800297a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800297c:	3107      	adds	r1, #7
 800297e:	6838      	ldr	r0, [r7, #0]
 8002980:	4401      	add	r1, r0
 8002982:	b2d3      	uxtb	r3, r2
 8002984:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	3308      	adds	r3, #8
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002992:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002996:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800299a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800299c:	6838      	ldr	r0, [r7, #0]
 800299e:	4401      	add	r1, r0
 80029a0:	b2d3      	uxtb	r3, r2
 80029a2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80029a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	0a02      	lsrs	r2, r0, #8
 80029b2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80029b6:	0a0b      	lsrs	r3, r1, #8
 80029b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029ba:	3101      	adds	r1, #1
 80029bc:	6838      	ldr	r0, [r7, #0]
 80029be:	4401      	add	r1, r0
 80029c0:	b2d3      	uxtb	r3, r2
 80029c2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80029c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	0c02      	lsrs	r2, r0, #16
 80029d2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80029d6:	0c0b      	lsrs	r3, r1, #16
 80029d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029da:	3102      	adds	r1, #2
 80029dc:	6838      	ldr	r0, [r7, #0]
 80029de:	4401      	add	r1, r0
 80029e0:	b2d3      	uxtb	r3, r2
 80029e2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80029e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	f04f 0300 	mov.w	r3, #0
 80029f0:	0e02      	lsrs	r2, r0, #24
 80029f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80029f6:	0e0b      	lsrs	r3, r1, #24
 80029f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029fa:	3103      	adds	r1, #3
 80029fc:	6838      	ldr	r0, [r7, #0]
 80029fe:	4401      	add	r1, r0
 8002a00:	b2d3      	uxtb	r3, r2
 8002a02:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002a04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	000a      	movs	r2, r1
 8002a12:	2300      	movs	r3, #0
 8002a14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a16:	3104      	adds	r1, #4
 8002a18:	6838      	ldr	r0, [r7, #0]
 8002a1a:	4401      	add	r1, r0
 8002a1c:	b2d3      	uxtb	r3, r2
 8002a1e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002a20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	0a0a      	lsrs	r2, r1, #8
 8002a2e:	2300      	movs	r3, #0
 8002a30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a32:	3105      	adds	r1, #5
 8002a34:	6838      	ldr	r0, [r7, #0]
 8002a36:	4401      	add	r1, r0
 8002a38:	b2d3      	uxtb	r3, r2
 8002a3a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002a3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	0c0a      	lsrs	r2, r1, #16
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a4e:	3106      	adds	r1, #6
 8002a50:	6838      	ldr	r0, [r7, #0]
 8002a52:	4401      	add	r1, r0
 8002a54:	b2d3      	uxtb	r3, r2
 8002a56:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002a58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	0e0a      	lsrs	r2, r1, #24
 8002a66:	2300      	movs	r3, #0
 8002a68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a6a:	3107      	adds	r1, #7
 8002a6c:	6838      	ldr	r0, [r7, #0]
 8002a6e:	4401      	add	r1, r0
 8002a70:	b2d3      	uxtb	r3, r2
 8002a72:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	3308      	adds	r3, #8
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002a80:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002a84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a8a:	6838      	ldr	r0, [r7, #0]
 8002a8c:	4401      	add	r1, r0
 8002a8e:	b2d3      	uxtb	r3, r2
 8002a90:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002a92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	0a02      	lsrs	r2, r0, #8
 8002aa0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002aa4:	0a0b      	lsrs	r3, r1, #8
 8002aa6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aa8:	3101      	adds	r1, #1
 8002aaa:	6838      	ldr	r0, [r7, #0]
 8002aac:	4401      	add	r1, r0
 8002aae:	b2d3      	uxtb	r3, r2
 8002ab0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002ab2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	0c02      	lsrs	r2, r0, #16
 8002ac0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002ac4:	0c0b      	lsrs	r3, r1, #16
 8002ac6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ac8:	3102      	adds	r1, #2
 8002aca:	6838      	ldr	r0, [r7, #0]
 8002acc:	4401      	add	r1, r0
 8002ace:	b2d3      	uxtb	r3, r2
 8002ad0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002ad2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	0e02      	lsrs	r2, r0, #24
 8002ae0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002ae4:	0e0b      	lsrs	r3, r1, #24
 8002ae6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ae8:	3103      	adds	r1, #3
 8002aea:	6838      	ldr	r0, [r7, #0]
 8002aec:	4401      	add	r1, r0
 8002aee:	b2d3      	uxtb	r3, r2
 8002af0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002af2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	000a      	movs	r2, r1
 8002b00:	2300      	movs	r3, #0
 8002b02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b04:	3104      	adds	r1, #4
 8002b06:	6838      	ldr	r0, [r7, #0]
 8002b08:	4401      	add	r1, r0
 8002b0a:	b2d3      	uxtb	r3, r2
 8002b0c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002b0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	0a0a      	lsrs	r2, r1, #8
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b20:	3105      	adds	r1, #5
 8002b22:	6838      	ldr	r0, [r7, #0]
 8002b24:	4401      	add	r1, r0
 8002b26:	b2d3      	uxtb	r3, r2
 8002b28:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002b2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	0c0a      	lsrs	r2, r1, #16
 8002b38:	2300      	movs	r3, #0
 8002b3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b3c:	3106      	adds	r1, #6
 8002b3e:	6838      	ldr	r0, [r7, #0]
 8002b40:	4401      	add	r1, r0
 8002b42:	b2d3      	uxtb	r3, r2
 8002b44:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002b46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	f04f 0300 	mov.w	r3, #0
 8002b52:	0e0a      	lsrs	r2, r1, #24
 8002b54:	2300      	movs	r3, #0
 8002b56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b58:	3107      	adds	r1, #7
 8002b5a:	6838      	ldr	r0, [r7, #0]
 8002b5c:	4401      	add	r1, r0
 8002b5e:	b2d3      	uxtb	r3, r2
 8002b60:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	3308      	adds	r3, #8
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	372c      	adds	r7, #44	; 0x2c
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002b76:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002b7a:	b0bb      	sub	sp, #236	; 0xec
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8002b82:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
    {
      int offset = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b98:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002b9c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002ba0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ba4:	4413      	add	r3, r2
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	ea40 0402 	orr.w	r4, r0, r2
 8002bb2:	ea41 0503 	orr.w	r5, r1, r3
 8002bb6:	e9c7 4536 	strd	r4, r5, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002bba:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bc8:	4413      	add	r3, r2
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	f04f 0000 	mov.w	r0, #0
 8002bd6:	f04f 0100 	mov.w	r1, #0
 8002bda:	0219      	lsls	r1, r3, #8
 8002bdc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8002be0:	0210      	lsls	r0, r2, #8
 8002be2:	ea44 0a00 	orr.w	sl, r4, r0
 8002be6:	ea45 0b01 	orr.w	fp, r5, r1
 8002bea:	e9c7 ab36 	strd	sl, fp, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002bee:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bf6:	1c9a      	adds	r2, r3, #2
 8002bf8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bfc:	4413      	add	r3, r2
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	f04f 0000 	mov.w	r0, #0
 8002c0a:	f04f 0100 	mov.w	r1, #0
 8002c0e:	0419      	lsls	r1, r3, #16
 8002c10:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002c14:	0410      	lsls	r0, r2, #16
 8002c16:	ea44 0300 	orr.w	r3, r4, r0
 8002c1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c1e:	ea45 0301 	orr.w	r3, r5, r1
 8002c22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002c26:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002c2a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c2e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c36:	1cda      	adds	r2, r3, #3
 8002c38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c3c:	4413      	add	r3, r2
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	f04f 0300 	mov.w	r3, #0
 8002c46:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8002c4a:	ea4f 6802 	mov.w	r8, r2, lsl #24
 8002c4e:	ea40 0308 	orr.w	r3, r0, r8
 8002c52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c56:	ea41 0309 	orr.w	r3, r1, r9
 8002c5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c5e:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8002c62:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002c66:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c6e:	1d1a      	adds	r2, r3, #4
 8002c70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c74:	4413      	add	r3, r2
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	f04f 0000 	mov.w	r0, #0
 8002c82:	f04f 0100 	mov.w	r1, #0
 8002c86:	0011      	movs	r1, r2
 8002c88:	2000      	movs	r0, #0
 8002c8a:	ea44 0300 	orr.w	r3, r4, r0
 8002c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c92:	ea45 0301 	orr.w	r3, r5, r1
 8002c96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c9a:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002c9e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002ca2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002caa:	1d5a      	adds	r2, r3, #5
 8002cac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cb0:	4413      	add	r3, r2
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	f04f 0000 	mov.w	r0, #0
 8002cbe:	f04f 0100 	mov.w	r1, #0
 8002cc2:	0211      	lsls	r1, r2, #8
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	ea44 0300 	orr.w	r3, r4, r0
 8002cca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002cce:	ea45 0301 	orr.w	r3, r5, r1
 8002cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002cd6:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8002cda:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002cde:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ce6:	1d9a      	adds	r2, r3, #6
 8002ce8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cec:	4413      	add	r3, r2
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	f04f 0000 	mov.w	r0, #0
 8002cfa:	f04f 0100 	mov.w	r1, #0
 8002cfe:	0411      	lsls	r1, r2, #16
 8002d00:	2000      	movs	r0, #0
 8002d02:	ea44 0300 	orr.w	r3, r4, r0
 8002d06:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d0a:	ea45 0301 	orr.w	r3, r5, r1
 8002d0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d12:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002d16:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002d1a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d22:	1dda      	adds	r2, r3, #7
 8002d24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d28:	4413      	add	r3, r2
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	f04f 0000 	mov.w	r0, #0
 8002d36:	f04f 0100 	mov.w	r1, #0
 8002d3a:	0611      	lsls	r1, r2, #24
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	ea44 0300 	orr.w	r3, r4, r0
 8002d42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d46:	ea45 0301 	orr.w	r3, r5, r1
 8002d4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d4e:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8002d52:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      this->x = u_x.real;
 8002d56:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002d5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d5e:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d66:	3308      	adds	r3, #8
 8002d68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002d78:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002d7c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002d80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d84:	4413      	add	r3, r2
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	ea40 0402 	orr.w	r4, r0, r2
 8002d92:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002d96:	430b      	orrs	r3, r1
 8002d98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002d9c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002da0:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002da4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002db2:	4413      	add	r3, r2
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	f04f 0000 	mov.w	r0, #0
 8002dc0:	f04f 0100 	mov.w	r1, #0
 8002dc4:	0219      	lsls	r1, r3, #8
 8002dc6:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8002dca:	0210      	lsls	r0, r2, #8
 8002dcc:	ea44 0300 	orr.w	r3, r4, r0
 8002dd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002dd4:	ea45 0301 	orr.w	r3, r5, r1
 8002dd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ddc:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8002de0:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002de4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dec:	1c9a      	adds	r2, r3, #2
 8002dee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002df2:	4413      	add	r3, r2
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	f04f 0000 	mov.w	r0, #0
 8002e00:	f04f 0100 	mov.w	r1, #0
 8002e04:	0419      	lsls	r1, r3, #16
 8002e06:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002e0a:	0410      	lsls	r0, r2, #16
 8002e0c:	ea44 0300 	orr.w	r3, r4, r0
 8002e10:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e12:	ea45 0301 	orr.w	r3, r5, r1
 8002e16:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e18:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002e1c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e20:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e28:	1cda      	adds	r2, r3, #3
 8002e2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e2e:	4413      	add	r3, r2
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	f04f 0300 	mov.w	r3, #0
 8002e38:	0a14      	lsrs	r4, r2, #8
 8002e3a:	677c      	str	r4, [r7, #116]	; 0x74
 8002e3c:	0613      	lsls	r3, r2, #24
 8002e3e:	673b      	str	r3, [r7, #112]	; 0x70
 8002e40:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8002e44:	4623      	mov	r3, r4
 8002e46:	4303      	orrs	r3, r0
 8002e48:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e4a:	462b      	mov	r3, r5
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e50:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002e54:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002e58:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e60:	1d1a      	adds	r2, r3, #4
 8002e62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e66:	4413      	add	r3, r2
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	f04f 0000 	mov.w	r0, #0
 8002e74:	f04f 0100 	mov.w	r1, #0
 8002e78:	0011      	movs	r1, r2
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	ea44 0300 	orr.w	r3, r4, r0
 8002e80:	663b      	str	r3, [r7, #96]	; 0x60
 8002e82:	ea45 0301 	orr.w	r3, r5, r1
 8002e86:	667b      	str	r3, [r7, #100]	; 0x64
 8002e88:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8002e8c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002e90:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e98:	1d5a      	adds	r2, r3, #5
 8002e9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e9e:	4413      	add	r3, r2
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	f04f 0000 	mov.w	r0, #0
 8002eac:	f04f 0100 	mov.w	r1, #0
 8002eb0:	0211      	lsls	r1, r2, #8
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	ea44 0300 	orr.w	r3, r4, r0
 8002eb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002eba:	ea45 0301 	orr.w	r3, r5, r1
 8002ebe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ec0:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002ec4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002ec8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ed0:	1d9a      	adds	r2, r3, #6
 8002ed2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ed6:	4413      	add	r3, r2
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	f04f 0000 	mov.w	r0, #0
 8002ee4:	f04f 0100 	mov.w	r1, #0
 8002ee8:	0411      	lsls	r1, r2, #16
 8002eea:	2000      	movs	r0, #0
 8002eec:	ea44 0300 	orr.w	r3, r4, r0
 8002ef0:	653b      	str	r3, [r7, #80]	; 0x50
 8002ef2:	ea45 0301 	orr.w	r3, r5, r1
 8002ef6:	657b      	str	r3, [r7, #84]	; 0x54
 8002ef8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8002efc:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002f00:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f08:	1dda      	adds	r2, r3, #7
 8002f0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f0e:	4413      	add	r3, r2
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	f04f 0000 	mov.w	r0, #0
 8002f1c:	f04f 0100 	mov.w	r1, #0
 8002f20:	0611      	lsls	r1, r2, #24
 8002f22:	2000      	movs	r0, #0
 8002f24:	ea44 0300 	orr.w	r3, r4, r0
 8002f28:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f2a:	ea45 0301 	orr.w	r3, r5, r1
 8002f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f30:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8002f34:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      this->y = u_y.real;
 8002f38:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002f3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f40:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f48:	3308      	adds	r3, #8
 8002f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002f62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f66:	4413      	add	r3, r2
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	ea40 0402 	orr.w	r4, r0, r2
 8002f74:	643c      	str	r4, [r7, #64]	; 0x40
 8002f76:	430b      	orrs	r3, r1
 8002f78:	647b      	str	r3, [r7, #68]	; 0x44
 8002f7a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002f7e:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f82:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8002f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f90:	4413      	add	r3, r2
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	f04f 0000 	mov.w	r0, #0
 8002f9e:	f04f 0100 	mov.w	r1, #0
 8002fa2:	0219      	lsls	r1, r3, #8
 8002fa4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8002fa8:	0210      	lsls	r0, r2, #8
 8002faa:	ea44 0300 	orr.w	r3, r4, r0
 8002fae:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fb0:	ea45 0301 	orr.w	r3, r5, r1
 8002fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fb6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002fba:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002fbe:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8002fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc6:	1c9a      	adds	r2, r3, #2
 8002fc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fcc:	4413      	add	r3, r2
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	f04f 0000 	mov.w	r0, #0
 8002fda:	f04f 0100 	mov.w	r1, #0
 8002fde:	0419      	lsls	r1, r3, #16
 8002fe0:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002fe4:	0410      	lsls	r0, r2, #16
 8002fe6:	ea44 0300 	orr.w	r3, r4, r0
 8002fea:	633b      	str	r3, [r7, #48]	; 0x30
 8002fec:	ea45 0301 	orr.w	r3, r5, r1
 8002ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ff2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002ff6:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ffa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003002:	1cda      	adds	r2, r3, #3
 8003004:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003008:	4413      	add	r3, r2
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	b2da      	uxtb	r2, r3
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	0a14      	lsrs	r4, r2, #8
 8003014:	62fc      	str	r4, [r7, #44]	; 0x2c
 8003016:	0613      	lsls	r3, r2, #24
 8003018:	62bb      	str	r3, [r7, #40]	; 0x28
 800301a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800301e:	4623      	mov	r3, r4
 8003020:	4303      	orrs	r3, r0
 8003022:	623b      	str	r3, [r7, #32]
 8003024:	462b      	mov	r3, r5
 8003026:	430b      	orrs	r3, r1
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
 800302a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800302e:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003032:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800303a:	3304      	adds	r3, #4
 800303c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003040:	4413      	add	r3, r2
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	b2dc      	uxtb	r4, r3
 8003046:	f04f 0500 	mov.w	r5, #0
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	0023      	movs	r3, r4
 8003054:	2200      	movs	r2, #0
 8003056:	ea40 0402 	orr.w	r4, r0, r2
 800305a:	61bc      	str	r4, [r7, #24]
 800305c:	430b      	orrs	r3, r1
 800305e:	61fb      	str	r3, [r7, #28]
 8003060:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003064:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003068:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800306c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003070:	3305      	adds	r3, #5
 8003072:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003076:	4413      	add	r3, r2
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	b2dc      	uxtb	r4, r3
 800307c:	f04f 0500 	mov.w	r5, #0
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	0223      	lsls	r3, r4, #8
 800308a:	2200      	movs	r2, #0
 800308c:	ea40 0402 	orr.w	r4, r0, r2
 8003090:	613c      	str	r4, [r7, #16]
 8003092:	430b      	orrs	r3, r1
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800309a:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800309e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80030a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a6:	3306      	adds	r3, #6
 80030a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80030ac:	4413      	add	r3, r2
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	b2dc      	uxtb	r4, r3
 80030b2:	f04f 0500 	mov.w	r5, #0
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	0423      	lsls	r3, r4, #16
 80030c0:	2200      	movs	r2, #0
 80030c2:	ea40 0402 	orr.w	r4, r0, r2
 80030c6:	60bc      	str	r4, [r7, #8]
 80030c8:	430b      	orrs	r3, r1
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80030d0:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80030d4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80030d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030dc:	3307      	adds	r3, #7
 80030de:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80030e2:	4413      	add	r3, r2
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	b2dc      	uxtb	r4, r3
 80030e8:	f04f 0500 	mov.w	r5, #0
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	0623      	lsls	r3, r4, #24
 80030f6:	2200      	movs	r2, #0
 80030f8:	ea40 0402 	orr.w	r4, r0, r2
 80030fc:	603c      	str	r4, [r7, #0]
 80030fe:	430b      	orrs	r3, r1
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003106:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      this->z = u_z.real;
 800310a:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800310e:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8003112:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800311a:	3308      	adds	r3, #8
 800311c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
     return offset;
 8003120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    }
 8003124:	4618      	mov	r0, r3
 8003126:	37ec      	adds	r7, #236	; 0xec
 8003128:	46bd      	mov	sp, r7
 800312a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800312e:	4770      	bx	lr

08003130 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	4b03      	ldr	r3, [pc, #12]	; (8003148 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 800313a:	4618      	mov	r0, r3
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	0800d77c 	.word	0x0800d77c

0800314c <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	4b03      	ldr	r3, [pc, #12]	; (8003164 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003156:	4618      	mov	r0, r3
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	0800d794 	.word	0x0800d794

08003168 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4618      	mov	r0, r3
 8003174:	f7fe fb32 	bl	80017dc <_ZN3ros3MsgC1Ev>
 8003178:	4a08      	ldr	r2, [pc, #32]	; (800319c <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3308      	adds	r3, #8
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fb5c 	bl	8002840 <_ZN13geometry_msgs7Vector3C1Ev>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3328      	adds	r3, #40	; 0x28
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff fb57 	bl	8002840 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4618      	mov	r0, r3
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	0800dc7c 	.word	0x0800dc7c

080031a0 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f103 0008 	add.w	r0, r3, #8
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	4413      	add	r3, r2
 80031ba:	4619      	mov	r1, r3
 80031bc:	f7ff fb68 	bl	8002890 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80031c0:	4602      	mov	r2, r0
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4413      	add	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	4413      	add	r3, r2
 80031d4:	4619      	mov	r1, r3
 80031d6:	f7ff fb5b 	bl	8002890 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80031da:	4602      	mov	r2, r0
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4413      	add	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]
      return offset;
 80031e2:	68fb      	ldr	r3, [r7, #12]
    }
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f103 0008 	add.w	r0, r3, #8
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	4413      	add	r3, r2
 8003206:	4619      	mov	r1, r3
 8003208:	f7ff fcb5 	bl	8002b76 <_ZN13geometry_msgs7Vector311deserializeEPh>
 800320c:	4602      	mov	r2, r0
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4413      	add	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	4413      	add	r3, r2
 8003220:	4619      	mov	r1, r3
 8003222:	f7ff fca8 	bl	8002b76 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003226:	4602      	mov	r2, r0
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4413      	add	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
     return offset;
 800322e:	68fb      	ldr	r3, [r7, #12]
    }
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	4b03      	ldr	r3, [pc, #12]	; (8003250 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003242:	4618      	mov	r0, r3
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	0800d7b8 	.word	0x0800d7b8

08003254 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	4b03      	ldr	r3, [pc, #12]	; (800326c <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	0800d7cc 	.word	0x0800d7cc

08003270 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4618      	mov	r0, r3
 800327c:	f7fe faae 	bl	80017dc <_ZN3ros3MsgC1Ev>
 8003280:	4a09      	ldr	r2, [pc, #36]	; (80032a8 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	605a      	str	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3308      	adds	r3, #8
 8003290:	4618      	mov	r0, r3
 8003292:	f7fe fa92 	bl	80017ba <_ZN3ros4TimeC1Ev>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a04      	ldr	r2, [pc, #16]	; (80032ac <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 800329a:	611a      	str	r2, [r3, #16]
    {
    }
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	0800dc64 	.word	0x0800dc64
 80032ac:	0800d6a8 	.word	0x0800d6a8

080032b0 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6859      	ldr	r1, [r3, #4]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	4413      	add	r3, r2
 80032c8:	b2ca      	uxtb	r2, r1
 80032ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	0a19      	lsrs	r1, r3, #8
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	3301      	adds	r3, #1
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	4413      	add	r3, r2
 80032da:	b2ca      	uxtb	r2, r1
 80032dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	0c19      	lsrs	r1, r3, #16
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	3302      	adds	r3, #2
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	4413      	add	r3, r2
 80032ec:	b2ca      	uxtb	r2, r1
 80032ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	0e19      	lsrs	r1, r3, #24
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	3303      	adds	r3, #3
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	4413      	add	r3, r2
 80032fe:	b2ca      	uxtb	r2, r1
 8003300:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	3304      	adds	r3, #4
 8003306:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6899      	ldr	r1, [r3, #8]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	4413      	add	r3, r2
 8003312:	b2ca      	uxtb	r2, r1
 8003314:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	0a19      	lsrs	r1, r3, #8
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	3301      	adds	r3, #1
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	4413      	add	r3, r2
 8003324:	b2ca      	uxtb	r2, r1
 8003326:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	0c19      	lsrs	r1, r3, #16
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	3302      	adds	r3, #2
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	4413      	add	r3, r2
 8003336:	b2ca      	uxtb	r2, r1
 8003338:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	0e19      	lsrs	r1, r3, #24
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	3303      	adds	r3, #3
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	4413      	add	r3, r2
 8003348:	b2ca      	uxtb	r2, r1
 800334a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	3304      	adds	r3, #4
 8003350:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68d9      	ldr	r1, [r3, #12]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	4413      	add	r3, r2
 800335c:	b2ca      	uxtb	r2, r1
 800335e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	0a19      	lsrs	r1, r3, #8
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	3301      	adds	r3, #1
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	4413      	add	r3, r2
 800336e:	b2ca      	uxtb	r2, r1
 8003370:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	0c19      	lsrs	r1, r3, #16
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	3302      	adds	r3, #2
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	4413      	add	r3, r2
 8003380:	b2ca      	uxtb	r2, r1
 8003382:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	0e19      	lsrs	r1, r3, #24
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	3303      	adds	r3, #3
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	4413      	add	r3, r2
 8003392:	b2ca      	uxtb	r2, r1
 8003394:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	3304      	adds	r3, #4
 800339a:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7fc ff31 	bl	8000208 <strlen>
 80033a6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	4413      	add	r3, r2
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f004 f95b 	bl	800766c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	3304      	adds	r3, #4
 80033ba:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	18d0      	adds	r0, r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	4619      	mov	r1, r3
 80033ca:	f009 ffef 	bl	800d3ac <memcpy>
      offset += length_frame_id;
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	4413      	add	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
      return offset;
 80033d6:	68fb      	ldr	r3, [r7, #12]
    }
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80033ea:	2300      	movs	r3, #0
 80033ec:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	4413      	add	r3, r2
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	3301      	adds	r3, #1
 8003404:	6839      	ldr	r1, [r7, #0]
 8003406:	440b      	add	r3, r1
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	021b      	lsls	r3, r3, #8
 800340c:	431a      	orrs	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	3302      	adds	r3, #2
 800341a:	6839      	ldr	r1, [r7, #0]
 800341c:	440b      	add	r3, r1
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	041b      	lsls	r3, r3, #16
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	3303      	adds	r3, #3
 8003430:	6839      	ldr	r1, [r7, #0]
 8003432:	440b      	add	r3, r1
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	061b      	lsls	r3, r3, #24
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	3304      	adds	r3, #4
 8003442:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	4413      	add	r3, r2
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	3301      	adds	r3, #1
 800345a:	6839      	ldr	r1, [r7, #0]
 800345c:	440b      	add	r3, r1
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	3302      	adds	r3, #2
 8003470:	6839      	ldr	r1, [r7, #0]
 8003472:	440b      	add	r3, r1
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	041b      	lsls	r3, r3, #16
 8003478:	431a      	orrs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	3303      	adds	r3, #3
 8003486:	6839      	ldr	r1, [r7, #0]
 8003488:	440b      	add	r3, r1
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	061b      	lsls	r3, r3, #24
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	3304      	adds	r3, #4
 8003498:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	4413      	add	r3, r2
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	3301      	adds	r3, #1
 80034b0:	6839      	ldr	r1, [r7, #0]
 80034b2:	440b      	add	r3, r1
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	021b      	lsls	r3, r3, #8
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	3302      	adds	r3, #2
 80034c6:	6839      	ldr	r1, [r7, #0]
 80034c8:	440b      	add	r3, r1
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	041b      	lsls	r3, r3, #16
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	3303      	adds	r3, #3
 80034dc:	6839      	ldr	r1, [r7, #0]
 80034de:	440b      	add	r3, r1
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	061b      	lsls	r3, r3, #24
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	3304      	adds	r3, #4
 80034ee:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	441a      	add	r2, r3
 80034f6:	f107 030c 	add.w	r3, r7, #12
 80034fa:	4611      	mov	r1, r2
 80034fc:	4618      	mov	r0, r3
 80034fe:	f004 f8d3 	bl	80076a8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	3304      	adds	r3, #4
 8003506:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4413      	add	r3, r2
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	429a      	cmp	r2, r3
 8003516:	d20c      	bcs.n	8003532 <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	441a      	add	r2, r3
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	3b01      	subs	r3, #1
 8003522:	6839      	ldr	r1, [r7, #0]
 8003524:	440b      	add	r3, r1
 8003526:	7812      	ldrb	r2, [r2, #0]
 8003528:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	3301      	adds	r3, #1
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	e7ec      	b.n	800350c <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4413      	add	r3, r2
 8003538:	3b01      	subs	r3, #1
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	4413      	add	r3, r2
 800353e:	2200      	movs	r2, #0
 8003540:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	3b01      	subs	r3, #1
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	441a      	add	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4413      	add	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
     return offset;
 8003556:	693b      	ldr	r3, [r7, #16]
    }
 8003558:	4618      	mov	r0, r3
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	4b03      	ldr	r3, [pc, #12]	; (8003578 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	0800d7f0 	.word	0x0800d7f0

0800357c <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	4b03      	ldr	r3, [pc, #12]	; (8003594 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 8003586:	4618      	mov	r0, r3
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	0800d800 	.word	0x0800d800

08003598 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe f91a 	bl	80017dc <_ZN3ros3MsgC1Ev>
 80035a8:	4a11      	ldr	r2, [pc, #68]	; (80035f0 <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	e9c1 2308 	strd	r2, r3, [r1, #32]
    {
    }
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4618      	mov	r0, r3
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	0800dc4c 	.word	0x0800dc4c

080035f4 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80035f4:	b480      	push	{r7}
 80035f6:	b08d      	sub	sp, #52	; 0x34
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003608:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 800360c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003610:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003612:	6838      	ldr	r0, [r7, #0]
 8003614:	4401      	add	r1, r0
 8003616:	b2d3      	uxtb	r3, r2
 8003618:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800361a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	0a02      	lsrs	r2, r0, #8
 8003628:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800362c:	0a0b      	lsrs	r3, r1, #8
 800362e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003630:	3101      	adds	r1, #1
 8003632:	6838      	ldr	r0, [r7, #0]
 8003634:	4401      	add	r1, r0
 8003636:	b2d3      	uxtb	r3, r2
 8003638:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800363a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	0c02      	lsrs	r2, r0, #16
 8003648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800364c:	0c0b      	lsrs	r3, r1, #16
 800364e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003650:	3102      	adds	r1, #2
 8003652:	6838      	ldr	r0, [r7, #0]
 8003654:	4401      	add	r1, r0
 8003656:	b2d3      	uxtb	r3, r2
 8003658:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800365a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	0e02      	lsrs	r2, r0, #24
 8003668:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800366c:	0e0b      	lsrs	r3, r1, #24
 800366e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003670:	3103      	adds	r1, #3
 8003672:	6838      	ldr	r0, [r7, #0]
 8003674:	4401      	add	r1, r0
 8003676:	b2d3      	uxtb	r3, r2
 8003678:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800367a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	000a      	movs	r2, r1
 8003688:	2300      	movs	r3, #0
 800368a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800368c:	3104      	adds	r1, #4
 800368e:	6838      	ldr	r0, [r7, #0]
 8003690:	4401      	add	r1, r0
 8003692:	b2d3      	uxtb	r3, r2
 8003694:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8003696:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	0a0a      	lsrs	r2, r1, #8
 80036a4:	2300      	movs	r3, #0
 80036a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036a8:	3105      	adds	r1, #5
 80036aa:	6838      	ldr	r0, [r7, #0]
 80036ac:	4401      	add	r1, r0
 80036ae:	b2d3      	uxtb	r3, r2
 80036b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80036b2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	0c0a      	lsrs	r2, r1, #16
 80036c0:	2300      	movs	r3, #0
 80036c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036c4:	3106      	adds	r1, #6
 80036c6:	6838      	ldr	r0, [r7, #0]
 80036c8:	4401      	add	r1, r0
 80036ca:	b2d3      	uxtb	r3, r2
 80036cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80036ce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	0e0a      	lsrs	r2, r1, #24
 80036dc:	2300      	movs	r3, #0
 80036de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036e0:	3107      	adds	r1, #7
 80036e2:	6838      	ldr	r0, [r7, #0]
 80036e4:	4401      	add	r1, r0
 80036e6:	b2d3      	uxtb	r3, r2
 80036e8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80036ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ec:	3308      	adds	r3, #8
 80036ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80036f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80036fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003700:	6838      	ldr	r0, [r7, #0]
 8003702:	4401      	add	r1, r0
 8003704:	b2d3      	uxtb	r3, r2
 8003706:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003708:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	0a02      	lsrs	r2, r0, #8
 8003716:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800371a:	0a0b      	lsrs	r3, r1, #8
 800371c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800371e:	3101      	adds	r1, #1
 8003720:	6838      	ldr	r0, [r7, #0]
 8003722:	4401      	add	r1, r0
 8003724:	b2d3      	uxtb	r3, r2
 8003726:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003728:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	0c02      	lsrs	r2, r0, #16
 8003736:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800373a:	0c0b      	lsrs	r3, r1, #16
 800373c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800373e:	3102      	adds	r1, #2
 8003740:	6838      	ldr	r0, [r7, #0]
 8003742:	4401      	add	r1, r0
 8003744:	b2d3      	uxtb	r3, r2
 8003746:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003748:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	0e02      	lsrs	r2, r0, #24
 8003756:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800375a:	0e0b      	lsrs	r3, r1, #24
 800375c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800375e:	3103      	adds	r1, #3
 8003760:	6838      	ldr	r0, [r7, #0]
 8003762:	4401      	add	r1, r0
 8003764:	b2d3      	uxtb	r3, r2
 8003766:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003768:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	000a      	movs	r2, r1
 8003776:	2300      	movs	r3, #0
 8003778:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800377a:	3104      	adds	r1, #4
 800377c:	6838      	ldr	r0, [r7, #0]
 800377e:	4401      	add	r1, r0
 8003780:	b2d3      	uxtb	r3, r2
 8003782:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003784:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	0a0a      	lsrs	r2, r1, #8
 8003792:	2300      	movs	r3, #0
 8003794:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003796:	3105      	adds	r1, #5
 8003798:	6838      	ldr	r0, [r7, #0]
 800379a:	4401      	add	r1, r0
 800379c:	b2d3      	uxtb	r3, r2
 800379e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80037a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	0c0a      	lsrs	r2, r1, #16
 80037ae:	2300      	movs	r3, #0
 80037b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037b2:	3106      	adds	r1, #6
 80037b4:	6838      	ldr	r0, [r7, #0]
 80037b6:	4401      	add	r1, r0
 80037b8:	b2d3      	uxtb	r3, r2
 80037ba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80037bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	0e0a      	lsrs	r2, r1, #24
 80037ca:	2300      	movs	r3, #0
 80037cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037ce:	3107      	adds	r1, #7
 80037d0:	6838      	ldr	r0, [r7, #0]
 80037d2:	4401      	add	r1, r0
 80037d4:	b2d3      	uxtb	r3, r2
 80037d6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80037d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037da:	3308      	adds	r3, #8
 80037dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80037e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80037e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80037ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037ee:	6838      	ldr	r0, [r7, #0]
 80037f0:	4401      	add	r1, r0
 80037f2:	b2d3      	uxtb	r3, r2
 80037f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80037f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	0a02      	lsrs	r2, r0, #8
 8003804:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003808:	0a0b      	lsrs	r3, r1, #8
 800380a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800380c:	3101      	adds	r1, #1
 800380e:	6838      	ldr	r0, [r7, #0]
 8003810:	4401      	add	r1, r0
 8003812:	b2d3      	uxtb	r3, r2
 8003814:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003816:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	0c02      	lsrs	r2, r0, #16
 8003824:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003828:	0c0b      	lsrs	r3, r1, #16
 800382a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800382c:	3102      	adds	r1, #2
 800382e:	6838      	ldr	r0, [r7, #0]
 8003830:	4401      	add	r1, r0
 8003832:	b2d3      	uxtb	r3, r2
 8003834:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003836:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	0e02      	lsrs	r2, r0, #24
 8003844:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003848:	0e0b      	lsrs	r3, r1, #24
 800384a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800384c:	3103      	adds	r1, #3
 800384e:	6838      	ldr	r0, [r7, #0]
 8003850:	4401      	add	r1, r0
 8003852:	b2d3      	uxtb	r3, r2
 8003854:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003856:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	000a      	movs	r2, r1
 8003864:	2300      	movs	r3, #0
 8003866:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003868:	3104      	adds	r1, #4
 800386a:	6838      	ldr	r0, [r7, #0]
 800386c:	4401      	add	r1, r0
 800386e:	b2d3      	uxtb	r3, r2
 8003870:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8003872:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	0a0a      	lsrs	r2, r1, #8
 8003880:	2300      	movs	r3, #0
 8003882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003884:	3105      	adds	r1, #5
 8003886:	6838      	ldr	r0, [r7, #0]
 8003888:	4401      	add	r1, r0
 800388a:	b2d3      	uxtb	r3, r2
 800388c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800388e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	0c0a      	lsrs	r2, r1, #16
 800389c:	2300      	movs	r3, #0
 800389e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038a0:	3106      	adds	r1, #6
 80038a2:	6838      	ldr	r0, [r7, #0]
 80038a4:	4401      	add	r1, r0
 80038a6:	b2d3      	uxtb	r3, r2
 80038a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80038aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	0e0a      	lsrs	r2, r1, #24
 80038b8:	2300      	movs	r3, #0
 80038ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038bc:	3107      	adds	r1, #7
 80038be:	6838      	ldr	r0, [r7, #0]
 80038c0:	4401      	add	r1, r0
 80038c2:	b2d3      	uxtb	r3, r2
 80038c4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80038c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c8:	3308      	adds	r3, #8
 80038ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80038d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 80038d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038dc:	6838      	ldr	r0, [r7, #0]
 80038de:	4401      	add	r1, r0
 80038e0:	b2d3      	uxtb	r3, r2
 80038e2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 80038e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	0a02      	lsrs	r2, r0, #8
 80038f2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80038f6:	0a0b      	lsrs	r3, r1, #8
 80038f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038fa:	3101      	adds	r1, #1
 80038fc:	6838      	ldr	r0, [r7, #0]
 80038fe:	4401      	add	r1, r0
 8003900:	b2d3      	uxtb	r3, r2
 8003902:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8003904:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	0c02      	lsrs	r2, r0, #16
 8003912:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003916:	0c0b      	lsrs	r3, r1, #16
 8003918:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800391a:	3102      	adds	r1, #2
 800391c:	6838      	ldr	r0, [r7, #0]
 800391e:	4401      	add	r1, r0
 8003920:	b2d3      	uxtb	r3, r2
 8003922:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8003924:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	0e02      	lsrs	r2, r0, #24
 8003932:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003936:	0e0b      	lsrs	r3, r1, #24
 8003938:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800393a:	3103      	adds	r1, #3
 800393c:	6838      	ldr	r0, [r7, #0]
 800393e:	4401      	add	r1, r0
 8003940:	b2d3      	uxtb	r3, r2
 8003942:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8003944:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	f04f 0300 	mov.w	r3, #0
 8003950:	000a      	movs	r2, r1
 8003952:	2300      	movs	r3, #0
 8003954:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003956:	3104      	adds	r1, #4
 8003958:	6838      	ldr	r0, [r7, #0]
 800395a:	4401      	add	r1, r0
 800395c:	b2d3      	uxtb	r3, r2
 800395e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8003960:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	0a0a      	lsrs	r2, r1, #8
 800396e:	2300      	movs	r3, #0
 8003970:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003972:	3105      	adds	r1, #5
 8003974:	6838      	ldr	r0, [r7, #0]
 8003976:	4401      	add	r1, r0
 8003978:	b2d3      	uxtb	r3, r2
 800397a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 800397c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	f04f 0300 	mov.w	r3, #0
 8003988:	0c0a      	lsrs	r2, r1, #16
 800398a:	2300      	movs	r3, #0
 800398c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800398e:	3106      	adds	r1, #6
 8003990:	6838      	ldr	r0, [r7, #0]
 8003992:	4401      	add	r1, r0
 8003994:	b2d3      	uxtb	r3, r2
 8003996:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8003998:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800399c:	f04f 0200 	mov.w	r2, #0
 80039a0:	f04f 0300 	mov.w	r3, #0
 80039a4:	0e0a      	lsrs	r2, r1, #24
 80039a6:	2300      	movs	r3, #0
 80039a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039aa:	3107      	adds	r1, #7
 80039ac:	6838      	ldr	r0, [r7, #0]
 80039ae:	4401      	add	r1, r0
 80039b0:	b2d3      	uxtb	r3, r2
 80039b2:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->w);
 80039b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b6:	3308      	adds	r3, #8
 80039b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 80039ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80039bc:	4618      	mov	r0, r3
 80039be:	3734      	adds	r7, #52	; 0x34
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80039c8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80039cc:	b0cf      	sub	sp, #316	; 0x13c
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80039d4:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
    {
      int offset = 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	f04f 0300 	mov.w	r3, #0
 80039e6:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80039ea:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80039ee:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80039f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80039f6:	4413      	add	r3, r2
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	ea40 0402 	orr.w	r4, r0, r2
 8003a04:	ea41 0503 	orr.w	r5, r1, r3
 8003a08:	e9c7 454a 	strd	r4, r5, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a0c:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8003a10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a1a:	4413      	add	r3, r2
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	f04f 0300 	mov.w	r3, #0
 8003a24:	f04f 0000 	mov.w	r0, #0
 8003a28:	f04f 0100 	mov.w	r1, #0
 8003a2c:	0219      	lsls	r1, r3, #8
 8003a2e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003a32:	0210      	lsls	r0, r2, #8
 8003a34:	ea44 0a00 	orr.w	sl, r4, r0
 8003a38:	ea45 0b01 	orr.w	fp, r5, r1
 8003a3c:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003a40:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8003a44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003a48:	1c9a      	adds	r2, r3, #2
 8003a4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a4e:	4413      	add	r3, r2
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	f04f 0000 	mov.w	r0, #0
 8003a5c:	f04f 0100 	mov.w	r1, #0
 8003a60:	0419      	lsls	r1, r3, #16
 8003a62:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8003a66:	0410      	lsls	r0, r2, #16
 8003a68:	ea44 0300 	orr.w	r3, r4, r0
 8003a6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a70:	ea45 0301 	orr.w	r3, r5, r1
 8003a74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a78:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003a7c:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003a80:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8003a84:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003a88:	1cda      	adds	r2, r3, #3
 8003a8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a8e:	4413      	add	r3, r2
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8003a9c:	ea4f 6802 	mov.w	r8, r2, lsl #24
 8003aa0:	ea40 0308 	orr.w	r3, r0, r8
 8003aa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003aa8:	ea41 0309 	orr.w	r3, r1, r9
 8003aac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003ab0:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8003ab4:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003ab8:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8003abc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003ac0:	1d1a      	adds	r2, r3, #4
 8003ac2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003ac6:	4413      	add	r3, r2
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	f04f 0000 	mov.w	r0, #0
 8003ad4:	f04f 0100 	mov.w	r1, #0
 8003ad8:	0011      	movs	r1, r2
 8003ada:	2000      	movs	r0, #0
 8003adc:	ea44 0300 	orr.w	r3, r4, r0
 8003ae0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003ae4:	ea45 0301 	orr.w	r3, r5, r1
 8003ae8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003aec:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8003af0:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003af4:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8003af8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003afc:	1d5a      	adds	r2, r3, #5
 8003afe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b02:	4413      	add	r3, r2
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	f04f 0000 	mov.w	r0, #0
 8003b10:	f04f 0100 	mov.w	r1, #0
 8003b14:	0211      	lsls	r1, r2, #8
 8003b16:	2000      	movs	r0, #0
 8003b18:	ea44 0300 	orr.w	r3, r4, r0
 8003b1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b20:	ea45 0301 	orr.w	r3, r5, r1
 8003b24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003b28:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8003b2c:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003b30:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8003b34:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003b38:	1d9a      	adds	r2, r3, #6
 8003b3a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b3e:	4413      	add	r3, r2
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	f04f 0000 	mov.w	r0, #0
 8003b4c:	f04f 0100 	mov.w	r1, #0
 8003b50:	0411      	lsls	r1, r2, #16
 8003b52:	2000      	movs	r0, #0
 8003b54:	ea44 0300 	orr.w	r3, r4, r0
 8003b58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b5c:	ea45 0301 	orr.w	r3, r5, r1
 8003b60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b64:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003b68:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003b6c:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8003b70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003b74:	1dda      	adds	r2, r3, #7
 8003b76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b7a:	4413      	add	r3, r2
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	f04f 0000 	mov.w	r0, #0
 8003b88:	f04f 0100 	mov.w	r1, #0
 8003b8c:	0611      	lsls	r1, r2, #24
 8003b8e:	2000      	movs	r0, #0
 8003b90:	ea44 0300 	orr.w	r3, r4, r0
 8003b94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b98:	ea45 0301 	orr.w	r3, r5, r1
 8003b9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003ba0:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8003ba4:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      this->x = u_x.real;
 8003ba8:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8003bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bb0:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003bb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003bb8:	3308      	adds	r3, #8
 8003bba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003bca:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8003bce:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003bd2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003bd6:	4413      	add	r3, r2
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	ea40 0402 	orr.w	r4, r0, r2
 8003be4:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 8003be8:	430b      	orrs	r3, r1
 8003bea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003bee:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8003bf2:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003bf6:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8003bfa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003c04:	4413      	add	r3, r2
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	f04f 0300 	mov.w	r3, #0
 8003c0e:	f04f 0000 	mov.w	r0, #0
 8003c12:	f04f 0100 	mov.w	r1, #0
 8003c16:	0219      	lsls	r1, r3, #8
 8003c18:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003c1c:	0210      	lsls	r0, r2, #8
 8003c1e:	ea44 0300 	orr.w	r3, r4, r0
 8003c22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c26:	ea45 0301 	orr.w	r3, r5, r1
 8003c2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c2e:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003c32:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003c36:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8003c3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003c3e:	1c9a      	adds	r2, r3, #2
 8003c40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003c44:	4413      	add	r3, r2
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	f04f 0000 	mov.w	r0, #0
 8003c52:	f04f 0100 	mov.w	r1, #0
 8003c56:	0419      	lsls	r1, r3, #16
 8003c58:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8003c5c:	0410      	lsls	r0, r2, #16
 8003c5e:	ea44 0300 	orr.w	r3, r4, r0
 8003c62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c66:	ea45 0301 	orr.w	r3, r5, r1
 8003c6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c6e:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8003c72:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003c76:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8003c7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003c7e:	1cda      	adds	r2, r3, #3
 8003c80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003c84:	4413      	add	r3, r2
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	0a14      	lsrs	r4, r2, #8
 8003c90:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 8003c94:	0613      	lsls	r3, r2, #24
 8003c96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c9a:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8003c9e:	4623      	mov	r3, r4
 8003ca0:	4303      	orrs	r3, r0
 8003ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ca6:	462b      	mov	r3, r5
 8003ca8:	430b      	orrs	r3, r1
 8003caa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cae:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8003cb2:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003cb6:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8003cba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003cbe:	1d1a      	adds	r2, r3, #4
 8003cc0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003cc4:	4413      	add	r3, r2
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	f04f 0300 	mov.w	r3, #0
 8003cce:	f04f 0000 	mov.w	r0, #0
 8003cd2:	f04f 0100 	mov.w	r1, #0
 8003cd6:	0011      	movs	r1, r2
 8003cd8:	2000      	movs	r0, #0
 8003cda:	ea44 0300 	orr.w	r3, r4, r0
 8003cde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ce2:	ea45 0301 	orr.w	r3, r5, r1
 8003ce6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003cea:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003cee:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003cf2:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8003cf6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003cfa:	1d5a      	adds	r2, r3, #5
 8003cfc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003d00:	4413      	add	r3, r2
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	f04f 0300 	mov.w	r3, #0
 8003d0a:	f04f 0000 	mov.w	r0, #0
 8003d0e:	f04f 0100 	mov.w	r1, #0
 8003d12:	0211      	lsls	r1, r2, #8
 8003d14:	2000      	movs	r0, #0
 8003d16:	ea44 0300 	orr.w	r3, r4, r0
 8003d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d1e:	ea45 0301 	orr.w	r3, r5, r1
 8003d22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003d26:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8003d2a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003d2e:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8003d32:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003d36:	1d9a      	adds	r2, r3, #6
 8003d38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003d3c:	4413      	add	r3, r2
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	f04f 0300 	mov.w	r3, #0
 8003d46:	f04f 0000 	mov.w	r0, #0
 8003d4a:	f04f 0100 	mov.w	r1, #0
 8003d4e:	0411      	lsls	r1, r2, #16
 8003d50:	2000      	movs	r0, #0
 8003d52:	ea44 0300 	orr.w	r3, r4, r0
 8003d56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d5a:	ea45 0301 	orr.w	r3, r5, r1
 8003d5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d62:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003d66:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003d6a:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8003d6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003d72:	1dda      	adds	r2, r3, #7
 8003d74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003d78:	4413      	add	r3, r2
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	f04f 0300 	mov.w	r3, #0
 8003d82:	f04f 0000 	mov.w	r0, #0
 8003d86:	f04f 0100 	mov.w	r1, #0
 8003d8a:	0611      	lsls	r1, r2, #24
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	ea44 0300 	orr.w	r3, r4, r0
 8003d92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d96:	ea45 0301 	orr.w	r3, r5, r1
 8003d9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d9e:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8003da2:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      this->y = u_y.real;
 8003da6:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8003daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dae:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003db2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003db6:	3308      	adds	r3, #8
 8003db8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003dc8:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8003dcc:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003dd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003dd4:	4413      	add	r3, r2
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	ea40 0402 	orr.w	r4, r0, r2
 8003de2:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003de6:	430b      	orrs	r3, r1
 8003de8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003dec:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003df0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003df4:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8003df8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003e02:	4413      	add	r3, r2
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	f04f 0000 	mov.w	r0, #0
 8003e10:	f04f 0100 	mov.w	r1, #0
 8003e14:	0219      	lsls	r1, r3, #8
 8003e16:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003e1a:	0210      	lsls	r0, r2, #8
 8003e1c:	ea44 0300 	orr.w	r3, r4, r0
 8003e20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e24:	ea45 0301 	orr.w	r3, r5, r1
 8003e28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e2c:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8003e30:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003e34:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8003e38:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003e3c:	1c9a      	adds	r2, r3, #2
 8003e3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003e42:	4413      	add	r3, r2
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	f04f 0000 	mov.w	r0, #0
 8003e50:	f04f 0100 	mov.w	r1, #0
 8003e54:	0419      	lsls	r1, r3, #16
 8003e56:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8003e5a:	0410      	lsls	r0, r2, #16
 8003e5c:	ea44 0300 	orr.w	r3, r4, r0
 8003e60:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e62:	ea45 0301 	orr.w	r3, r5, r1
 8003e66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e68:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003e6c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003e70:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8003e74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003e78:	1cda      	adds	r2, r3, #3
 8003e7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003e7e:	4413      	add	r3, r2
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	0a14      	lsrs	r4, r2, #8
 8003e8a:	677c      	str	r4, [r7, #116]	; 0x74
 8003e8c:	0613      	lsls	r3, r2, #24
 8003e8e:	673b      	str	r3, [r7, #112]	; 0x70
 8003e90:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8003e94:	4623      	mov	r3, r4
 8003e96:	4303      	orrs	r3, r0
 8003e98:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e9a:	462b      	mov	r3, r5
 8003e9c:	430b      	orrs	r3, r1
 8003e9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ea0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003ea4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003ea8:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8003eac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003eb0:	1d1a      	adds	r2, r3, #4
 8003eb2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003eb6:	4413      	add	r3, r2
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	f04f 0000 	mov.w	r0, #0
 8003ec4:	f04f 0100 	mov.w	r1, #0
 8003ec8:	0011      	movs	r1, r2
 8003eca:	2000      	movs	r0, #0
 8003ecc:	ea44 0300 	orr.w	r3, r4, r0
 8003ed0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ed2:	ea45 0301 	orr.w	r3, r5, r1
 8003ed6:	667b      	str	r3, [r7, #100]	; 0x64
 8003ed8:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8003edc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003ee0:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8003ee4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003ee8:	1d5a      	adds	r2, r3, #5
 8003eea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003eee:	4413      	add	r3, r2
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	f04f 0000 	mov.w	r0, #0
 8003efc:	f04f 0100 	mov.w	r1, #0
 8003f00:	0211      	lsls	r1, r2, #8
 8003f02:	2000      	movs	r0, #0
 8003f04:	ea44 0300 	orr.w	r3, r4, r0
 8003f08:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f0a:	ea45 0301 	orr.w	r3, r5, r1
 8003f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f10:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003f14:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003f18:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8003f1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003f20:	1d9a      	adds	r2, r3, #6
 8003f22:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003f26:	4413      	add	r3, r2
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	f04f 0000 	mov.w	r0, #0
 8003f34:	f04f 0100 	mov.w	r1, #0
 8003f38:	0411      	lsls	r1, r2, #16
 8003f3a:	2000      	movs	r0, #0
 8003f3c:	ea44 0300 	orr.w	r3, r4, r0
 8003f40:	653b      	str	r3, [r7, #80]	; 0x50
 8003f42:	ea45 0301 	orr.w	r3, r5, r1
 8003f46:	657b      	str	r3, [r7, #84]	; 0x54
 8003f48:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8003f4c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003f50:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8003f54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003f58:	1dda      	adds	r2, r3, #7
 8003f5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003f5e:	4413      	add	r3, r2
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	f04f 0300 	mov.w	r3, #0
 8003f68:	f04f 0000 	mov.w	r0, #0
 8003f6c:	f04f 0100 	mov.w	r1, #0
 8003f70:	0611      	lsls	r1, r2, #24
 8003f72:	2000      	movs	r0, #0
 8003f74:	ea44 0300 	orr.w	r3, r4, r0
 8003f78:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f7a:	ea45 0301 	orr.w	r3, r5, r1
 8003f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f80:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8003f84:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      this->z = u_z.real;
 8003f88:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8003f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f90:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->z);
 8003f94:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003f98:	3308      	adds	r3, #8
 8003f9a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003faa:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8003fae:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003fb2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003fb6:	4413      	add	r3, r2
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	ea40 0402 	orr.w	r4, r0, r2
 8003fc4:	643c      	str	r4, [r7, #64]	; 0x40
 8003fc6:	430b      	orrs	r3, r1
 8003fc8:	647b      	str	r3, [r7, #68]	; 0x44
 8003fca:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003fce:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003fd2:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8003fd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003fe0:	4413      	add	r3, r2
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	f04f 0000 	mov.w	r0, #0
 8003fee:	f04f 0100 	mov.w	r1, #0
 8003ff2:	0219      	lsls	r1, r3, #8
 8003ff4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003ff8:	0210      	lsls	r0, r2, #8
 8003ffa:	ea44 0300 	orr.w	r3, r4, r0
 8003ffe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004000:	ea45 0301 	orr.w	r3, r5, r1
 8004004:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004006:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800400a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800400e:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8004012:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004016:	1c9a      	adds	r2, r3, #2
 8004018:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800401c:	4413      	add	r3, r2
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	b2da      	uxtb	r2, r3
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	f04f 0000 	mov.w	r0, #0
 800402a:	f04f 0100 	mov.w	r1, #0
 800402e:	0419      	lsls	r1, r3, #16
 8004030:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8004034:	0410      	lsls	r0, r2, #16
 8004036:	ea44 0300 	orr.w	r3, r4, r0
 800403a:	633b      	str	r3, [r7, #48]	; 0x30
 800403c:	ea45 0301 	orr.w	r3, r5, r1
 8004040:	637b      	str	r3, [r7, #52]	; 0x34
 8004042:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004046:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800404a:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800404e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004052:	1cda      	adds	r2, r3, #3
 8004054:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004058:	4413      	add	r3, r2
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	b2da      	uxtb	r2, r3
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	0a14      	lsrs	r4, r2, #8
 8004064:	62fc      	str	r4, [r7, #44]	; 0x2c
 8004066:	0613      	lsls	r3, r2, #24
 8004068:	62bb      	str	r3, [r7, #40]	; 0x28
 800406a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800406e:	4623      	mov	r3, r4
 8004070:	4303      	orrs	r3, r0
 8004072:	623b      	str	r3, [r7, #32]
 8004074:	462b      	mov	r3, r5
 8004076:	430b      	orrs	r3, r1
 8004078:	627b      	str	r3, [r7, #36]	; 0x24
 800407a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800407e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004082:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004086:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800408a:	3304      	adds	r3, #4
 800408c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8004090:	4413      	add	r3, r2
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	b2dc      	uxtb	r4, r3
 8004096:	f04f 0500 	mov.w	r5, #0
 800409a:	f04f 0200 	mov.w	r2, #0
 800409e:	f04f 0300 	mov.w	r3, #0
 80040a2:	0023      	movs	r3, r4
 80040a4:	2200      	movs	r2, #0
 80040a6:	ea40 0402 	orr.w	r4, r0, r2
 80040aa:	61bc      	str	r4, [r7, #24]
 80040ac:	430b      	orrs	r3, r1
 80040ae:	61fb      	str	r3, [r7, #28]
 80040b0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80040b4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80040b8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80040bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80040c0:	3305      	adds	r3, #5
 80040c2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80040c6:	4413      	add	r3, r2
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	b2dc      	uxtb	r4, r3
 80040cc:	f04f 0500 	mov.w	r5, #0
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	0223      	lsls	r3, r4, #8
 80040da:	2200      	movs	r2, #0
 80040dc:	ea40 0402 	orr.w	r4, r0, r2
 80040e0:	613c      	str	r4, [r7, #16]
 80040e2:	430b      	orrs	r3, r1
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80040ea:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80040ee:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80040f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80040f6:	3306      	adds	r3, #6
 80040f8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80040fc:	4413      	add	r3, r2
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	b2dc      	uxtb	r4, r3
 8004102:	f04f 0500 	mov.w	r5, #0
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	f04f 0300 	mov.w	r3, #0
 800410e:	0423      	lsls	r3, r4, #16
 8004110:	2200      	movs	r2, #0
 8004112:	ea40 0402 	orr.w	r4, r0, r2
 8004116:	60bc      	str	r4, [r7, #8]
 8004118:	430b      	orrs	r3, r1
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004120:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004124:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004128:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800412c:	3307      	adds	r3, #7
 800412e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8004132:	4413      	add	r3, r2
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	b2dc      	uxtb	r4, r3
 8004138:	f04f 0500 	mov.w	r5, #0
 800413c:	f04f 0200 	mov.w	r2, #0
 8004140:	f04f 0300 	mov.w	r3, #0
 8004144:	0623      	lsls	r3, r4, #24
 8004146:	2200      	movs	r2, #0
 8004148:	ea40 0402 	orr.w	r4, r0, r2
 800414c:	603c      	str	r4, [r7, #0]
 800414e:	430b      	orrs	r3, r1
 8004150:	607b      	str	r3, [r7, #4]
 8004152:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004156:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      this->w = u_w.real;
 800415a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800415e:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8004162:	e9c1 2308 	strd	r2, r3, [r1, #32]
      offset += sizeof(this->w);
 8004166:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800416a:	3308      	adds	r3, #8
 800416c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
     return offset;
 8004170:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
    }
 8004174:	4618      	mov	r0, r3
 8004176:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800417a:	46bd      	mov	sp, r7
 800417c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004180:	4770      	bx	lr
	...

08004184 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Quaternion"; };
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	4b03      	ldr	r3, [pc, #12]	; (800419c <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 800418e:	4618      	mov	r0, r3
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	0800d824 	.word	0x0800d824

080041a0 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    const char * getMD5(){ return "a779879fadf0160734f906b8c19c7004"; };
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	4b03      	ldr	r3, [pc, #12]	; (80041b8 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 80041aa:	4618      	mov	r0, r3
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	0800d840 	.word	0x0800d840

080041bc <_ZN13geometry_msgs9TransformC1Ev>:
      typedef geometry_msgs::Vector3 _translation_type;
      _translation_type translation;
      typedef geometry_msgs::Quaternion _rotation_type;
      _rotation_type rotation;

    Transform():
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
      translation(),
      rotation()
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fd fb08 	bl	80017dc <_ZN3ros3MsgC1Ev>
 80041cc:	4a08      	ldr	r2, [pc, #32]	; (80041f0 <_ZN13geometry_msgs9TransformC1Ev+0x34>)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3308      	adds	r3, #8
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fe fb32 	bl	8002840 <_ZN13geometry_msgs7Vector3C1Ev>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3328      	adds	r3, #40	; 0x28
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff f9d9 	bl	8003598 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4618      	mov	r0, r3
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	0800dc34 	.word	0x0800dc34

080041f4 <_ZNK13geometry_msgs9Transform9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
      offset += this->translation.serialize(outbuffer + offset);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f103 0008 	add.w	r0, r3, #8
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	4413      	add	r3, r2
 800420e:	4619      	mov	r1, r3
 8004210:	f7fe fb3e 	bl	8002890 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8004214:	4602      	mov	r2, r0
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4413      	add	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.serialize(outbuffer + offset);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	4413      	add	r3, r2
 8004228:	4619      	mov	r1, r3
 800422a:	f7ff f9e3 	bl	80035f4 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 800422e:	4602      	mov	r2, r0
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4413      	add	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]
      return offset;
 8004236:	68fb      	ldr	r3, [r7, #12]
    }
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <_ZN13geometry_msgs9Transform11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
      offset += this->translation.deserialize(inbuffer + offset);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f103 0008 	add.w	r0, r3, #8
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	4413      	add	r3, r2
 800425a:	4619      	mov	r1, r3
 800425c:	f7fe fc8b 	bl	8002b76 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004260:	4602      	mov	r2, r0
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4413      	add	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.deserialize(inbuffer + offset);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	4413      	add	r3, r2
 8004274:	4619      	mov	r1, r3
 8004276:	f7ff fba7 	bl	80039c8 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 800427a:	4602      	mov	r2, r0
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]
     return offset;
 8004282:	68fb      	ldr	r3, [r7, #12]
    }
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <_ZN13geometry_msgs9Transform7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Transform"; };
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	4b03      	ldr	r3, [pc, #12]	; (80042a4 <_ZN13geometry_msgs9Transform7getTypeEv+0x18>)
 8004296:	4618      	mov	r0, r3
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	0800d864 	.word	0x0800d864

080042a8 <_ZN13geometry_msgs9Transform6getMD5Ev>:
    const char * getMD5(){ return "ac9eff44abf714214112b05d54a3cf9b"; };
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	4b03      	ldr	r3, [pc, #12]	; (80042c0 <_ZN13geometry_msgs9Transform6getMD5Ev+0x18>)
 80042b2:	4618      	mov	r0, r3
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	0800d87c 	.word	0x0800d87c

080042c4 <_ZN13geometry_msgs16TransformStampedC1Ev>:
      typedef const char* _child_frame_id_type;
      _child_frame_id_type child_frame_id;
      typedef geometry_msgs::Transform _transform_type;
      _transform_type transform;

    TransformStamped():
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      transform()
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fd fa84 	bl	80017dc <_ZN3ros3MsgC1Ev>
 80042d4:	4a0a      	ldr	r2, [pc, #40]	; (8004300 <_ZN13geometry_msgs16TransformStampedC1Ev+0x3c>)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3304      	adds	r3, #4
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fe ffc6 	bl	8003270 <_ZN8std_msgs6HeaderC1Ev>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a07      	ldr	r2, [pc, #28]	; (8004304 <_ZN13geometry_msgs16TransformStampedC1Ev+0x40>)
 80042e8:	619a      	str	r2, [r3, #24]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	3320      	adds	r3, #32
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff ff64 	bl	80041bc <_ZN13geometry_msgs9TransformC1Ev>
    {
    }
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	0800dc1c 	.word	0x0800dc1c
 8004304:	0800d6a8 	.word	0x0800d6a8

08004308 <_ZNK13geometry_msgs16TransformStamped9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	1d18      	adds	r0, r3, #4
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	4413      	add	r3, r2
 8004320:	4619      	mov	r1, r3
 8004322:	f7fe ffc5 	bl	80032b0 <_ZNK8std_msgs6Header9serializeEPh>
 8004326:	4602      	mov	r2, r0
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4413      	add	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	4618      	mov	r0, r3
 8004334:	f7fb ff68 	bl	8000208 <strlen>
 8004338:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	4413      	add	r3, r2
 8004340:	68b9      	ldr	r1, [r7, #8]
 8004342:	4618      	mov	r0, r3
 8004344:	f003 f992 	bl	800766c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	3304      	adds	r3, #4
 800434c:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	18d0      	adds	r0, r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	4619      	mov	r1, r3
 800435c:	f009 f826 	bl	800d3ac <memcpy>
      offset += length_child_frame_id;
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	4413      	add	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
      offset += this->transform.serialize(outbuffer + offset);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f103 0020 	add.w	r0, r3, #32
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	4413      	add	r3, r2
 8004374:	4619      	mov	r1, r3
 8004376:	f7ff ff3d 	bl	80041f4 <_ZNK13geometry_msgs9Transform9serializeEPh>
 800437a:	4602      	mov	r2, r0
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4413      	add	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]
      return offset;
 8004382:	68fb      	ldr	r3, [r7, #12]
    }
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <_ZN13geometry_msgs16TransformStamped11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004396:	2300      	movs	r3, #0
 8004398:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	1d18      	adds	r0, r3, #4
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	4413      	add	r3, r2
 80043a4:	4619      	mov	r1, r3
 80043a6:	f7ff f81b 	bl	80033e0 <_ZN8std_msgs6Header11deserializeEPh>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	4413      	add	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	441a      	add	r2, r3
 80043b8:	f107 030c 	add.w	r3, r7, #12
 80043bc:	4611      	mov	r1, r2
 80043be:	4618      	mov	r0, r3
 80043c0:	f003 f972 	bl	80076a8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	3304      	adds	r3, #4
 80043c8:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4413      	add	r3, r2
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d20c      	bcs.n	80043f4 <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	441a      	add	r2, r3
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	6839      	ldr	r1, [r7, #0]
 80043e6:	440b      	add	r3, r1
 80043e8:	7812      	ldrb	r2, [r2, #0]
 80043ea:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	3301      	adds	r3, #1
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	e7ec      	b.n	80043ce <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x42>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4413      	add	r3, r2
 80043fa:	3b01      	subs	r3, #1
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	4413      	add	r3, r2
 8004400:	2200      	movs	r2, #0
 8004402:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	3b01      	subs	r3, #1
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	441a      	add	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4413      	add	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
      offset += this->transform.deserialize(inbuffer + offset);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f103 0020 	add.w	r0, r3, #32
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	4413      	add	r3, r2
 8004424:	4619      	mov	r1, r3
 8004426:	f7ff ff0b 	bl	8004240 <_ZN13geometry_msgs9Transform11deserializeEPh>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	4413      	add	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
     return offset;
 8004432:	693b      	ldr	r3, [r7, #16]
    }
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <_ZN13geometry_msgs16TransformStamped7getTypeEv>:

    const char * getType(){ return "geometry_msgs/TransformStamped"; };
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	4b03      	ldr	r3, [pc, #12]	; (8004454 <_ZN13geometry_msgs16TransformStamped7getTypeEv+0x18>)
 8004446:	4618      	mov	r0, r3
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	0800d8a0 	.word	0x0800d8a0

08004458 <_ZN13geometry_msgs16TransformStamped6getMD5Ev>:
    const char * getMD5(){ return "b5764a33bfeb3588febc2682852579b0"; };
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	4b03      	ldr	r3, [pc, #12]	; (8004470 <_ZN13geometry_msgs16TransformStamped6getMD5Ev+0x18>)
 8004462:	4618      	mov	r0, r3
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	0800d8c0 	.word	0x0800d8c0

08004474 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4618      	mov	r0, r3
 8004480:	f7fd f9ac 	bl	80017dc <_ZN3ros3MsgC1Ev>
 8004484:	4a0e      	ldr	r2, [pc, #56]	; (80044c0 <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	0800dc04 	.word	0x0800dc04

080044c4 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80044c4:	b480      	push	{r7}
 80044c6:	b08b      	sub	sp, #44	; 0x2c
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80044ce:	2300      	movs	r3, #0
 80044d0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80044d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80044dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044e2:	6838      	ldr	r0, [r7, #0]
 80044e4:	4401      	add	r1, r0
 80044e6:	b2d3      	uxtb	r3, r2
 80044e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80044ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	f04f 0300 	mov.w	r3, #0
 80044f6:	0a02      	lsrs	r2, r0, #8
 80044f8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80044fc:	0a0b      	lsrs	r3, r1, #8
 80044fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004500:	3101      	adds	r1, #1
 8004502:	6838      	ldr	r0, [r7, #0]
 8004504:	4401      	add	r1, r0
 8004506:	b2d3      	uxtb	r3, r2
 8004508:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800450a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	f04f 0300 	mov.w	r3, #0
 8004516:	0c02      	lsrs	r2, r0, #16
 8004518:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800451c:	0c0b      	lsrs	r3, r1, #16
 800451e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004520:	3102      	adds	r1, #2
 8004522:	6838      	ldr	r0, [r7, #0]
 8004524:	4401      	add	r1, r0
 8004526:	b2d3      	uxtb	r3, r2
 8004528:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800452a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	f04f 0300 	mov.w	r3, #0
 8004536:	0e02      	lsrs	r2, r0, #24
 8004538:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800453c:	0e0b      	lsrs	r3, r1, #24
 800453e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004540:	3103      	adds	r1, #3
 8004542:	6838      	ldr	r0, [r7, #0]
 8004544:	4401      	add	r1, r0
 8004546:	b2d3      	uxtb	r3, r2
 8004548:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800454a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	000a      	movs	r2, r1
 8004558:	2300      	movs	r3, #0
 800455a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800455c:	3104      	adds	r1, #4
 800455e:	6838      	ldr	r0, [r7, #0]
 8004560:	4401      	add	r1, r0
 8004562:	b2d3      	uxtb	r3, r2
 8004564:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8004566:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800456a:	f04f 0200 	mov.w	r2, #0
 800456e:	f04f 0300 	mov.w	r3, #0
 8004572:	0a0a      	lsrs	r2, r1, #8
 8004574:	2300      	movs	r3, #0
 8004576:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004578:	3105      	adds	r1, #5
 800457a:	6838      	ldr	r0, [r7, #0]
 800457c:	4401      	add	r1, r0
 800457e:	b2d3      	uxtb	r3, r2
 8004580:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8004582:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	f04f 0300 	mov.w	r3, #0
 800458e:	0c0a      	lsrs	r2, r1, #16
 8004590:	2300      	movs	r3, #0
 8004592:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004594:	3106      	adds	r1, #6
 8004596:	6838      	ldr	r0, [r7, #0]
 8004598:	4401      	add	r1, r0
 800459a:	b2d3      	uxtb	r3, r2
 800459c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800459e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80045a2:	f04f 0200 	mov.w	r2, #0
 80045a6:	f04f 0300 	mov.w	r3, #0
 80045aa:	0e0a      	lsrs	r2, r1, #24
 80045ac:	2300      	movs	r3, #0
 80045ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045b0:	3107      	adds	r1, #7
 80045b2:	6838      	ldr	r0, [r7, #0]
 80045b4:	4401      	add	r1, r0
 80045b6:	b2d3      	uxtb	r3, r2
 80045b8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	3308      	adds	r3, #8
 80045be:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80045c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80045ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045d0:	6838      	ldr	r0, [r7, #0]
 80045d2:	4401      	add	r1, r0
 80045d4:	b2d3      	uxtb	r3, r2
 80045d6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80045d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	0a02      	lsrs	r2, r0, #8
 80045e6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80045ea:	0a0b      	lsrs	r3, r1, #8
 80045ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045ee:	3101      	adds	r1, #1
 80045f0:	6838      	ldr	r0, [r7, #0]
 80045f2:	4401      	add	r1, r0
 80045f4:	b2d3      	uxtb	r3, r2
 80045f6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80045f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	0c02      	lsrs	r2, r0, #16
 8004606:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800460a:	0c0b      	lsrs	r3, r1, #16
 800460c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800460e:	3102      	adds	r1, #2
 8004610:	6838      	ldr	r0, [r7, #0]
 8004612:	4401      	add	r1, r0
 8004614:	b2d3      	uxtb	r3, r2
 8004616:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8004618:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	0e02      	lsrs	r2, r0, #24
 8004626:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800462a:	0e0b      	lsrs	r3, r1, #24
 800462c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800462e:	3103      	adds	r1, #3
 8004630:	6838      	ldr	r0, [r7, #0]
 8004632:	4401      	add	r1, r0
 8004634:	b2d3      	uxtb	r3, r2
 8004636:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8004638:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	000a      	movs	r2, r1
 8004646:	2300      	movs	r3, #0
 8004648:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800464a:	3104      	adds	r1, #4
 800464c:	6838      	ldr	r0, [r7, #0]
 800464e:	4401      	add	r1, r0
 8004650:	b2d3      	uxtb	r3, r2
 8004652:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8004654:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	0a0a      	lsrs	r2, r1, #8
 8004662:	2300      	movs	r3, #0
 8004664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004666:	3105      	adds	r1, #5
 8004668:	6838      	ldr	r0, [r7, #0]
 800466a:	4401      	add	r1, r0
 800466c:	b2d3      	uxtb	r3, r2
 800466e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8004670:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	f04f 0300 	mov.w	r3, #0
 800467c:	0c0a      	lsrs	r2, r1, #16
 800467e:	2300      	movs	r3, #0
 8004680:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004682:	3106      	adds	r1, #6
 8004684:	6838      	ldr	r0, [r7, #0]
 8004686:	4401      	add	r1, r0
 8004688:	b2d3      	uxtb	r3, r2
 800468a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 800468c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004690:	f04f 0200 	mov.w	r2, #0
 8004694:	f04f 0300 	mov.w	r3, #0
 8004698:	0e0a      	lsrs	r2, r1, #24
 800469a:	2300      	movs	r3, #0
 800469c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800469e:	3107      	adds	r1, #7
 80046a0:	6838      	ldr	r0, [r7, #0]
 80046a2:	4401      	add	r1, r0
 80046a4:	b2d3      	uxtb	r3, r2
 80046a6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	3308      	adds	r3, #8
 80046ac:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80046b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80046b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046be:	6838      	ldr	r0, [r7, #0]
 80046c0:	4401      	add	r1, r0
 80046c2:	b2d3      	uxtb	r3, r2
 80046c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80046c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	f04f 0300 	mov.w	r3, #0
 80046d2:	0a02      	lsrs	r2, r0, #8
 80046d4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80046d8:	0a0b      	lsrs	r3, r1, #8
 80046da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046dc:	3101      	adds	r1, #1
 80046de:	6838      	ldr	r0, [r7, #0]
 80046e0:	4401      	add	r1, r0
 80046e2:	b2d3      	uxtb	r3, r2
 80046e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80046e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	0c02      	lsrs	r2, r0, #16
 80046f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80046f8:	0c0b      	lsrs	r3, r1, #16
 80046fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046fc:	3102      	adds	r1, #2
 80046fe:	6838      	ldr	r0, [r7, #0]
 8004700:	4401      	add	r1, r0
 8004702:	b2d3      	uxtb	r3, r2
 8004704:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8004706:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	f04f 0300 	mov.w	r3, #0
 8004712:	0e02      	lsrs	r2, r0, #24
 8004714:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004718:	0e0b      	lsrs	r3, r1, #24
 800471a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800471c:	3103      	adds	r1, #3
 800471e:	6838      	ldr	r0, [r7, #0]
 8004720:	4401      	add	r1, r0
 8004722:	b2d3      	uxtb	r3, r2
 8004724:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8004726:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	000a      	movs	r2, r1
 8004734:	2300      	movs	r3, #0
 8004736:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004738:	3104      	adds	r1, #4
 800473a:	6838      	ldr	r0, [r7, #0]
 800473c:	4401      	add	r1, r0
 800473e:	b2d3      	uxtb	r3, r2
 8004740:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8004742:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	f04f 0300 	mov.w	r3, #0
 800474e:	0a0a      	lsrs	r2, r1, #8
 8004750:	2300      	movs	r3, #0
 8004752:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004754:	3105      	adds	r1, #5
 8004756:	6838      	ldr	r0, [r7, #0]
 8004758:	4401      	add	r1, r0
 800475a:	b2d3      	uxtb	r3, r2
 800475c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800475e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	0c0a      	lsrs	r2, r1, #16
 800476c:	2300      	movs	r3, #0
 800476e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004770:	3106      	adds	r1, #6
 8004772:	6838      	ldr	r0, [r7, #0]
 8004774:	4401      	add	r1, r0
 8004776:	b2d3      	uxtb	r3, r2
 8004778:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800477a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800477e:	f04f 0200 	mov.w	r2, #0
 8004782:	f04f 0300 	mov.w	r3, #0
 8004786:	0e0a      	lsrs	r2, r1, #24
 8004788:	2300      	movs	r3, #0
 800478a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800478c:	3107      	adds	r1, #7
 800478e:	6838      	ldr	r0, [r7, #0]
 8004790:	4401      	add	r1, r0
 8004792:	b2d3      	uxtb	r3, r2
 8004794:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	3308      	adds	r3, #8
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800479e:	4618      	mov	r0, r3
 80047a0:	372c      	adds	r7, #44	; 0x2c
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80047aa:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80047ae:	b0bb      	sub	sp, #236	; 0xec
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 80047b6:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
    {
      int offset = 0;
 80047ba:	2300      	movs	r3, #0
 80047bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80047cc:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80047d0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80047d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047d8:	4413      	add	r3, r2
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	ea40 0402 	orr.w	r4, r0, r2
 80047e6:	ea41 0503 	orr.w	r5, r1, r3
 80047ea:	e9c7 4536 	strd	r4, r5, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80047ee:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80047f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047fc:	4413      	add	r3, r2
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	b2da      	uxtb	r2, r3
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	f04f 0000 	mov.w	r0, #0
 800480a:	f04f 0100 	mov.w	r1, #0
 800480e:	0219      	lsls	r1, r3, #8
 8004810:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004814:	0210      	lsls	r0, r2, #8
 8004816:	ea44 0a00 	orr.w	sl, r4, r0
 800481a:	ea45 0b01 	orr.w	fp, r5, r1
 800481e:	e9c7 ab36 	strd	sl, fp, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004822:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800482a:	1c9a      	adds	r2, r3, #2
 800482c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004830:	4413      	add	r3, r2
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	b2da      	uxtb	r2, r3
 8004836:	f04f 0300 	mov.w	r3, #0
 800483a:	f04f 0000 	mov.w	r0, #0
 800483e:	f04f 0100 	mov.w	r1, #0
 8004842:	0419      	lsls	r1, r3, #16
 8004844:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8004848:	0410      	lsls	r0, r2, #16
 800484a:	ea44 0300 	orr.w	r3, r4, r0
 800484e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004852:	ea45 0301 	orr.w	r3, r5, r1
 8004856:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800485a:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800485e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004862:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800486a:	1cda      	adds	r2, r3, #3
 800486c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004870:	4413      	add	r3, r2
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	b2da      	uxtb	r2, r3
 8004876:	f04f 0300 	mov.w	r3, #0
 800487a:	ea4f 2912 	mov.w	r9, r2, lsr #8
 800487e:	ea4f 6802 	mov.w	r8, r2, lsl #24
 8004882:	ea40 0308 	orr.w	r3, r0, r8
 8004886:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800488a:	ea41 0309 	orr.w	r3, r1, r9
 800488e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004892:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8004896:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800489a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800489e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a2:	1d1a      	adds	r2, r3, #4
 80048a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048a8:	4413      	add	r3, r2
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	f04f 0300 	mov.w	r3, #0
 80048b2:	f04f 0000 	mov.w	r0, #0
 80048b6:	f04f 0100 	mov.w	r1, #0
 80048ba:	0011      	movs	r1, r2
 80048bc:	2000      	movs	r0, #0
 80048be:	ea44 0300 	orr.w	r3, r4, r0
 80048c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048c6:	ea45 0301 	orr.w	r3, r5, r1
 80048ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048ce:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80048d2:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80048d6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80048da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048de:	1d5a      	adds	r2, r3, #5
 80048e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048e4:	4413      	add	r3, r2
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	f04f 0300 	mov.w	r3, #0
 80048ee:	f04f 0000 	mov.w	r0, #0
 80048f2:	f04f 0100 	mov.w	r1, #0
 80048f6:	0211      	lsls	r1, r2, #8
 80048f8:	2000      	movs	r0, #0
 80048fa:	ea44 0300 	orr.w	r3, r4, r0
 80048fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004902:	ea45 0301 	orr.w	r3, r5, r1
 8004906:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800490a:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800490e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004912:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800491a:	1d9a      	adds	r2, r3, #6
 800491c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004920:	4413      	add	r3, r2
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	b2da      	uxtb	r2, r3
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	f04f 0000 	mov.w	r0, #0
 800492e:	f04f 0100 	mov.w	r1, #0
 8004932:	0411      	lsls	r1, r2, #16
 8004934:	2000      	movs	r0, #0
 8004936:	ea44 0300 	orr.w	r3, r4, r0
 800493a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800493e:	ea45 0301 	orr.w	r3, r5, r1
 8004942:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004946:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800494a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800494e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004956:	1dda      	adds	r2, r3, #7
 8004958:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800495c:	4413      	add	r3, r2
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	b2da      	uxtb	r2, r3
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	f04f 0000 	mov.w	r0, #0
 800496a:	f04f 0100 	mov.w	r1, #0
 800496e:	0611      	lsls	r1, r2, #24
 8004970:	2000      	movs	r0, #0
 8004972:	ea44 0300 	orr.w	r3, r4, r0
 8004976:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800497a:	ea45 0301 	orr.w	r3, r5, r1
 800497e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004982:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8004986:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      this->x = u_x.real;
 800498a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800498e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004992:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8004996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800499a:	3308      	adds	r3, #8
 800499c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80049ac:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80049b0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80049b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049b8:	4413      	add	r3, r2
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	ea40 0402 	orr.w	r4, r0, r2
 80049c6:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80049ca:	430b      	orrs	r3, r1
 80049cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80049d0:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80049d4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80049d8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80049dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049e6:	4413      	add	r3, r2
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	f04f 0000 	mov.w	r0, #0
 80049f4:	f04f 0100 	mov.w	r1, #0
 80049f8:	0219      	lsls	r1, r3, #8
 80049fa:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80049fe:	0210      	lsls	r0, r2, #8
 8004a00:	ea44 0300 	orr.w	r3, r4, r0
 8004a04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a08:	ea45 0301 	orr.w	r3, r5, r1
 8004a0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a10:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8004a14:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004a18:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a20:	1c9a      	adds	r2, r3, #2
 8004a22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a26:	4413      	add	r3, r2
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	f04f 0000 	mov.w	r0, #0
 8004a34:	f04f 0100 	mov.w	r1, #0
 8004a38:	0419      	lsls	r1, r3, #16
 8004a3a:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8004a3e:	0410      	lsls	r0, r2, #16
 8004a40:	ea44 0300 	orr.w	r3, r4, r0
 8004a44:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a46:	ea45 0301 	orr.w	r3, r5, r1
 8004a4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a4c:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8004a50:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004a54:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5c:	1cda      	adds	r2, r3, #3
 8004a5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a62:	4413      	add	r3, r2
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	0a14      	lsrs	r4, r2, #8
 8004a6e:	677c      	str	r4, [r7, #116]	; 0x74
 8004a70:	0613      	lsls	r3, r2, #24
 8004a72:	673b      	str	r3, [r7, #112]	; 0x70
 8004a74:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8004a78:	4623      	mov	r3, r4
 8004a7a:	4303      	orrs	r3, r0
 8004a7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a7e:	462b      	mov	r3, r5
 8004a80:	430b      	orrs	r3, r1
 8004a82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a84:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8004a88:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004a8c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a94:	1d1a      	adds	r2, r3, #4
 8004a96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a9a:	4413      	add	r3, r2
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	f04f 0000 	mov.w	r0, #0
 8004aa8:	f04f 0100 	mov.w	r1, #0
 8004aac:	0011      	movs	r1, r2
 8004aae:	2000      	movs	r0, #0
 8004ab0:	ea44 0300 	orr.w	r3, r4, r0
 8004ab4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ab6:	ea45 0301 	orr.w	r3, r5, r1
 8004aba:	667b      	str	r3, [r7, #100]	; 0x64
 8004abc:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8004ac0:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004ac4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004acc:	1d5a      	adds	r2, r3, #5
 8004ace:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ad2:	4413      	add	r3, r2
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	f04f 0000 	mov.w	r0, #0
 8004ae0:	f04f 0100 	mov.w	r1, #0
 8004ae4:	0211      	lsls	r1, r2, #8
 8004ae6:	2000      	movs	r0, #0
 8004ae8:	ea44 0300 	orr.w	r3, r4, r0
 8004aec:	65bb      	str	r3, [r7, #88]	; 0x58
 8004aee:	ea45 0301 	orr.w	r3, r5, r1
 8004af2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004af4:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8004af8:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004afc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b04:	1d9a      	adds	r2, r3, #6
 8004b06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b0a:	4413      	add	r3, r2
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	f04f 0300 	mov.w	r3, #0
 8004b14:	f04f 0000 	mov.w	r0, #0
 8004b18:	f04f 0100 	mov.w	r1, #0
 8004b1c:	0411      	lsls	r1, r2, #16
 8004b1e:	2000      	movs	r0, #0
 8004b20:	ea44 0300 	orr.w	r3, r4, r0
 8004b24:	653b      	str	r3, [r7, #80]	; 0x50
 8004b26:	ea45 0301 	orr.w	r3, r5, r1
 8004b2a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b2c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8004b30:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004b34:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b3c:	1dda      	adds	r2, r3, #7
 8004b3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b42:	4413      	add	r3, r2
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	f04f 0000 	mov.w	r0, #0
 8004b50:	f04f 0100 	mov.w	r1, #0
 8004b54:	0611      	lsls	r1, r2, #24
 8004b56:	2000      	movs	r0, #0
 8004b58:	ea44 0300 	orr.w	r3, r4, r0
 8004b5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b5e:	ea45 0301 	orr.w	r3, r5, r1
 8004b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b64:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004b68:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      this->y = u_y.real;
 8004b6c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004b70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b74:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8004b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b7c:	3308      	adds	r3, #8
 8004b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8004b82:	f04f 0200 	mov.w	r2, #0
 8004b86:	f04f 0300 	mov.w	r3, #0
 8004b8a:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004b8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004b96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b9a:	4413      	add	r3, r2
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	ea40 0402 	orr.w	r4, r0, r2
 8004ba8:	643c      	str	r4, [r7, #64]	; 0x40
 8004baa:	430b      	orrs	r3, r1
 8004bac:	647b      	str	r3, [r7, #68]	; 0x44
 8004bae:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8004bb2:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004bb6:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8004bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004bc4:	4413      	add	r3, r2
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	f04f 0300 	mov.w	r3, #0
 8004bce:	f04f 0000 	mov.w	r0, #0
 8004bd2:	f04f 0100 	mov.w	r1, #0
 8004bd6:	0219      	lsls	r1, r3, #8
 8004bd8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004bdc:	0210      	lsls	r0, r2, #8
 8004bde:	ea44 0300 	orr.w	r3, r4, r0
 8004be2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004be4:	ea45 0301 	orr.w	r3, r5, r1
 8004be8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bea:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8004bee:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004bf2:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8004bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bfa:	1c9a      	adds	r2, r3, #2
 8004bfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c00:	4413      	add	r3, r2
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	f04f 0300 	mov.w	r3, #0
 8004c0a:	f04f 0000 	mov.w	r0, #0
 8004c0e:	f04f 0100 	mov.w	r1, #0
 8004c12:	0419      	lsls	r1, r3, #16
 8004c14:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8004c18:	0410      	lsls	r0, r2, #16
 8004c1a:	ea44 0300 	orr.w	r3, r4, r0
 8004c1e:	633b      	str	r3, [r7, #48]	; 0x30
 8004c20:	ea45 0301 	orr.w	r3, r5, r1
 8004c24:	637b      	str	r3, [r7, #52]	; 0x34
 8004c26:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004c2a:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004c2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c36:	1cda      	adds	r2, r3, #3
 8004c38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c3c:	4413      	add	r3, r2
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	0a14      	lsrs	r4, r2, #8
 8004c48:	62fc      	str	r4, [r7, #44]	; 0x2c
 8004c4a:	0613      	lsls	r3, r2, #24
 8004c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c4e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8004c52:	4623      	mov	r3, r4
 8004c54:	4303      	orrs	r3, r0
 8004c56:	623b      	str	r3, [r7, #32]
 8004c58:	462b      	mov	r3, r5
 8004c5a:	430b      	orrs	r3, r1
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c5e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004c62:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004c66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c6e:	3304      	adds	r3, #4
 8004c70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004c74:	4413      	add	r3, r2
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	b2dc      	uxtb	r4, r3
 8004c7a:	f04f 0500 	mov.w	r5, #0
 8004c7e:	f04f 0200 	mov.w	r2, #0
 8004c82:	f04f 0300 	mov.w	r3, #0
 8004c86:	0023      	movs	r3, r4
 8004c88:	2200      	movs	r2, #0
 8004c8a:	ea40 0402 	orr.w	r4, r0, r2
 8004c8e:	61bc      	str	r4, [r7, #24]
 8004c90:	430b      	orrs	r3, r1
 8004c92:	61fb      	str	r3, [r7, #28]
 8004c94:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004c98:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004c9c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca4:	3305      	adds	r3, #5
 8004ca6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004caa:	4413      	add	r3, r2
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	b2dc      	uxtb	r4, r3
 8004cb0:	f04f 0500 	mov.w	r5, #0
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	0223      	lsls	r3, r4, #8
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	ea40 0402 	orr.w	r4, r0, r2
 8004cc4:	613c      	str	r4, [r7, #16]
 8004cc6:	430b      	orrs	r3, r1
 8004cc8:	617b      	str	r3, [r7, #20]
 8004cca:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004cce:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004cd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cda:	3306      	adds	r3, #6
 8004cdc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ce0:	4413      	add	r3, r2
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	b2dc      	uxtb	r4, r3
 8004ce6:	f04f 0500 	mov.w	r5, #0
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	f04f 0300 	mov.w	r3, #0
 8004cf2:	0423      	lsls	r3, r4, #16
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	ea40 0402 	orr.w	r4, r0, r2
 8004cfa:	60bc      	str	r4, [r7, #8]
 8004cfc:	430b      	orrs	r3, r1
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004d04:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004d08:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d10:	3307      	adds	r3, #7
 8004d12:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d16:	4413      	add	r3, r2
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	b2dc      	uxtb	r4, r3
 8004d1c:	f04f 0500 	mov.w	r5, #0
 8004d20:	f04f 0200 	mov.w	r2, #0
 8004d24:	f04f 0300 	mov.w	r3, #0
 8004d28:	0623      	lsls	r3, r4, #24
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	ea40 0402 	orr.w	r4, r0, r2
 8004d30:	603c      	str	r4, [r7, #0]
 8004d32:	430b      	orrs	r3, r1
 8004d34:	607b      	str	r3, [r7, #4]
 8004d36:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004d3a:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      this->z = u_z.real;
 8004d3e:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8004d42:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8004d46:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8004d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d4e:	3308      	adds	r3, #8
 8004d50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
     return offset;
 8004d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    }
 8004d58:	4618      	mov	r0, r3
 8004d5a:	37ec      	adds	r7, #236	; 0xec
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004d62:	4770      	bx	lr

08004d64 <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	4b03      	ldr	r3, [pc, #12]	; (8004d7c <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 8004d6e:	4618      	mov	r0, r3
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	0800d8e4 	.word	0x0800d8e4

08004d80 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	4b03      	ldr	r3, [pc, #12]	; (8004d98 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	0800d794 	.word	0x0800d794

08004d9c <_ZN13geometry_msgs4PoseC1Ev>:
      typedef geometry_msgs::Point _position_type;
      _position_type position;
      typedef geometry_msgs::Quaternion _orientation_type;
      _orientation_type orientation;

    Pose():
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
      position(),
      orientation()
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fc fd18 	bl	80017dc <_ZN3ros3MsgC1Ev>
 8004dac:	4a08      	ldr	r2, [pc, #32]	; (8004dd0 <_ZN13geometry_msgs4PoseC1Ev+0x34>)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3308      	adds	r3, #8
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff fb5c 	bl	8004474 <_ZN13geometry_msgs5PointC1Ev>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3328      	adds	r3, #40	; 0x28
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7fe fbe9 	bl	8003598 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	0800dbec 	.word	0x0800dbec

08004dd4 <_ZNK13geometry_msgs4Pose9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004dde:	2300      	movs	r3, #0
 8004de0:	60fb      	str	r3, [r7, #12]
      offset += this->position.serialize(outbuffer + offset);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f103 0008 	add.w	r0, r3, #8
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	4413      	add	r3, r2
 8004dee:	4619      	mov	r1, r3
 8004df0:	f7ff fb68 	bl	80044c4 <_ZNK13geometry_msgs5Point9serializeEPh>
 8004df4:	4602      	mov	r2, r0
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4413      	add	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.serialize(outbuffer + offset);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	4413      	add	r3, r2
 8004e08:	4619      	mov	r1, r3
 8004e0a:	f7fe fbf3 	bl	80035f4 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4413      	add	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]
      return offset;
 8004e16:	68fb      	ldr	r3, [r7, #12]
    }
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <_ZN13geometry_msgs4Pose11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60fb      	str	r3, [r7, #12]
      offset += this->position.deserialize(inbuffer + offset);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f103 0008 	add.w	r0, r3, #8
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	4413      	add	r3, r2
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	f7ff fcb5 	bl	80047aa <_ZN13geometry_msgs5Point11deserializeEPh>
 8004e40:	4602      	mov	r2, r0
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	4413      	add	r3, r2
 8004e46:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.deserialize(inbuffer + offset);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	4413      	add	r3, r2
 8004e54:	4619      	mov	r1, r3
 8004e56:	f7fe fdb7 	bl	80039c8 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4413      	add	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]
     return offset;
 8004e62:	68fb      	ldr	r3, [r7, #12]
    }
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <_ZN13geometry_msgs4Pose7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Pose"; };
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	4b03      	ldr	r3, [pc, #12]	; (8004e84 <_ZN13geometry_msgs4Pose7getTypeEv+0x18>)
 8004e76:	4618      	mov	r0, r3
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	0800d8f8 	.word	0x0800d8f8

08004e88 <_ZN13geometry_msgs4Pose6getMD5Ev>:
    const char * getMD5(){ return "e45d45a5a1ce597b249e23fb30fc871f"; };
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	4b03      	ldr	r3, [pc, #12]	; (8004ea0 <_ZN13geometry_msgs4Pose6getMD5Ev+0x18>)
 8004e92:	4618      	mov	r0, r3
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	0800d90c 	.word	0x0800d90c

08004ea4 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Pose _pose_type;
      _pose_type pose;
      double covariance[36];

    PoseWithCovariance():
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
      pose(),
      covariance()
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fc fc94 	bl	80017dc <_ZN3ros3MsgC1Ev>
 8004eb4:	4a0d      	ldr	r2, [pc, #52]	; (8004eec <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x48>)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3308      	adds	r3, #8
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff ff6c 	bl	8004d9c <_ZN13geometry_msgs4PoseC1Ev>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8004eca:	2323      	movs	r3, #35	; 0x23
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	db08      	blt.n	8004ee2 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x3e>
 8004ed0:	f04f 0000 	mov.w	r0, #0
 8004ed4:	f04f 0100 	mov.w	r1, #0
 8004ed8:	e9c2 0100 	strd	r0, r1, [r2]
 8004edc:	3208      	adds	r2, #8
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	e7f4      	b.n	8004ecc <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x28>
    {
    }
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	0800dbd4 	.word	0x0800dbd4

08004ef0 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004efa:	2300      	movs	r3, #0
 8004efc:	617b      	str	r3, [r7, #20]
      offset += this->pose.serialize(outbuffer + offset);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f103 0008 	add.w	r0, r3, #8
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	4413      	add	r3, r2
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	f7ff ff62 	bl	8004dd4 <_ZNK13geometry_msgs4Pose9serializeEPh>
 8004f10:	4602      	mov	r2, r0
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	4413      	add	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8004f18:	2300      	movs	r3, #0
 8004f1a:	613b      	str	r3, [r7, #16]
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	2b23      	cmp	r3, #35	; 0x23
 8004f20:	d87e      	bhi.n	8005020 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x130>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.real = this->covariance[i];
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	330b      	adds	r3, #11
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	4413      	add	r3, r2
 8004f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f30:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_covariancei.base >> (8 * 0)) & 0xFF;
 8004f34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f38:	6979      	ldr	r1, [r7, #20]
 8004f3a:	6838      	ldr	r0, [r7, #0]
 8004f3c:	4401      	add	r1, r0
 8004f3e:	b2d3      	uxtb	r3, r2
 8004f40:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_covariancei.base >> (8 * 1)) & 0xFF;
 8004f42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	f04f 0300 	mov.w	r3, #0
 8004f4e:	0a02      	lsrs	r2, r0, #8
 8004f50:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004f54:	0a0b      	lsrs	r3, r1, #8
 8004f56:	6979      	ldr	r1, [r7, #20]
 8004f58:	3101      	adds	r1, #1
 8004f5a:	6838      	ldr	r0, [r7, #0]
 8004f5c:	4401      	add	r1, r0
 8004f5e:	b2d3      	uxtb	r3, r2
 8004f60:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_covariancei.base >> (8 * 2)) & 0xFF;
 8004f62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	f04f 0300 	mov.w	r3, #0
 8004f6e:	0c02      	lsrs	r2, r0, #16
 8004f70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004f74:	0c0b      	lsrs	r3, r1, #16
 8004f76:	6979      	ldr	r1, [r7, #20]
 8004f78:	3102      	adds	r1, #2
 8004f7a:	6838      	ldr	r0, [r7, #0]
 8004f7c:	4401      	add	r1, r0
 8004f7e:	b2d3      	uxtb	r3, r2
 8004f80:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_covariancei.base >> (8 * 3)) & 0xFF;
 8004f82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f86:	f04f 0200 	mov.w	r2, #0
 8004f8a:	f04f 0300 	mov.w	r3, #0
 8004f8e:	0e02      	lsrs	r2, r0, #24
 8004f90:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004f94:	0e0b      	lsrs	r3, r1, #24
 8004f96:	6979      	ldr	r1, [r7, #20]
 8004f98:	3103      	adds	r1, #3
 8004f9a:	6838      	ldr	r0, [r7, #0]
 8004f9c:	4401      	add	r1, r0
 8004f9e:	b2d3      	uxtb	r3, r2
 8004fa0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_covariancei.base >> (8 * 4)) & 0xFF;
 8004fa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fa6:	f04f 0200 	mov.w	r2, #0
 8004faa:	f04f 0300 	mov.w	r3, #0
 8004fae:	000a      	movs	r2, r1
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	6979      	ldr	r1, [r7, #20]
 8004fb4:	3104      	adds	r1, #4
 8004fb6:	6838      	ldr	r0, [r7, #0]
 8004fb8:	4401      	add	r1, r0
 8004fba:	b2d3      	uxtb	r3, r2
 8004fbc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_covariancei.base >> (8 * 5)) & 0xFF;
 8004fbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fc2:	f04f 0200 	mov.w	r2, #0
 8004fc6:	f04f 0300 	mov.w	r3, #0
 8004fca:	0a0a      	lsrs	r2, r1, #8
 8004fcc:	2300      	movs	r3, #0
 8004fce:	6979      	ldr	r1, [r7, #20]
 8004fd0:	3105      	adds	r1, #5
 8004fd2:	6838      	ldr	r0, [r7, #0]
 8004fd4:	4401      	add	r1, r0
 8004fd6:	b2d3      	uxtb	r3, r2
 8004fd8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_covariancei.base >> (8 * 6)) & 0xFF;
 8004fda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	0c0a      	lsrs	r2, r1, #16
 8004fe8:	2300      	movs	r3, #0
 8004fea:	6979      	ldr	r1, [r7, #20]
 8004fec:	3106      	adds	r1, #6
 8004fee:	6838      	ldr	r0, [r7, #0]
 8004ff0:	4401      	add	r1, r0
 8004ff2:	b2d3      	uxtb	r3, r2
 8004ff4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_covariancei.base >> (8 * 7)) & 0xFF;
 8004ff6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ffa:	f04f 0200 	mov.w	r2, #0
 8004ffe:	f04f 0300 	mov.w	r3, #0
 8005002:	0e0a      	lsrs	r2, r1, #24
 8005004:	2300      	movs	r3, #0
 8005006:	6979      	ldr	r1, [r7, #20]
 8005008:	3107      	adds	r1, #7
 800500a:	6838      	ldr	r0, [r7, #0]
 800500c:	4401      	add	r1, r0
 800500e:	b2d3      	uxtb	r3, r2
 8005010:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->covariance[i]);
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	3308      	adds	r3, #8
 8005016:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	3301      	adds	r3, #1
 800501c:	613b      	str	r3, [r7, #16]
 800501e:	e77d      	b.n	8004f1c <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x2c>
      }
      return offset;
 8005020:	697b      	ldr	r3, [r7, #20]
    }
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800502a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800502e:	b094      	sub	sp, #80	; 0x50
 8005030:	af00      	add	r7, sp, #0
 8005032:	63f8      	str	r0, [r7, #60]	; 0x3c
 8005034:	63b9      	str	r1, [r7, #56]	; 0x38
    {
      int offset = 0;
 8005036:	2300      	movs	r3, #0
 8005038:	64fb      	str	r3, [r7, #76]	; 0x4c
      offset += this->pose.deserialize(inbuffer + offset);
 800503a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800503c:	f103 0008 	add.w	r0, r3, #8
 8005040:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005044:	4413      	add	r3, r2
 8005046:	4619      	mov	r1, r3
 8005048:	f7ff feea 	bl	8004e20 <_ZN13geometry_msgs4Pose11deserializeEPh>
 800504c:	4602      	mov	r2, r0
 800504e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005050:	4413      	add	r3, r2
 8005052:	64fb      	str	r3, [r7, #76]	; 0x4c
      for( uint32_t i = 0; i < 36; i++){
 8005054:	2300      	movs	r3, #0
 8005056:	64bb      	str	r3, [r7, #72]	; 0x48
 8005058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800505a:	2b23      	cmp	r3, #35	; 0x23
 800505c:	f200 80dc 	bhi.w	8005218 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x1ee>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.base = 0;
 8005060:	f04f 0200 	mov.w	r2, #0
 8005064:	f04f 0300 	mov.w	r3, #0
 8005068:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800506c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005070:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005074:	4413      	add	r3, r2
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	b2da      	uxtb	r2, r3
 800507a:	f04f 0300 	mov.w	r3, #0
 800507e:	ea40 0402 	orr.w	r4, r0, r2
 8005082:	633c      	str	r4, [r7, #48]	; 0x30
 8005084:	430b      	orrs	r3, r1
 8005086:	637b      	str	r3, [r7, #52]	; 0x34
 8005088:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800508c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005090:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8005094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509a:	4413      	add	r3, r2
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	f04f 0300 	mov.w	r3, #0
 80050a4:	f04f 0000 	mov.w	r0, #0
 80050a8:	f04f 0100 	mov.w	r1, #0
 80050ac:	0219      	lsls	r1, r3, #8
 80050ae:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80050b2:	0210      	lsls	r0, r2, #8
 80050b4:	ea44 0300 	orr.w	r3, r4, r0
 80050b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ba:	ea45 0301 	orr.w	r3, r5, r1
 80050be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050c0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80050c4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80050c8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80050cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ce:	1c9a      	adds	r2, r3, #2
 80050d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d2:	4413      	add	r3, r2
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	f04f 0000 	mov.w	r0, #0
 80050e0:	f04f 0100 	mov.w	r1, #0
 80050e4:	0419      	lsls	r1, r3, #16
 80050e6:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80050ea:	0410      	lsls	r0, r2, #16
 80050ec:	ea44 0300 	orr.w	r3, r4, r0
 80050f0:	623b      	str	r3, [r7, #32]
 80050f2:	ea45 0301 	orr.w	r3, r5, r1
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
 80050f8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80050fc:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005100:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005106:	1cda      	adds	r2, r3, #3
 8005108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510a:	4413      	add	r3, r2
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	b2da      	uxtb	r2, r3
 8005110:	f04f 0300 	mov.w	r3, #0
 8005114:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8005118:	ea4f 6802 	mov.w	r8, r2, lsl #24
 800511c:	ea40 0308 	orr.w	r3, r0, r8
 8005120:	61bb      	str	r3, [r7, #24]
 8005122:	ea41 0309 	orr.w	r3, r1, r9
 8005126:	61fb      	str	r3, [r7, #28]
 8005128:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800512c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005130:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8005134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005136:	1d1a      	adds	r2, r3, #4
 8005138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513a:	4413      	add	r3, r2
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	b2da      	uxtb	r2, r3
 8005140:	f04f 0300 	mov.w	r3, #0
 8005144:	f04f 0000 	mov.w	r0, #0
 8005148:	f04f 0100 	mov.w	r1, #0
 800514c:	0011      	movs	r1, r2
 800514e:	2000      	movs	r0, #0
 8005150:	ea44 0300 	orr.w	r3, r4, r0
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	ea45 0301 	orr.w	r3, r5, r1
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005160:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005164:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8005168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800516a:	1d5a      	adds	r2, r3, #5
 800516c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516e:	4413      	add	r3, r2
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	b2da      	uxtb	r2, r3
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	f04f 0000 	mov.w	r0, #0
 800517c:	f04f 0100 	mov.w	r1, #0
 8005180:	0211      	lsls	r1, r2, #8
 8005182:	2000      	movs	r0, #0
 8005184:	ea44 0300 	orr.w	r3, r4, r0
 8005188:	60bb      	str	r3, [r7, #8]
 800518a:	ea45 0301 	orr.w	r3, r5, r1
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005194:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005198:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800519c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800519e:	1d9a      	adds	r2, r3, #6
 80051a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a2:	4413      	add	r3, r2
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	f04f 0000 	mov.w	r0, #0
 80051b0:	f04f 0100 	mov.w	r1, #0
 80051b4:	0411      	lsls	r1, r2, #16
 80051b6:	2000      	movs	r0, #0
 80051b8:	ea44 0300 	orr.w	r3, r4, r0
 80051bc:	603b      	str	r3, [r7, #0]
 80051be:	ea45 0301 	orr.w	r3, r5, r1
 80051c2:	607b      	str	r3, [r7, #4]
 80051c4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80051c8:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80051cc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80051d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d2:	1dda      	adds	r2, r3, #7
 80051d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d6:	4413      	add	r3, r2
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	f04f 0300 	mov.w	r3, #0
 80051e0:	f04f 0000 	mov.w	r0, #0
 80051e4:	f04f 0100 	mov.w	r1, #0
 80051e8:	0611      	lsls	r1, r2, #24
 80051ea:	2000      	movs	r0, #0
 80051ec:	ea44 0a00 	orr.w	sl, r4, r0
 80051f0:	ea45 0b01 	orr.w	fp, r5, r1
 80051f4:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
      this->covariance[i] = u_covariancei.real;
 80051f8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80051fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005200:	330b      	adds	r3, #11
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	4413      	add	r3, r2
 8005206:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->covariance[i]);
 800520a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800520c:	3308      	adds	r3, #8
 800520e:	64fb      	str	r3, [r7, #76]	; 0x4c
      for( uint32_t i = 0; i < 36; i++){
 8005210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005212:	3301      	adds	r3, #1
 8005214:	64bb      	str	r3, [r7, #72]	; 0x48
 8005216:	e71f      	b.n	8005058 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x2e>
      }
     return offset;
 8005218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    }
 800521a:	4618      	mov	r0, r3
 800521c:	3750      	adds	r7, #80	; 0x50
 800521e:	46bd      	mov	sp, r7
 8005220:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005224 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv>:

    const char * getType(){ return "geometry_msgs/PoseWithCovariance"; };
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	4b03      	ldr	r3, [pc, #12]	; (800523c <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv+0x18>)
 800522e:	4618      	mov	r0, r3
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	0800d930 	.word	0x0800d930

08005240 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev>:
    const char * getMD5(){ return "c23e848cf1b7533a8d7c259073a97e6f"; };
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	4b03      	ldr	r3, [pc, #12]	; (8005258 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev+0x18>)
 800524a:	4618      	mov	r0, r3
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	0800d954 	.word	0x0800d954

0800525c <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Twist _twist_type;
      _twist_type twist;
      double covariance[36];

    TwistWithCovariance():
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
      twist(),
      covariance()
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4618      	mov	r0, r3
 8005268:	f7fc fab8 	bl	80017dc <_ZN3ros3MsgC1Ev>
 800526c:	4a0d      	ldr	r2, [pc, #52]	; (80052a4 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x48>)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3308      	adds	r3, #8
 8005276:	4618      	mov	r0, r3
 8005278:	f7fd ff76 	bl	8003168 <_ZN13geometry_msgs5TwistC1Ev>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8005282:	2323      	movs	r3, #35	; 0x23
 8005284:	2b00      	cmp	r3, #0
 8005286:	db08      	blt.n	800529a <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x3e>
 8005288:	f04f 0000 	mov.w	r0, #0
 800528c:	f04f 0100 	mov.w	r1, #0
 8005290:	e9c2 0100 	strd	r0, r1, [r2]
 8005294:	3208      	adds	r2, #8
 8005296:	3b01      	subs	r3, #1
 8005298:	e7f4      	b.n	8005284 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x28>
    {
    }
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4618      	mov	r0, r3
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	0800dbbc 	.word	0x0800dbbc

080052a8 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80052b2:	2300      	movs	r3, #0
 80052b4:	617b      	str	r3, [r7, #20]
      offset += this->twist.serialize(outbuffer + offset);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f103 0008 	add.w	r0, r3, #8
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	4413      	add	r3, r2
 80052c2:	4619      	mov	r1, r3
 80052c4:	f7fd ff6c 	bl	80031a0 <_ZNK13geometry_msgs5Twist9serializeEPh>
 80052c8:	4602      	mov	r2, r0
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	4413      	add	r3, r2
 80052ce:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 80052d0:	2300      	movs	r3, #0
 80052d2:	613b      	str	r3, [r7, #16]
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	2b23      	cmp	r3, #35	; 0x23
 80052d8:	d87e      	bhi.n	80053d8 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x130>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.real = this->covariance[i];
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	330a      	adds	r3, #10
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	4413      	add	r3, r2
 80052e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e8:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_covariancei.base >> (8 * 0)) & 0xFF;
 80052ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052f0:	6979      	ldr	r1, [r7, #20]
 80052f2:	6838      	ldr	r0, [r7, #0]
 80052f4:	4401      	add	r1, r0
 80052f6:	b2d3      	uxtb	r3, r2
 80052f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_covariancei.base >> (8 * 1)) & 0xFF;
 80052fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80052fe:	f04f 0200 	mov.w	r2, #0
 8005302:	f04f 0300 	mov.w	r3, #0
 8005306:	0a02      	lsrs	r2, r0, #8
 8005308:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800530c:	0a0b      	lsrs	r3, r1, #8
 800530e:	6979      	ldr	r1, [r7, #20]
 8005310:	3101      	adds	r1, #1
 8005312:	6838      	ldr	r0, [r7, #0]
 8005314:	4401      	add	r1, r0
 8005316:	b2d3      	uxtb	r3, r2
 8005318:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_covariancei.base >> (8 * 2)) & 0xFF;
 800531a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800531e:	f04f 0200 	mov.w	r2, #0
 8005322:	f04f 0300 	mov.w	r3, #0
 8005326:	0c02      	lsrs	r2, r0, #16
 8005328:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800532c:	0c0b      	lsrs	r3, r1, #16
 800532e:	6979      	ldr	r1, [r7, #20]
 8005330:	3102      	adds	r1, #2
 8005332:	6838      	ldr	r0, [r7, #0]
 8005334:	4401      	add	r1, r0
 8005336:	b2d3      	uxtb	r3, r2
 8005338:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_covariancei.base >> (8 * 3)) & 0xFF;
 800533a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	0e02      	lsrs	r2, r0, #24
 8005348:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800534c:	0e0b      	lsrs	r3, r1, #24
 800534e:	6979      	ldr	r1, [r7, #20]
 8005350:	3103      	adds	r1, #3
 8005352:	6838      	ldr	r0, [r7, #0]
 8005354:	4401      	add	r1, r0
 8005356:	b2d3      	uxtb	r3, r2
 8005358:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_covariancei.base >> (8 * 4)) & 0xFF;
 800535a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	000a      	movs	r2, r1
 8005368:	2300      	movs	r3, #0
 800536a:	6979      	ldr	r1, [r7, #20]
 800536c:	3104      	adds	r1, #4
 800536e:	6838      	ldr	r0, [r7, #0]
 8005370:	4401      	add	r1, r0
 8005372:	b2d3      	uxtb	r3, r2
 8005374:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_covariancei.base >> (8 * 5)) & 0xFF;
 8005376:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800537a:	f04f 0200 	mov.w	r2, #0
 800537e:	f04f 0300 	mov.w	r3, #0
 8005382:	0a0a      	lsrs	r2, r1, #8
 8005384:	2300      	movs	r3, #0
 8005386:	6979      	ldr	r1, [r7, #20]
 8005388:	3105      	adds	r1, #5
 800538a:	6838      	ldr	r0, [r7, #0]
 800538c:	4401      	add	r1, r0
 800538e:	b2d3      	uxtb	r3, r2
 8005390:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_covariancei.base >> (8 * 6)) & 0xFF;
 8005392:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005396:	f04f 0200 	mov.w	r2, #0
 800539a:	f04f 0300 	mov.w	r3, #0
 800539e:	0c0a      	lsrs	r2, r1, #16
 80053a0:	2300      	movs	r3, #0
 80053a2:	6979      	ldr	r1, [r7, #20]
 80053a4:	3106      	adds	r1, #6
 80053a6:	6838      	ldr	r0, [r7, #0]
 80053a8:	4401      	add	r1, r0
 80053aa:	b2d3      	uxtb	r3, r2
 80053ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_covariancei.base >> (8 * 7)) & 0xFF;
 80053ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053b2:	f04f 0200 	mov.w	r2, #0
 80053b6:	f04f 0300 	mov.w	r3, #0
 80053ba:	0e0a      	lsrs	r2, r1, #24
 80053bc:	2300      	movs	r3, #0
 80053be:	6979      	ldr	r1, [r7, #20]
 80053c0:	3107      	adds	r1, #7
 80053c2:	6838      	ldr	r0, [r7, #0]
 80053c4:	4401      	add	r1, r0
 80053c6:	b2d3      	uxtb	r3, r2
 80053c8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->covariance[i]);
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	3308      	adds	r3, #8
 80053ce:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	3301      	adds	r3, #1
 80053d4:	613b      	str	r3, [r7, #16]
 80053d6:	e77d      	b.n	80052d4 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x2c>
      }
      return offset;
 80053d8:	697b      	ldr	r3, [r7, #20]
    }
 80053da:	4618      	mov	r0, r3
 80053dc:	3718      	adds	r7, #24
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80053e2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053e6:	b094      	sub	sp, #80	; 0x50
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	63f8      	str	r0, [r7, #60]	; 0x3c
 80053ec:	63b9      	str	r1, [r7, #56]	; 0x38
    {
      int offset = 0;
 80053ee:	2300      	movs	r3, #0
 80053f0:	64fb      	str	r3, [r7, #76]	; 0x4c
      offset += this->twist.deserialize(inbuffer + offset);
 80053f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053f4:	f103 0008 	add.w	r0, r3, #8
 80053f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fc:	4413      	add	r3, r2
 80053fe:	4619      	mov	r1, r3
 8005400:	f7fd fef4 	bl	80031ec <_ZN13geometry_msgs5Twist11deserializeEPh>
 8005404:	4602      	mov	r2, r0
 8005406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005408:	4413      	add	r3, r2
 800540a:	64fb      	str	r3, [r7, #76]	; 0x4c
      for( uint32_t i = 0; i < 36; i++){
 800540c:	2300      	movs	r3, #0
 800540e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005412:	2b23      	cmp	r3, #35	; 0x23
 8005414:	f200 80dc 	bhi.w	80055d0 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x1ee>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.base = 0;
 8005418:	f04f 0200 	mov.w	r2, #0
 800541c:	f04f 0300 	mov.w	r3, #0
 8005420:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005424:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005428:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800542a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542c:	4413      	add	r3, r2
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	b2da      	uxtb	r2, r3
 8005432:	f04f 0300 	mov.w	r3, #0
 8005436:	ea40 0402 	orr.w	r4, r0, r2
 800543a:	633c      	str	r4, [r7, #48]	; 0x30
 800543c:	430b      	orrs	r3, r1
 800543e:	637b      	str	r3, [r7, #52]	; 0x34
 8005440:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005444:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005448:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800544c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005452:	4413      	add	r3, r2
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	b2da      	uxtb	r2, r3
 8005458:	f04f 0300 	mov.w	r3, #0
 800545c:	f04f 0000 	mov.w	r0, #0
 8005460:	f04f 0100 	mov.w	r1, #0
 8005464:	0219      	lsls	r1, r3, #8
 8005466:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800546a:	0210      	lsls	r0, r2, #8
 800546c:	ea44 0300 	orr.w	r3, r4, r0
 8005470:	62bb      	str	r3, [r7, #40]	; 0x28
 8005472:	ea45 0301 	orr.w	r3, r5, r1
 8005476:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005478:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800547c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005480:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8005484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005486:	1c9a      	adds	r2, r3, #2
 8005488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548a:	4413      	add	r3, r2
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	b2da      	uxtb	r2, r3
 8005490:	f04f 0300 	mov.w	r3, #0
 8005494:	f04f 0000 	mov.w	r0, #0
 8005498:	f04f 0100 	mov.w	r1, #0
 800549c:	0419      	lsls	r1, r3, #16
 800549e:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80054a2:	0410      	lsls	r0, r2, #16
 80054a4:	ea44 0300 	orr.w	r3, r4, r0
 80054a8:	623b      	str	r3, [r7, #32]
 80054aa:	ea45 0301 	orr.w	r3, r5, r1
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24
 80054b0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80054b4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80054b8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80054bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054be:	1cda      	adds	r2, r3, #3
 80054c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c2:	4413      	add	r3, r2
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	ea4f 2912 	mov.w	r9, r2, lsr #8
 80054d0:	ea4f 6802 	mov.w	r8, r2, lsl #24
 80054d4:	ea40 0308 	orr.w	r3, r0, r8
 80054d8:	61bb      	str	r3, [r7, #24]
 80054da:	ea41 0309 	orr.w	r3, r1, r9
 80054de:	61fb      	str	r3, [r7, #28]
 80054e0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80054e4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80054e8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80054ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ee:	1d1a      	adds	r2, r3, #4
 80054f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f2:	4413      	add	r3, r2
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	f04f 0300 	mov.w	r3, #0
 80054fc:	f04f 0000 	mov.w	r0, #0
 8005500:	f04f 0100 	mov.w	r1, #0
 8005504:	0011      	movs	r1, r2
 8005506:	2000      	movs	r0, #0
 8005508:	ea44 0300 	orr.w	r3, r4, r0
 800550c:	613b      	str	r3, [r7, #16]
 800550e:	ea45 0301 	orr.w	r3, r5, r1
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005518:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800551c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8005520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005522:	1d5a      	adds	r2, r3, #5
 8005524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005526:	4413      	add	r3, r2
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	b2da      	uxtb	r2, r3
 800552c:	f04f 0300 	mov.w	r3, #0
 8005530:	f04f 0000 	mov.w	r0, #0
 8005534:	f04f 0100 	mov.w	r1, #0
 8005538:	0211      	lsls	r1, r2, #8
 800553a:	2000      	movs	r0, #0
 800553c:	ea44 0300 	orr.w	r3, r4, r0
 8005540:	60bb      	str	r3, [r7, #8]
 8005542:	ea45 0301 	orr.w	r3, r5, r1
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800554c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005550:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8005554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005556:	1d9a      	adds	r2, r3, #6
 8005558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555a:	4413      	add	r3, r2
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	b2da      	uxtb	r2, r3
 8005560:	f04f 0300 	mov.w	r3, #0
 8005564:	f04f 0000 	mov.w	r0, #0
 8005568:	f04f 0100 	mov.w	r1, #0
 800556c:	0411      	lsls	r1, r2, #16
 800556e:	2000      	movs	r0, #0
 8005570:	ea44 0300 	orr.w	r3, r4, r0
 8005574:	603b      	str	r3, [r7, #0]
 8005576:	ea45 0301 	orr.w	r3, r5, r1
 800557a:	607b      	str	r3, [r7, #4]
 800557c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005580:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005584:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8005588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800558a:	1dda      	adds	r2, r3, #7
 800558c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558e:	4413      	add	r3, r2
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	b2da      	uxtb	r2, r3
 8005594:	f04f 0300 	mov.w	r3, #0
 8005598:	f04f 0000 	mov.w	r0, #0
 800559c:	f04f 0100 	mov.w	r1, #0
 80055a0:	0611      	lsls	r1, r2, #24
 80055a2:	2000      	movs	r0, #0
 80055a4:	ea44 0a00 	orr.w	sl, r4, r0
 80055a8:	ea45 0b01 	orr.w	fp, r5, r1
 80055ac:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
      this->covariance[i] = u_covariancei.real;
 80055b0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80055b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055b8:	330a      	adds	r3, #10
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	4413      	add	r3, r2
 80055be:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->covariance[i]);
 80055c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c4:	3308      	adds	r3, #8
 80055c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      for( uint32_t i = 0; i < 36; i++){
 80055c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055ca:	3301      	adds	r3, #1
 80055cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80055ce:	e71f      	b.n	8005410 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x2e>
      }
     return offset;
 80055d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    }
 80055d2:	4618      	mov	r0, r3
 80055d4:	3750      	adds	r7, #80	; 0x50
 80055d6:	46bd      	mov	sp, r7
 80055d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080055dc <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv>:

    const char * getType(){ return "geometry_msgs/TwistWithCovariance"; };
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	4b03      	ldr	r3, [pc, #12]	; (80055f4 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv+0x18>)
 80055e6:	4618      	mov	r0, r3
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	0800d978 	.word	0x0800d978

080055f8 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev>:
    const char * getMD5(){ return "1fe8a28e6890a4cc3ae4c3ca5c7d82e6"; };
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	4b03      	ldr	r3, [pc, #12]	; (8005610 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev+0x18>)
 8005602:	4618      	mov	r0, r3
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	0800d99c 	.word	0x0800d99c

08005614 <_ZN8nav_msgs8OdometryC1Ev>:
      typedef geometry_msgs::PoseWithCovariance _pose_type;
      _pose_type pose;
      typedef geometry_msgs::TwistWithCovariance _twist_type;
      _twist_type twist;

    Odometry():
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      pose(),
      twist()
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4618      	mov	r0, r3
 8005620:	f7fc f8dc 	bl	80017dc <_ZN3ros3MsgC1Ev>
 8005624:	4a0d      	ldr	r2, [pc, #52]	; (800565c <_ZN8nav_msgs8OdometryC1Ev+0x48>)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	3304      	adds	r3, #4
 800562e:	4618      	mov	r0, r3
 8005630:	f7fd fe1e 	bl	8003270 <_ZN8std_msgs6HeaderC1Ev>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a0a      	ldr	r2, [pc, #40]	; (8005660 <_ZN8nav_msgs8OdometryC1Ev+0x4c>)
 8005638:	619a      	str	r2, [r3, #24]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	3320      	adds	r3, #32
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff fc30 	bl	8004ea4 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800564a:	4618      	mov	r0, r3
 800564c:	f7ff fe06 	bl	800525c <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>
    {
    }
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4618      	mov	r0, r3
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	0800dba4 	.word	0x0800dba4
 8005660:	0800d6a8 	.word	0x0800d6a8

08005664 <_ZNK8nav_msgs8Odometry9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800566e:	2300      	movs	r3, #0
 8005670:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	1d18      	adds	r0, r3, #4
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	4413      	add	r3, r2
 800567c:	4619      	mov	r1, r3
 800567e:	f7fd fe17 	bl	80032b0 <_ZNK8std_msgs6Header9serializeEPh>
 8005682:	4602      	mov	r2, r0
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	4618      	mov	r0, r3
 8005690:	f7fa fdba 	bl	8000208 <strlen>
 8005694:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	4413      	add	r3, r2
 800569c:	68b9      	ldr	r1, [r7, #8]
 800569e:	4618      	mov	r0, r3
 80056a0:	f001 ffe4 	bl	800766c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	3304      	adds	r3, #4
 80056a8:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	18d0      	adds	r0, r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	4619      	mov	r1, r3
 80056b8:	f007 fe78 	bl	800d3ac <memcpy>
      offset += length_child_frame_id;
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	4413      	add	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f103 0020 	add.w	r0, r3, #32
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	4413      	add	r3, r2
 80056d0:	4619      	mov	r1, r3
 80056d2:	f7ff fc0d 	bl	8004ef0 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>
 80056d6:	4602      	mov	r2, r0
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	4413      	add	r3, r2
 80056ea:	4619      	mov	r1, r3
 80056ec:	f7ff fddc 	bl	80052a8 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>
 80056f0:	4602      	mov	r2, r0
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4413      	add	r3, r2
 80056f6:	60fb      	str	r3, [r7, #12]
      return offset;
 80056f8:	68fb      	ldr	r3, [r7, #12]
    }
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <_ZN8nav_msgs8Odometry11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8005702:	b580      	push	{r7, lr}
 8005704:	b086      	sub	sp, #24
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
 800570a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800570c:	2300      	movs	r3, #0
 800570e:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	1d18      	adds	r0, r3, #4
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	4413      	add	r3, r2
 800571a:	4619      	mov	r1, r3
 800571c:	f7fd fe60 	bl	80033e0 <_ZN8std_msgs6Header11deserializeEPh>
 8005720:	4602      	mov	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	4413      	add	r3, r2
 8005726:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	441a      	add	r2, r3
 800572e:	f107 030c 	add.w	r3, r7, #12
 8005732:	4611      	mov	r1, r2
 8005734:	4618      	mov	r0, r3
 8005736:	f001 ffb7 	bl	80076a8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	3304      	adds	r3, #4
 800573e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4413      	add	r3, r2
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	429a      	cmp	r2, r3
 800574e:	d20c      	bcs.n	800576a <_ZN8nav_msgs8Odometry11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	441a      	add	r2, r3
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	3b01      	subs	r3, #1
 800575a:	6839      	ldr	r1, [r7, #0]
 800575c:	440b      	add	r3, r1
 800575e:	7812      	ldrb	r2, [r2, #0]
 8005760:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	3301      	adds	r3, #1
 8005766:	617b      	str	r3, [r7, #20]
 8005768:	e7ec      	b.n	8005744 <_ZN8nav_msgs8Odometry11deserializeEPh+0x42>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4413      	add	r3, r2
 8005770:	3b01      	subs	r3, #1
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	4413      	add	r3, r2
 8005776:	2200      	movs	r2, #0
 8005778:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	3b01      	subs	r3, #1
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	441a      	add	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4413      	add	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
      offset += this->pose.deserialize(inbuffer + offset);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f103 0020 	add.w	r0, r3, #32
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	4413      	add	r3, r2
 800579a:	4619      	mov	r1, r3
 800579c:	f7ff fc45 	bl	800502a <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	4413      	add	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]
      offset += this->twist.deserialize(inbuffer + offset);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	4413      	add	r3, r2
 80057b4:	4619      	mov	r1, r3
 80057b6:	f7ff fe14 	bl	80053e2 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>
 80057ba:	4602      	mov	r2, r0
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	4413      	add	r3, r2
 80057c0:	613b      	str	r3, [r7, #16]
     return offset;
 80057c2:	693b      	ldr	r3, [r7, #16]
    }
 80057c4:	4618      	mov	r0, r3
 80057c6:	3718      	adds	r7, #24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <_ZN8nav_msgs8Odometry7getTypeEv>:

    const char * getType(){ return "nav_msgs/Odometry"; };
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	4b03      	ldr	r3, [pc, #12]	; (80057e4 <_ZN8nav_msgs8Odometry7getTypeEv+0x18>)
 80057d6:	4618      	mov	r0, r3
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	0800d9c0 	.word	0x0800d9c0

080057e8 <_ZN8nav_msgs8Odometry6getMD5Ev>:
    const char * getMD5(){ return "cd5e73d190d741a2f92e81eda573aca7"; };
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	4b03      	ldr	r3, [pc, #12]	; (8005800 <_ZN8nav_msgs8Odometry6getMD5Ev+0x18>)
 80057f2:	4618      	mov	r0, r3
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	0800d9d4 	.word	0x0800d9d4

08005804 <_ZN11sensor_msgs10JointStateC1Ev>:
      uint32_t effort_length;
      typedef double _effort_type;
      _effort_type st_effort;
      _effort_type * effort;

    JointState():
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
      header(),
      name_length(0), name(NULL),
      position_length(0), position(NULL),
      velocity_length(0), velocity(NULL),
      effort_length(0), effort(NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4618      	mov	r0, r3
 8005810:	f7fb ffe4 	bl	80017dc <_ZN3ros3MsgC1Ev>
 8005814:	4a12      	ldr	r2, [pc, #72]	; (8005860 <_ZN11sensor_msgs10JointStateC1Ev+0x5c>)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	3304      	adds	r3, #4
 800581e:	4618      	mov	r0, r3
 8005820:	f7fd fd26 	bl	8003270 <_ZN8std_msgs6HeaderC1Ev>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	619a      	str	r2, [r3, #24]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	621a      	str	r2, [r3, #32]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	625a      	str	r2, [r3, #36]	; 0x24
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	631a      	str	r2, [r3, #48]	; 0x30
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	635a      	str	r2, [r3, #52]	; 0x34
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	641a      	str	r2, [r3, #64]	; 0x40
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	645a      	str	r2, [r3, #68]	; 0x44
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	651a      	str	r2, [r3, #80]	; 0x50
    {
    }
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4618      	mov	r0, r3
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	0800db8c 	.word	0x0800db8c

08005864 <_ZNK11sensor_msgs10JointState9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8005864:	b580      	push	{r7, lr}
 8005866:	b08e      	sub	sp, #56	; 0x38
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800586e:	2300      	movs	r3, #0
 8005870:	637b      	str	r3, [r7, #52]	; 0x34
      offset += this->header.serialize(outbuffer + offset);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	1d18      	adds	r0, r3, #4
 8005876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	4413      	add	r3, r2
 800587c:	4619      	mov	r1, r3
 800587e:	f7fd fd17 	bl	80032b0 <_ZNK8std_msgs6Header9serializeEPh>
 8005882:	4602      	mov	r2, r0
 8005884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005886:	4413      	add	r3, r2
 8005888:	637b      	str	r3, [r7, #52]	; 0x34
      *(outbuffer + offset + 0) = (this->name_length >> (8 * 0)) & 0xFF;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6999      	ldr	r1, [r3, #24]
 800588e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	4413      	add	r3, r2
 8005894:	b2ca      	uxtb	r2, r1
 8005896:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->name_length >> (8 * 1)) & 0xFF;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	0a19      	lsrs	r1, r3, #8
 800589e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a0:	3301      	adds	r3, #1
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	4413      	add	r3, r2
 80058a6:	b2ca      	uxtb	r2, r1
 80058a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->name_length >> (8 * 2)) & 0xFF;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	0c19      	lsrs	r1, r3, #16
 80058b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b2:	3302      	adds	r3, #2
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	4413      	add	r3, r2
 80058b8:	b2ca      	uxtb	r2, r1
 80058ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->name_length >> (8 * 3)) & 0xFF;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	0e19      	lsrs	r1, r3, #24
 80058c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c4:	3303      	adds	r3, #3
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	4413      	add	r3, r2
 80058ca:	b2ca      	uxtb	r2, r1
 80058cc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->name_length);
 80058ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d0:	3304      	adds	r3, #4
 80058d2:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < name_length; i++){
 80058d4:	2300      	movs	r3, #0
 80058d6:	633b      	str	r3, [r7, #48]	; 0x30
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058de:	429a      	cmp	r2, r3
 80058e0:	d228      	bcs.n	8005934 <_ZNK11sensor_msgs10JointState9serializeEPh+0xd0>
      uint32_t length_namei = strlen(this->name[i]);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1a      	ldr	r2, [r3, #32]
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fa fc8a 	bl	8000208 <strlen>
 80058f4:	6238      	str	r0, [r7, #32]
      varToArr(outbuffer + offset, length_namei);
 80058f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	4413      	add	r3, r2
 80058fc:	6a39      	ldr	r1, [r7, #32]
 80058fe:	4618      	mov	r0, r3
 8005900:	f001 feb4 	bl	800766c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005906:	3304      	adds	r3, #4
 8005908:	637b      	str	r3, [r7, #52]	; 0x34
      memcpy(outbuffer + offset, this->name[i], length_namei);
 800590a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	18d0      	adds	r0, r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a1a      	ldr	r2, [r3, #32]
 8005914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6a3a      	ldr	r2, [r7, #32]
 800591e:	4619      	mov	r1, r3
 8005920:	f007 fd44 	bl	800d3ac <memcpy>
      offset += length_namei;
 8005924:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	4413      	add	r3, r2
 800592a:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < name_length; i++){
 800592c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592e:	3301      	adds	r3, #1
 8005930:	633b      	str	r3, [r7, #48]	; 0x30
 8005932:	e7d1      	b.n	80058d8 <_ZNK11sensor_msgs10JointState9serializeEPh+0x74>
      }
      *(outbuffer + offset + 0) = (this->position_length >> (8 * 0)) & 0xFF;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	4413      	add	r3, r2
 800593e:	b2ca      	uxtb	r2, r1
 8005940:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->position_length >> (8 * 1)) & 0xFF;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	0a19      	lsrs	r1, r3, #8
 8005948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594a:	3301      	adds	r3, #1
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	4413      	add	r3, r2
 8005950:	b2ca      	uxtb	r2, r1
 8005952:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->position_length >> (8 * 2)) & 0xFF;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	0c19      	lsrs	r1, r3, #16
 800595a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595c:	3302      	adds	r3, #2
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	4413      	add	r3, r2
 8005962:	b2ca      	uxtb	r2, r1
 8005964:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->position_length >> (8 * 3)) & 0xFF;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	0e19      	lsrs	r1, r3, #24
 800596c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596e:	3303      	adds	r3, #3
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	4413      	add	r3, r2
 8005974:	b2ca      	uxtb	r2, r1
 8005976:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->position_length);
 8005978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597a:	3304      	adds	r3, #4
 800597c:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < position_length; i++){
 800597e:	2300      	movs	r3, #0
 8005980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005988:	429a      	cmp	r2, r3
 800598a:	d27e      	bcs.n	8005a8a <_ZNK11sensor_msgs10JointState9serializeEPh+0x226>
      union {
        double real;
        uint64_t base;
      } u_positioni;
      u_positioni.real = this->position[i];
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	4413      	add	r3, r2
 8005996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599a:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_positioni.base >> (8 * 0)) & 0xFF;
 800599e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80059a4:	6838      	ldr	r0, [r7, #0]
 80059a6:	4401      	add	r1, r0
 80059a8:	b2d3      	uxtb	r3, r2
 80059aa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_positioni.base >> (8 * 1)) & 0xFF;
 80059ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80059b0:	f04f 0200 	mov.w	r2, #0
 80059b4:	f04f 0300 	mov.w	r3, #0
 80059b8:	0a02      	lsrs	r2, r0, #8
 80059ba:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80059be:	0a0b      	lsrs	r3, r1, #8
 80059c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80059c2:	3101      	adds	r1, #1
 80059c4:	6838      	ldr	r0, [r7, #0]
 80059c6:	4401      	add	r1, r0
 80059c8:	b2d3      	uxtb	r3, r2
 80059ca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_positioni.base >> (8 * 2)) & 0xFF;
 80059cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80059d0:	f04f 0200 	mov.w	r2, #0
 80059d4:	f04f 0300 	mov.w	r3, #0
 80059d8:	0c02      	lsrs	r2, r0, #16
 80059da:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80059de:	0c0b      	lsrs	r3, r1, #16
 80059e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80059e2:	3102      	adds	r1, #2
 80059e4:	6838      	ldr	r0, [r7, #0]
 80059e6:	4401      	add	r1, r0
 80059e8:	b2d3      	uxtb	r3, r2
 80059ea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_positioni.base >> (8 * 3)) & 0xFF;
 80059ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	f04f 0300 	mov.w	r3, #0
 80059f8:	0e02      	lsrs	r2, r0, #24
 80059fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80059fe:	0e0b      	lsrs	r3, r1, #24
 8005a00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a02:	3103      	adds	r1, #3
 8005a04:	6838      	ldr	r0, [r7, #0]
 8005a06:	4401      	add	r1, r0
 8005a08:	b2d3      	uxtb	r3, r2
 8005a0a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_positioni.base >> (8 * 4)) & 0xFF;
 8005a0c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005a10:	f04f 0200 	mov.w	r2, #0
 8005a14:	f04f 0300 	mov.w	r3, #0
 8005a18:	000a      	movs	r2, r1
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a1e:	3104      	adds	r1, #4
 8005a20:	6838      	ldr	r0, [r7, #0]
 8005a22:	4401      	add	r1, r0
 8005a24:	b2d3      	uxtb	r3, r2
 8005a26:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_positioni.base >> (8 * 5)) & 0xFF;
 8005a28:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005a2c:	f04f 0200 	mov.w	r2, #0
 8005a30:	f04f 0300 	mov.w	r3, #0
 8005a34:	0a0a      	lsrs	r2, r1, #8
 8005a36:	2300      	movs	r3, #0
 8005a38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a3a:	3105      	adds	r1, #5
 8005a3c:	6838      	ldr	r0, [r7, #0]
 8005a3e:	4401      	add	r1, r0
 8005a40:	b2d3      	uxtb	r3, r2
 8005a42:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_positioni.base >> (8 * 6)) & 0xFF;
 8005a44:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005a48:	f04f 0200 	mov.w	r2, #0
 8005a4c:	f04f 0300 	mov.w	r3, #0
 8005a50:	0c0a      	lsrs	r2, r1, #16
 8005a52:	2300      	movs	r3, #0
 8005a54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a56:	3106      	adds	r1, #6
 8005a58:	6838      	ldr	r0, [r7, #0]
 8005a5a:	4401      	add	r1, r0
 8005a5c:	b2d3      	uxtb	r3, r2
 8005a5e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_positioni.base >> (8 * 7)) & 0xFF;
 8005a60:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005a64:	f04f 0200 	mov.w	r2, #0
 8005a68:	f04f 0300 	mov.w	r3, #0
 8005a6c:	0e0a      	lsrs	r2, r1, #24
 8005a6e:	2300      	movs	r3, #0
 8005a70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a72:	3107      	adds	r1, #7
 8005a74:	6838      	ldr	r0, [r7, #0]
 8005a76:	4401      	add	r1, r0
 8005a78:	b2d3      	uxtb	r3, r2
 8005a7a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->position[i]);
 8005a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7e:	3308      	adds	r3, #8
 8005a80:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < position_length; i++){
 8005a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a84:	3301      	adds	r3, #1
 8005a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a88:	e77b      	b.n	8005982 <_ZNK11sensor_msgs10JointState9serializeEPh+0x11e>
      }
      *(outbuffer + offset + 0) = (this->velocity_length >> (8 * 0)) & 0xFF;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	4413      	add	r3, r2
 8005a94:	b2ca      	uxtb	r2, r1
 8005a96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->velocity_length >> (8 * 1)) & 0xFF;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9c:	0a19      	lsrs	r1, r3, #8
 8005a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	b2ca      	uxtb	r2, r1
 8005aa8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->velocity_length >> (8 * 2)) & 0xFF;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aae:	0c19      	lsrs	r1, r3, #16
 8005ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab2:	3302      	adds	r3, #2
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	b2ca      	uxtb	r2, r1
 8005aba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->velocity_length >> (8 * 3)) & 0xFF;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac0:	0e19      	lsrs	r1, r3, #24
 8005ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac4:	3303      	adds	r3, #3
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	4413      	add	r3, r2
 8005aca:	b2ca      	uxtb	r2, r1
 8005acc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->velocity_length);
 8005ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005adc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d27e      	bcs.n	8005be0 <_ZNK11sensor_msgs10JointState9serializeEPh+0x37c>
      union {
        double real;
        uint64_t base;
      } u_velocityi;
      u_velocityi.real = this->velocity[i];
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae8:	00db      	lsls	r3, r3, #3
 8005aea:	4413      	add	r3, r2
 8005aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af0:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_velocityi.base >> (8 * 0)) & 0xFF;
 8005af4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005af8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005afa:	6838      	ldr	r0, [r7, #0]
 8005afc:	4401      	add	r1, r0
 8005afe:	b2d3      	uxtb	r3, r2
 8005b00:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_velocityi.base >> (8 * 1)) & 0xFF;
 8005b02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b06:	f04f 0200 	mov.w	r2, #0
 8005b0a:	f04f 0300 	mov.w	r3, #0
 8005b0e:	0a02      	lsrs	r2, r0, #8
 8005b10:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005b14:	0a0b      	lsrs	r3, r1, #8
 8005b16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b18:	3101      	adds	r1, #1
 8005b1a:	6838      	ldr	r0, [r7, #0]
 8005b1c:	4401      	add	r1, r0
 8005b1e:	b2d3      	uxtb	r3, r2
 8005b20:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_velocityi.base >> (8 * 2)) & 0xFF;
 8005b22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b26:	f04f 0200 	mov.w	r2, #0
 8005b2a:	f04f 0300 	mov.w	r3, #0
 8005b2e:	0c02      	lsrs	r2, r0, #16
 8005b30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005b34:	0c0b      	lsrs	r3, r1, #16
 8005b36:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b38:	3102      	adds	r1, #2
 8005b3a:	6838      	ldr	r0, [r7, #0]
 8005b3c:	4401      	add	r1, r0
 8005b3e:	b2d3      	uxtb	r3, r2
 8005b40:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_velocityi.base >> (8 * 3)) & 0xFF;
 8005b42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b46:	f04f 0200 	mov.w	r2, #0
 8005b4a:	f04f 0300 	mov.w	r3, #0
 8005b4e:	0e02      	lsrs	r2, r0, #24
 8005b50:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005b54:	0e0b      	lsrs	r3, r1, #24
 8005b56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b58:	3103      	adds	r1, #3
 8005b5a:	6838      	ldr	r0, [r7, #0]
 8005b5c:	4401      	add	r1, r0
 8005b5e:	b2d3      	uxtb	r3, r2
 8005b60:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_velocityi.base >> (8 * 4)) & 0xFF;
 8005b62:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b66:	f04f 0200 	mov.w	r2, #0
 8005b6a:	f04f 0300 	mov.w	r3, #0
 8005b6e:	000a      	movs	r2, r1
 8005b70:	2300      	movs	r3, #0
 8005b72:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b74:	3104      	adds	r1, #4
 8005b76:	6838      	ldr	r0, [r7, #0]
 8005b78:	4401      	add	r1, r0
 8005b7a:	b2d3      	uxtb	r3, r2
 8005b7c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_velocityi.base >> (8 * 5)) & 0xFF;
 8005b7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b82:	f04f 0200 	mov.w	r2, #0
 8005b86:	f04f 0300 	mov.w	r3, #0
 8005b8a:	0a0a      	lsrs	r2, r1, #8
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b90:	3105      	adds	r1, #5
 8005b92:	6838      	ldr	r0, [r7, #0]
 8005b94:	4401      	add	r1, r0
 8005b96:	b2d3      	uxtb	r3, r2
 8005b98:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_velocityi.base >> (8 * 6)) & 0xFF;
 8005b9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b9e:	f04f 0200 	mov.w	r2, #0
 8005ba2:	f04f 0300 	mov.w	r3, #0
 8005ba6:	0c0a      	lsrs	r2, r1, #16
 8005ba8:	2300      	movs	r3, #0
 8005baa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005bac:	3106      	adds	r1, #6
 8005bae:	6838      	ldr	r0, [r7, #0]
 8005bb0:	4401      	add	r1, r0
 8005bb2:	b2d3      	uxtb	r3, r2
 8005bb4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_velocityi.base >> (8 * 7)) & 0xFF;
 8005bb6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005bba:	f04f 0200 	mov.w	r2, #0
 8005bbe:	f04f 0300 	mov.w	r3, #0
 8005bc2:	0e0a      	lsrs	r2, r1, #24
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005bc8:	3107      	adds	r1, #7
 8005bca:	6838      	ldr	r0, [r7, #0]
 8005bcc:	4401      	add	r1, r0
 8005bce:	b2d3      	uxtb	r3, r2
 8005bd0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->velocity[i]);
 8005bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd4:	3308      	adds	r3, #8
 8005bd6:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	3301      	adds	r3, #1
 8005bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bde:	e77b      	b.n	8005ad8 <_ZNK11sensor_msgs10JointState9serializeEPh+0x274>
      }
      *(outbuffer + offset + 0) = (this->effort_length >> (8 * 0)) & 0xFF;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	4413      	add	r3, r2
 8005bea:	b2ca      	uxtb	r2, r1
 8005bec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->effort_length >> (8 * 1)) & 0xFF;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf2:	0a19      	lsrs	r1, r3, #8
 8005bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	b2ca      	uxtb	r2, r1
 8005bfe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->effort_length >> (8 * 2)) & 0xFF;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c04:	0c19      	lsrs	r1, r3, #16
 8005c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c08:	3302      	adds	r3, #2
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	b2ca      	uxtb	r2, r1
 8005c10:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->effort_length >> (8 * 3)) & 0xFF;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c16:	0e19      	lsrs	r1, r3, #24
 8005c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1a:	3303      	adds	r3, #3
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	4413      	add	r3, r2
 8005c20:	b2ca      	uxtb	r2, r1
 8005c22:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->effort_length);
 8005c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c26:	3304      	adds	r3, #4
 8005c28:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < effort_length; i++){
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d27e      	bcs.n	8005d36 <_ZNK11sensor_msgs10JointState9serializeEPh+0x4d2>
      union {
        double real;
        uint64_t base;
      } u_efforti;
      u_efforti.real = this->effort[i];
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	4413      	add	r3, r2
 8005c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c46:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_efforti.base >> (8 * 0)) & 0xFF;
 8005c4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c50:	6838      	ldr	r0, [r7, #0]
 8005c52:	4401      	add	r1, r0
 8005c54:	b2d3      	uxtb	r3, r2
 8005c56:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_efforti.base >> (8 * 1)) & 0xFF;
 8005c58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c5c:	f04f 0200 	mov.w	r2, #0
 8005c60:	f04f 0300 	mov.w	r3, #0
 8005c64:	0a02      	lsrs	r2, r0, #8
 8005c66:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005c6a:	0a0b      	lsrs	r3, r1, #8
 8005c6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c6e:	3101      	adds	r1, #1
 8005c70:	6838      	ldr	r0, [r7, #0]
 8005c72:	4401      	add	r1, r0
 8005c74:	b2d3      	uxtb	r3, r2
 8005c76:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_efforti.base >> (8 * 2)) & 0xFF;
 8005c78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c7c:	f04f 0200 	mov.w	r2, #0
 8005c80:	f04f 0300 	mov.w	r3, #0
 8005c84:	0c02      	lsrs	r2, r0, #16
 8005c86:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005c8a:	0c0b      	lsrs	r3, r1, #16
 8005c8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c8e:	3102      	adds	r1, #2
 8005c90:	6838      	ldr	r0, [r7, #0]
 8005c92:	4401      	add	r1, r0
 8005c94:	b2d3      	uxtb	r3, r2
 8005c96:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_efforti.base >> (8 * 3)) & 0xFF;
 8005c98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c9c:	f04f 0200 	mov.w	r2, #0
 8005ca0:	f04f 0300 	mov.w	r3, #0
 8005ca4:	0e02      	lsrs	r2, r0, #24
 8005ca6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005caa:	0e0b      	lsrs	r3, r1, #24
 8005cac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005cae:	3103      	adds	r1, #3
 8005cb0:	6838      	ldr	r0, [r7, #0]
 8005cb2:	4401      	add	r1, r0
 8005cb4:	b2d3      	uxtb	r3, r2
 8005cb6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_efforti.base >> (8 * 4)) & 0xFF;
 8005cb8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005cbc:	f04f 0200 	mov.w	r2, #0
 8005cc0:	f04f 0300 	mov.w	r3, #0
 8005cc4:	000a      	movs	r2, r1
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005cca:	3104      	adds	r1, #4
 8005ccc:	6838      	ldr	r0, [r7, #0]
 8005cce:	4401      	add	r1, r0
 8005cd0:	b2d3      	uxtb	r3, r2
 8005cd2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_efforti.base >> (8 * 5)) & 0xFF;
 8005cd4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005cd8:	f04f 0200 	mov.w	r2, #0
 8005cdc:	f04f 0300 	mov.w	r3, #0
 8005ce0:	0a0a      	lsrs	r2, r1, #8
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005ce6:	3105      	adds	r1, #5
 8005ce8:	6838      	ldr	r0, [r7, #0]
 8005cea:	4401      	add	r1, r0
 8005cec:	b2d3      	uxtb	r3, r2
 8005cee:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_efforti.base >> (8 * 6)) & 0xFF;
 8005cf0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005cf4:	f04f 0200 	mov.w	r2, #0
 8005cf8:	f04f 0300 	mov.w	r3, #0
 8005cfc:	0c0a      	lsrs	r2, r1, #16
 8005cfe:	2300      	movs	r3, #0
 8005d00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d02:	3106      	adds	r1, #6
 8005d04:	6838      	ldr	r0, [r7, #0]
 8005d06:	4401      	add	r1, r0
 8005d08:	b2d3      	uxtb	r3, r2
 8005d0a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_efforti.base >> (8 * 7)) & 0xFF;
 8005d0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d10:	f04f 0200 	mov.w	r2, #0
 8005d14:	f04f 0300 	mov.w	r3, #0
 8005d18:	0e0a      	lsrs	r2, r1, #24
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d1e:	3107      	adds	r1, #7
 8005d20:	6838      	ldr	r0, [r7, #0]
 8005d22:	4401      	add	r1, r0
 8005d24:	b2d3      	uxtb	r3, r2
 8005d26:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->effort[i]);
 8005d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d2a:	3308      	adds	r3, #8
 8005d2c:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < effort_length; i++){
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	3301      	adds	r3, #1
 8005d32:	627b      	str	r3, [r7, #36]	; 0x24
 8005d34:	e77b      	b.n	8005c2e <_ZNK11sensor_msgs10JointState9serializeEPh+0x3ca>
      }
      return offset;
 8005d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3738      	adds	r7, #56	; 0x38
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <_ZN11sensor_msgs10JointState11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8005d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d44:	b0c6      	sub	sp, #280	; 0x118
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 8005d4c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
    {
      int offset = 0;
 8005d50:	2300      	movs	r3, #0
 8005d52:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      offset += this->header.deserialize(inbuffer + offset);
 8005d56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d5a:	1d18      	adds	r0, r3, #4
 8005d5c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005d60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d64:	4413      	add	r3, r2
 8005d66:	4619      	mov	r1, r3
 8005d68:	f7fd fb3a 	bl	80033e0 <_ZN8std_msgs6Header11deserializeEPh>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d72:	4413      	add	r3, r2
 8005d74:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      uint32_t name_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8005d78:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005d7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d80:	4413      	add	r3, r2
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8005d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d92:	4413      	add	r3, r2
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	021a      	lsls	r2, r3, #8
 8005d98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8005da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005da6:	1c9a      	adds	r2, r3, #2
 8005da8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005dac:	4413      	add	r3, r2
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	041a      	lsls	r2, r3, #16
 8005db2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005db6:	4313      	orrs	r3, r2
 8005db8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8005dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dc0:	1cda      	adds	r2, r3, #3
 8005dc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005dc6:	4413      	add	r3, r2
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	061a      	lsls	r2, r3, #24
 8005dcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
      offset += sizeof(this->name_length);
 8005dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dda:	3304      	adds	r3, #4
 8005ddc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      if(name_lengthT > name_length)
 8005de0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005de4:	699a      	ldr	r2, [r3, #24]
 8005de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d90d      	bls.n	8005e0a <_ZN11sensor_msgs10JointState11deserializeEPh+0xca>
        this->name = (char**)realloc(this->name, name_lengthT * sizeof(char*));
 8005dee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005df2:	6a1a      	ldr	r2, [r3, #32]
 8005df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	f007 fb95 	bl	800d52c <realloc>
 8005e02:	4602      	mov	r2, r0
 8005e04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e08:	621a      	str	r2, [r3, #32]
      name_length = name_lengthT;
 8005e0a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8005e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e12:	6193      	str	r3, [r2, #24]
      for( uint32_t i = 0; i < name_length; i++){
 8005e14:	2300      	movs	r3, #0
 8005e16:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005e1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e1e:	699a      	ldr	r2, [r3, #24]
 8005e20:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d25c      	bcs.n	8005ee2 <_ZN11sensor_msgs10JointState11deserializeEPh+0x1a2>
      uint32_t length_st_name;
      arrToVar(length_st_name, (inbuffer + offset));
 8005e28:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005e2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e30:	441a      	add	r2, r3
 8005e32:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005e36:	4611      	mov	r1, r2
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f001 fc35 	bl	80076a8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8005e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e42:	3304      	adds	r3, #4
 8005e44:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      for(unsigned int k= offset; k< offset+length_st_name; ++k){
 8005e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e4c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e50:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005e54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e58:	441a      	add	r2, r3
 8005e5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d212      	bcs.n	8005e88 <_ZN11sensor_msgs10JointState11deserializeEPh+0x148>
          inbuffer[k-1]=inbuffer[k];
 8005e62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e6a:	18d1      	adds	r1, r2, r3
 8005e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e70:	1e5a      	subs	r2, r3, #1
 8005e72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e76:	441a      	add	r2, r3
 8005e78:	780b      	ldrb	r3, [r1, #0]
 8005e7a:	7013      	strb	r3, [r2, #0]
      for(unsigned int k= offset; k< offset+length_st_name; ++k){
 8005e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e80:	3301      	adds	r3, #1
 8005e82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e86:	e7e3      	b.n	8005e50 <_ZN11sensor_msgs10JointState11deserializeEPh+0x110>
      }
      inbuffer[offset+length_st_name-1]=0;
 8005e88:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005e8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e90:	4413      	add	r3, r2
 8005e92:	1e5a      	subs	r2, r3, #1
 8005e94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e98:	441a      	add	r2, r3
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	7013      	strb	r3, [r2, #0]
      this->st_name = (char *)(inbuffer + offset-1);
 8005e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ea2:	1e5a      	subs	r2, r3, #1
 8005ea4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ea8:	441a      	add	r2, r3
 8005eaa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005eae:	61da      	str	r2, [r3, #28]
      offset += length_st_name;
 8005eb0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005eb4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005eb8:	4413      	add	r3, r2
 8005eba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        memcpy( &(this->name[i]), &(this->st_name), sizeof(char*));
 8005ebe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ec2:	6a1a      	ldr	r2, [r3, #32]
 8005ec4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	441a      	add	r2, r3
 8005ecc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ed0:	331c      	adds	r3, #28
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6013      	str	r3, [r2, #0]
      for( uint32_t i = 0; i < name_length; i++){
 8005ed6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005eda:	3301      	adds	r3, #1
 8005edc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005ee0:	e79b      	b.n	8005e1a <_ZN11sensor_msgs10JointState11deserializeEPh+0xda>
      }
      uint32_t position_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8005ee2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005ee6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005eea:	4413      	add	r3, r2
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8005ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005efc:	4413      	add	r3, r2
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	021a      	lsls	r2, r3, #8
 8005f02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f06:	4313      	orrs	r3, r2
 8005f08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8005f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f10:	1c9a      	adds	r2, r3, #2
 8005f12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f16:	4413      	add	r3, r2
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	041a      	lsls	r2, r3, #16
 8005f1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f20:	4313      	orrs	r3, r2
 8005f22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8005f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f2a:	1cda      	adds	r2, r3, #3
 8005f2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f30:	4413      	add	r3, r2
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	061a      	lsls	r2, r3, #24
 8005f36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
      offset += sizeof(this->position_length);
 8005f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f44:	3304      	adds	r3, #4
 8005f46:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      if(position_lengthT > position_length)
 8005f4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d90d      	bls.n	8005f74 <_ZN11sensor_msgs10JointState11deserializeEPh+0x234>
        this->position = (double*)realloc(this->position, position_lengthT * sizeof(double));
 8005f58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	4619      	mov	r1, r3
 8005f66:	4610      	mov	r0, r2
 8005f68:	f007 fae0 	bl	800d52c <realloc>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f72:	631a      	str	r2, [r3, #48]	; 0x30
      position_length = position_lengthT;
 8005f74:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8005f78:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f7c:	6253      	str	r3, [r2, #36]	; 0x24
      for( uint32_t i = 0; i < position_length; i++){
 8005f7e:	2300      	movs	r3, #0
 8005f80:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005f84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	f080 810f 	bcs.w	80061b2 <_ZN11sensor_msgs10JointState11deserializeEPh+0x472>
      union {
        double real;
        uint64_t base;
      } u_st_position;
      u_st_position.base = 0;
 8005f94:	f04f 0200 	mov.w	r2, #0
 8005f98:	f04f 0300 	mov.w	r3, #0
 8005f9c:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005fa0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005fa4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005fa8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fac:	4413      	add	r3, r2
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	f04f 0300 	mov.w	r3, #0
 8005fb6:	ea40 0402 	orr.w	r4, r0, r2
 8005fba:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8005fbe:	430b      	orrs	r3, r1
 8005fc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fc4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8005fc8:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005fcc:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8005fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fda:	4413      	add	r3, r2
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	f04f 0300 	mov.w	r3, #0
 8005fe4:	f04f 0000 	mov.w	r0, #0
 8005fe8:	f04f 0100 	mov.w	r1, #0
 8005fec:	0219      	lsls	r1, r3, #8
 8005fee:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8005ff2:	0210      	lsls	r0, r2, #8
 8005ff4:	ea44 0300 	orr.w	r3, r4, r0
 8005ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ffc:	ea45 0301 	orr.w	r3, r5, r1
 8006000:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006004:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8006008:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800600c:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8006010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006014:	1c9a      	adds	r2, r3, #2
 8006016:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800601a:	4413      	add	r3, r2
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	b2da      	uxtb	r2, r3
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	f04f 0000 	mov.w	r0, #0
 8006028:	f04f 0100 	mov.w	r1, #0
 800602c:	0419      	lsls	r1, r3, #16
 800602e:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8006032:	0410      	lsls	r0, r2, #16
 8006034:	ea44 0300 	orr.w	r3, r4, r0
 8006038:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800603c:	ea45 0301 	orr.w	r3, r5, r1
 8006040:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006044:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8006048:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800604c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006054:	1cda      	adds	r2, r3, #3
 8006056:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800605a:	4413      	add	r3, r2
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	b2da      	uxtb	r2, r3
 8006060:	f04f 0300 	mov.w	r3, #0
 8006064:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8006068:	ea4f 6802 	mov.w	r8, r2, lsl #24
 800606c:	ea40 0308 	orr.w	r3, r0, r8
 8006070:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006074:	ea41 0309 	orr.w	r3, r1, r9
 8006078:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800607c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8006080:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006084:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8006088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800608c:	1d1a      	adds	r2, r3, #4
 800608e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006092:	4413      	add	r3, r2
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	b2da      	uxtb	r2, r3
 8006098:	f04f 0300 	mov.w	r3, #0
 800609c:	f04f 0000 	mov.w	r0, #0
 80060a0:	f04f 0100 	mov.w	r1, #0
 80060a4:	0011      	movs	r1, r2
 80060a6:	2000      	movs	r0, #0
 80060a8:	ea44 0300 	orr.w	r3, r4, r0
 80060ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060b0:	ea45 0301 	orr.w	r3, r5, r1
 80060b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80060b8:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80060bc:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80060c0:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80060c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060c8:	1d5a      	adds	r2, r3, #5
 80060ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060ce:	4413      	add	r3, r2
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	f04f 0000 	mov.w	r0, #0
 80060dc:	f04f 0100 	mov.w	r1, #0
 80060e0:	0211      	lsls	r1, r2, #8
 80060e2:	2000      	movs	r0, #0
 80060e4:	ea44 0300 	orr.w	r3, r4, r0
 80060e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060ec:	ea45 0301 	orr.w	r3, r5, r1
 80060f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060f4:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80060f8:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80060fc:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8006100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006104:	1d9a      	adds	r2, r3, #6
 8006106:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800610a:	4413      	add	r3, r2
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	b2da      	uxtb	r2, r3
 8006110:	f04f 0300 	mov.w	r3, #0
 8006114:	f04f 0000 	mov.w	r0, #0
 8006118:	f04f 0100 	mov.w	r1, #0
 800611c:	0411      	lsls	r1, r2, #16
 800611e:	2000      	movs	r0, #0
 8006120:	ea44 0300 	orr.w	r3, r4, r0
 8006124:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006128:	ea45 0301 	orr.w	r3, r5, r1
 800612c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006130:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8006134:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006138:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800613c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006140:	1dda      	adds	r2, r3, #7
 8006142:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006146:	4413      	add	r3, r2
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	b2da      	uxtb	r2, r3
 800614c:	f04f 0300 	mov.w	r3, #0
 8006150:	f04f 0000 	mov.w	r0, #0
 8006154:	f04f 0100 	mov.w	r1, #0
 8006158:	0611      	lsls	r1, r2, #24
 800615a:	2000      	movs	r0, #0
 800615c:	ea44 0300 	orr.w	r3, r4, r0
 8006160:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006164:	ea45 0301 	orr.w	r3, r5, r1
 8006168:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800616c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8006170:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      this->st_position = u_st_position.real;
 8006174:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006178:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800617c:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
      offset += sizeof(this->st_position);
 8006180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006184:	3308      	adds	r3, #8
 8006186:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        memcpy( &(this->position[i]), &(this->st_position), sizeof(double));
 800618a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800618e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006190:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	18d0      	adds	r0, r2, r3
 8006198:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800619c:	3328      	adds	r3, #40	; 0x28
 800619e:	2208      	movs	r2, #8
 80061a0:	4619      	mov	r1, r3
 80061a2:	f007 f903 	bl	800d3ac <memcpy>
      for( uint32_t i = 0; i < position_length; i++){
 80061a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061aa:	3301      	adds	r3, #1
 80061ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80061b0:	e6e8      	b.n	8005f84 <_ZN11sensor_msgs10JointState11deserializeEPh+0x244>
      }
      uint32_t velocity_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80061b2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80061b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061ba:	4413      	add	r3, r2
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80061c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061cc:	4413      	add	r3, r2
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	021a      	lsls	r2, r3, #8
 80061d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80061dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061e0:	1c9a      	adds	r2, r3, #2
 80061e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061e6:	4413      	add	r3, r2
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	041a      	lsls	r2, r3, #16
 80061ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f0:	4313      	orrs	r3, r2
 80061f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80061f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061fa:	1cda      	adds	r2, r3, #3
 80061fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006200:	4413      	add	r3, r2
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	061a      	lsls	r2, r3, #24
 8006206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800620a:	4313      	orrs	r3, r2
 800620c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      offset += sizeof(this->velocity_length);
 8006210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006214:	3304      	adds	r3, #4
 8006216:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      if(velocity_lengthT > velocity_length)
 800621a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800621e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006224:	4293      	cmp	r3, r2
 8006226:	d90d      	bls.n	8006244 <_ZN11sensor_msgs10JointState11deserializeEPh+0x504>
        this->velocity = (double*)realloc(this->velocity, velocity_lengthT * sizeof(double));
 8006228:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800622c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800622e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006232:	00db      	lsls	r3, r3, #3
 8006234:	4619      	mov	r1, r3
 8006236:	4610      	mov	r0, r2
 8006238:	f007 f978 	bl	800d52c <realloc>
 800623c:	4602      	mov	r2, r0
 800623e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006242:	641a      	str	r2, [r3, #64]	; 0x40
      velocity_length = velocity_lengthT;
 8006244:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8006248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624c:	6353      	str	r3, [r2, #52]	; 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 800624e:	2300      	movs	r3, #0
 8006250:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006254:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800625a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800625e:	4293      	cmp	r3, r2
 8006260:	f080 8101 	bcs.w	8006466 <_ZN11sensor_msgs10JointState11deserializeEPh+0x726>
      union {
        double real;
        uint64_t base;
      } u_st_velocity;
      u_st_velocity.base = 0;
 8006264:	f04f 0200 	mov.w	r2, #0
 8006268:	f04f 0300 	mov.w	r3, #0
 800626c:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006270:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006274:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006278:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800627c:	4413      	add	r3, r2
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	b2da      	uxtb	r2, r3
 8006282:	f04f 0300 	mov.w	r3, #0
 8006286:	ea40 0402 	orr.w	r4, r0, r2
 800628a:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 800628e:	430b      	orrs	r3, r1
 8006290:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006294:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8006298:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800629c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80062a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a4:	1c5a      	adds	r2, r3, #1
 80062a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062aa:	4413      	add	r3, r2
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	f04f 0300 	mov.w	r3, #0
 80062b4:	f04f 0000 	mov.w	r0, #0
 80062b8:	f04f 0100 	mov.w	r1, #0
 80062bc:	0219      	lsls	r1, r3, #8
 80062be:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80062c2:	0210      	lsls	r0, r2, #8
 80062c4:	ea44 0300 	orr.w	r3, r4, r0
 80062c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80062ca:	ea45 0301 	orr.w	r3, r5, r1
 80062ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80062d0:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80062d4:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80062d8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80062dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062e0:	1c9a      	adds	r2, r3, #2
 80062e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062e6:	4413      	add	r3, r2
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	f04f 0300 	mov.w	r3, #0
 80062f0:	f04f 0000 	mov.w	r0, #0
 80062f4:	f04f 0100 	mov.w	r1, #0
 80062f8:	0419      	lsls	r1, r3, #16
 80062fa:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80062fe:	0410      	lsls	r0, r2, #16
 8006300:	ea44 0300 	orr.w	r3, r4, r0
 8006304:	673b      	str	r3, [r7, #112]	; 0x70
 8006306:	ea45 0301 	orr.w	r3, r5, r1
 800630a:	677b      	str	r3, [r7, #116]	; 0x74
 800630c:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8006310:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006314:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800631c:	1cda      	adds	r2, r3, #3
 800631e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006322:	4413      	add	r3, r2
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	b2da      	uxtb	r2, r3
 8006328:	f04f 0300 	mov.w	r3, #0
 800632c:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 8006330:	ea4f 6a02 	mov.w	sl, r2, lsl #24
 8006334:	ea40 030a 	orr.w	r3, r0, sl
 8006338:	66bb      	str	r3, [r7, #104]	; 0x68
 800633a:	ea41 030b 	orr.w	r3, r1, fp
 800633e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006340:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006344:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006348:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800634c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006350:	1d1a      	adds	r2, r3, #4
 8006352:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006356:	4413      	add	r3, r2
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	b2da      	uxtb	r2, r3
 800635c:	f04f 0300 	mov.w	r3, #0
 8006360:	f04f 0000 	mov.w	r0, #0
 8006364:	f04f 0100 	mov.w	r1, #0
 8006368:	0011      	movs	r1, r2
 800636a:	2000      	movs	r0, #0
 800636c:	ea44 0300 	orr.w	r3, r4, r0
 8006370:	663b      	str	r3, [r7, #96]	; 0x60
 8006372:	ea45 0301 	orr.w	r3, r5, r1
 8006376:	667b      	str	r3, [r7, #100]	; 0x64
 8006378:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800637c:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006380:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8006384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006388:	1d5a      	adds	r2, r3, #5
 800638a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800638e:	4413      	add	r3, r2
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	b2da      	uxtb	r2, r3
 8006394:	f04f 0300 	mov.w	r3, #0
 8006398:	f04f 0000 	mov.w	r0, #0
 800639c:	f04f 0100 	mov.w	r1, #0
 80063a0:	0211      	lsls	r1, r2, #8
 80063a2:	2000      	movs	r0, #0
 80063a4:	ea44 0300 	orr.w	r3, r4, r0
 80063a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80063aa:	ea45 0301 	orr.w	r3, r5, r1
 80063ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063b0:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80063b4:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80063b8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80063bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063c0:	1d9a      	adds	r2, r3, #6
 80063c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063c6:	4413      	add	r3, r2
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	b2da      	uxtb	r2, r3
 80063cc:	f04f 0300 	mov.w	r3, #0
 80063d0:	f04f 0000 	mov.w	r0, #0
 80063d4:	f04f 0100 	mov.w	r1, #0
 80063d8:	0411      	lsls	r1, r2, #16
 80063da:	2000      	movs	r0, #0
 80063dc:	ea44 0300 	orr.w	r3, r4, r0
 80063e0:	653b      	str	r3, [r7, #80]	; 0x50
 80063e2:	ea45 0301 	orr.w	r3, r5, r1
 80063e6:	657b      	str	r3, [r7, #84]	; 0x54
 80063e8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80063ec:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80063f0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80063f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063f8:	1dda      	adds	r2, r3, #7
 80063fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063fe:	4413      	add	r3, r2
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	b2da      	uxtb	r2, r3
 8006404:	f04f 0300 	mov.w	r3, #0
 8006408:	f04f 0000 	mov.w	r0, #0
 800640c:	f04f 0100 	mov.w	r1, #0
 8006410:	0611      	lsls	r1, r2, #24
 8006412:	2000      	movs	r0, #0
 8006414:	ea44 0300 	orr.w	r3, r4, r0
 8006418:	64bb      	str	r3, [r7, #72]	; 0x48
 800641a:	ea45 0301 	orr.w	r3, r5, r1
 800641e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006420:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8006424:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      this->st_velocity = u_st_velocity.real;
 8006428:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800642c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006430:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
      offset += sizeof(this->st_velocity);
 8006434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006438:	3308      	adds	r3, #8
 800643a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        memcpy( &(this->velocity[i]), &(this->st_velocity), sizeof(double));
 800643e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006442:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	18d0      	adds	r0, r2, r3
 800644c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006450:	3338      	adds	r3, #56	; 0x38
 8006452:	2208      	movs	r2, #8
 8006454:	4619      	mov	r1, r3
 8006456:	f006 ffa9 	bl	800d3ac <memcpy>
      for( uint32_t i = 0; i < velocity_length; i++){
 800645a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800645e:	3301      	adds	r3, #1
 8006460:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006464:	e6f6      	b.n	8006254 <_ZN11sensor_msgs10JointState11deserializeEPh+0x514>
      }
      uint32_t effort_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8006466:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800646a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800646e:	4413      	add	r3, r2
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8006476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006480:	4413      	add	r3, r2
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	021a      	lsls	r2, r3, #8
 8006486:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800648a:	4313      	orrs	r3, r2
 800648c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8006490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006494:	1c9a      	adds	r2, r3, #2
 8006496:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800649a:	4413      	add	r3, r2
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	041a      	lsls	r2, r3, #16
 80064a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80064a4:	4313      	orrs	r3, r2
 80064a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80064aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ae:	1cda      	adds	r2, r3, #3
 80064b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064b4:	4413      	add	r3, r2
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	061a      	lsls	r2, r3, #24
 80064ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80064be:	4313      	orrs	r3, r2
 80064c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      offset += sizeof(this->effort_length);
 80064c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064c8:	3304      	adds	r3, #4
 80064ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      if(effort_lengthT > effort_length)
 80064ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80064d8:	4293      	cmp	r3, r2
 80064da:	d90d      	bls.n	80064f8 <_ZN11sensor_msgs10JointState11deserializeEPh+0x7b8>
        this->effort = (double*)realloc(this->effort, effort_lengthT * sizeof(double));
 80064dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80064e6:	00db      	lsls	r3, r3, #3
 80064e8:	4619      	mov	r1, r3
 80064ea:	4610      	mov	r0, r2
 80064ec:	f007 f81e 	bl	800d52c <realloc>
 80064f0:	4602      	mov	r2, r0
 80064f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064f6:	651a      	str	r2, [r3, #80]	; 0x50
      effort_length = effort_lengthT;
 80064f8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80064fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006500:	6453      	str	r3, [r2, #68]	; 0x44
      for( uint32_t i = 0; i < effort_length; i++){
 8006502:	2300      	movs	r3, #0
 8006504:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006508:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800650c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800650e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006512:	4293      	cmp	r3, r2
 8006514:	f080 8101 	bcs.w	800671a <_ZN11sensor_msgs10JointState11deserializeEPh+0x9da>
      union {
        double real;
        uint64_t base;
      } u_st_effort;
      u_st_effort.base = 0;
 8006518:	f04f 0200 	mov.w	r2, #0
 800651c:	f04f 0300 	mov.w	r3, #0
 8006520:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006524:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8006528:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800652c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006530:	4413      	add	r3, r2
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	b2da      	uxtb	r2, r3
 8006536:	f04f 0300 	mov.w	r3, #0
 800653a:	ea40 0402 	orr.w	r4, r0, r2
 800653e:	643c      	str	r4, [r7, #64]	; 0x40
 8006540:	430b      	orrs	r3, r1
 8006542:	647b      	str	r3, [r7, #68]	; 0x44
 8006544:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8006548:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800654c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8006550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800655a:	4413      	add	r3, r2
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	b2da      	uxtb	r2, r3
 8006560:	f04f 0300 	mov.w	r3, #0
 8006564:	f04f 0000 	mov.w	r0, #0
 8006568:	f04f 0100 	mov.w	r1, #0
 800656c:	0219      	lsls	r1, r3, #8
 800656e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8006572:	0210      	lsls	r0, r2, #8
 8006574:	ea44 0300 	orr.w	r3, r4, r0
 8006578:	63bb      	str	r3, [r7, #56]	; 0x38
 800657a:	ea45 0301 	orr.w	r3, r5, r1
 800657e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006580:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8006584:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006588:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800658c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006590:	1c9a      	adds	r2, r3, #2
 8006592:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006596:	4413      	add	r3, r2
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	b2da      	uxtb	r2, r3
 800659c:	f04f 0300 	mov.w	r3, #0
 80065a0:	f04f 0000 	mov.w	r0, #0
 80065a4:	f04f 0100 	mov.w	r1, #0
 80065a8:	0419      	lsls	r1, r3, #16
 80065aa:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80065ae:	0410      	lsls	r0, r2, #16
 80065b0:	ea44 0300 	orr.w	r3, r4, r0
 80065b4:	633b      	str	r3, [r7, #48]	; 0x30
 80065b6:	ea45 0301 	orr.w	r3, r5, r1
 80065ba:	637b      	str	r3, [r7, #52]	; 0x34
 80065bc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80065c0:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80065c4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80065c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065cc:	1cda      	adds	r2, r3, #3
 80065ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065d2:	4413      	add	r3, r2
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	f04f 0300 	mov.w	r3, #0
 80065dc:	0a14      	lsrs	r4, r2, #8
 80065de:	62fc      	str	r4, [r7, #44]	; 0x2c
 80065e0:	0613      	lsls	r3, r2, #24
 80065e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80065e4:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80065e8:	4623      	mov	r3, r4
 80065ea:	4303      	orrs	r3, r0
 80065ec:	623b      	str	r3, [r7, #32]
 80065ee:	462b      	mov	r3, r5
 80065f0:	430b      	orrs	r3, r1
 80065f2:	627b      	str	r3, [r7, #36]	; 0x24
 80065f4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80065f8:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80065fc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8006600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006604:	1d1a      	adds	r2, r3, #4
 8006606:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800660a:	4413      	add	r3, r2
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	b2da      	uxtb	r2, r3
 8006610:	f04f 0300 	mov.w	r3, #0
 8006614:	f04f 0000 	mov.w	r0, #0
 8006618:	f04f 0100 	mov.w	r1, #0
 800661c:	0011      	movs	r1, r2
 800661e:	2000      	movs	r0, #0
 8006620:	ea44 0300 	orr.w	r3, r4, r0
 8006624:	61bb      	str	r3, [r7, #24]
 8006626:	ea45 0301 	orr.w	r3, r5, r1
 800662a:	61fb      	str	r3, [r7, #28]
 800662c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8006630:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006634:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8006638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800663c:	1d5a      	adds	r2, r3, #5
 800663e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006642:	4413      	add	r3, r2
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	b2da      	uxtb	r2, r3
 8006648:	f04f 0300 	mov.w	r3, #0
 800664c:	f04f 0000 	mov.w	r0, #0
 8006650:	f04f 0100 	mov.w	r1, #0
 8006654:	0211      	lsls	r1, r2, #8
 8006656:	2000      	movs	r0, #0
 8006658:	ea44 0300 	orr.w	r3, r4, r0
 800665c:	613b      	str	r3, [r7, #16]
 800665e:	ea45 0301 	orr.w	r3, r5, r1
 8006662:	617b      	str	r3, [r7, #20]
 8006664:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006668:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800666c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8006670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006674:	1d9a      	adds	r2, r3, #6
 8006676:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800667a:	4413      	add	r3, r2
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	b2da      	uxtb	r2, r3
 8006680:	f04f 0300 	mov.w	r3, #0
 8006684:	f04f 0000 	mov.w	r0, #0
 8006688:	f04f 0100 	mov.w	r1, #0
 800668c:	0411      	lsls	r1, r2, #16
 800668e:	2000      	movs	r0, #0
 8006690:	ea44 0300 	orr.w	r3, r4, r0
 8006694:	60bb      	str	r3, [r7, #8]
 8006696:	ea45 0301 	orr.w	r3, r5, r1
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80066a0:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80066a4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80066a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ac:	1dda      	adds	r2, r3, #7
 80066ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066b2:	4413      	add	r3, r2
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	f04f 0300 	mov.w	r3, #0
 80066bc:	f04f 0000 	mov.w	r0, #0
 80066c0:	f04f 0100 	mov.w	r1, #0
 80066c4:	0611      	lsls	r1, r2, #24
 80066c6:	2000      	movs	r0, #0
 80066c8:	ea44 0300 	orr.w	r3, r4, r0
 80066cc:	603b      	str	r3, [r7, #0]
 80066ce:	ea45 0301 	orr.w	r3, r5, r1
 80066d2:	607b      	str	r3, [r7, #4]
 80066d4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80066d8:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      this->st_effort = u_st_effort.real;
 80066dc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80066e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066e4:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
      offset += sizeof(this->st_effort);
 80066e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ec:	3308      	adds	r3, #8
 80066ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        memcpy( &(this->effort[i]), &(this->st_effort), sizeof(double));
 80066f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066fc:	00db      	lsls	r3, r3, #3
 80066fe:	18d0      	adds	r0, r2, r3
 8006700:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006704:	3348      	adds	r3, #72	; 0x48
 8006706:	2208      	movs	r2, #8
 8006708:	4619      	mov	r1, r3
 800670a:	f006 fe4f 	bl	800d3ac <memcpy>
      for( uint32_t i = 0; i < effort_length; i++){
 800670e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006712:	3301      	adds	r3, #1
 8006714:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006718:	e6f6      	b.n	8006508 <_ZN11sensor_msgs10JointState11deserializeEPh+0x7c8>
      }
     return offset;
 800671a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    }
 800671e:	4618      	mov	r0, r3
 8006720:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8006724:	46bd      	mov	sp, r7
 8006726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800672c <_ZN11sensor_msgs10JointState7getTypeEv>:

    const char * getType(){ return "sensor_msgs/JointState"; };
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	4b03      	ldr	r3, [pc, #12]	; (8006744 <_ZN11sensor_msgs10JointState7getTypeEv+0x18>)
 8006736:	4618      	mov	r0, r3
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	0800d9f8 	.word	0x0800d9f8

08006748 <_ZN11sensor_msgs10JointState6getMD5Ev>:
    const char * getMD5(){ return "3066dcd76a6cfaef579bd0f34173e9fd"; };
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	4b03      	ldr	r3, [pc, #12]	; (8006760 <_ZN11sensor_msgs10JointState6getMD5Ev+0x18>)
 8006752:	4618      	mov	r0, r3
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	0800da10 	.word	0x0800da10

08006764 <_ZN11sensor_msgs3ImuC1Ev>:
      double angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      double linear_acceleration_covariance[9];

    Imu():
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4618      	mov	r0, r3
 8006770:	f7fb f834 	bl	80017dc <_ZN3ros3MsgC1Ev>
 8006774:	4a24      	ldr	r2, [pc, #144]	; (8006808 <_ZN11sensor_msgs3ImuC1Ev+0xa4>)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	3304      	adds	r3, #4
 800677e:	4618      	mov	r0, r3
 8006780:	f7fc fd76 	bl	8003270 <_ZN8std_msgs6HeaderC1Ev>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	3318      	adds	r3, #24
 8006788:	4618      	mov	r0, r3
 800678a:	f7fc ff05 	bl	8003598 <_ZN13geometry_msgs10QuaternionC1Ev>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006794:	2308      	movs	r3, #8
 8006796:	2b00      	cmp	r3, #0
 8006798:	db08      	blt.n	80067ac <_ZN11sensor_msgs3ImuC1Ev+0x48>
 800679a:	f04f 0000 	mov.w	r0, #0
 800679e:	f04f 0100 	mov.w	r1, #0
 80067a2:	e9c2 0100 	strd	r0, r1, [r2]
 80067a6:	3208      	adds	r2, #8
 80067a8:	3b01      	subs	r3, #1
 80067aa:	e7f4      	b.n	8006796 <_ZN11sensor_msgs3ImuC1Ev+0x32>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	3388      	adds	r3, #136	; 0x88
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7fc f845 	bl	8002840 <_ZN13geometry_msgs7Vector3C1Ev>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 80067bc:	2308      	movs	r3, #8
 80067be:	2b00      	cmp	r3, #0
 80067c0:	db08      	blt.n	80067d4 <_ZN11sensor_msgs3ImuC1Ev+0x70>
 80067c2:	f04f 0000 	mov.w	r0, #0
 80067c6:	f04f 0100 	mov.w	r1, #0
 80067ca:	e9c2 0100 	strd	r0, r1, [r2]
 80067ce:	3208      	adds	r2, #8
 80067d0:	3b01      	subs	r3, #1
 80067d2:	e7f4      	b.n	80067be <_ZN11sensor_msgs3ImuC1Ev+0x5a>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	33f0      	adds	r3, #240	; 0xf0
 80067d8:	4618      	mov	r0, r3
 80067da:	f7fc f831 	bl	8002840 <_ZN13geometry_msgs7Vector3C1Ev>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f503 7288 	add.w	r2, r3, #272	; 0x110
 80067e4:	2308      	movs	r3, #8
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	db08      	blt.n	80067fc <_ZN11sensor_msgs3ImuC1Ev+0x98>
 80067ea:	f04f 0000 	mov.w	r0, #0
 80067ee:	f04f 0100 	mov.w	r1, #0
 80067f2:	e9c2 0100 	strd	r0, r1, [r2]
 80067f6:	3208      	adds	r2, #8
 80067f8:	3b01      	subs	r3, #1
 80067fa:	e7f4      	b.n	80067e6 <_ZN11sensor_msgs3ImuC1Ev+0x82>
    {
    }
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4618      	mov	r0, r3
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	0800db74 	.word	0x0800db74

0800680c <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800680c:	b580      	push	{r7, lr}
 800680e:	b08c      	sub	sp, #48	; 0x30
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006816:	2300      	movs	r3, #0
 8006818:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->header.serialize(outbuffer + offset);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	1d18      	adds	r0, r3, #4
 800681e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	4413      	add	r3, r2
 8006824:	4619      	mov	r1, r3
 8006826:	f7fc fd43 	bl	80032b0 <_ZNK8std_msgs6Header9serializeEPh>
 800682a:	4602      	mov	r2, r0
 800682c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682e:	4413      	add	r3, r2
 8006830:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->orientation.serialize(outbuffer + offset);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f103 0018 	add.w	r0, r3, #24
 8006838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	4413      	add	r3, r2
 800683e:	4619      	mov	r1, r3
 8006840:	f7fc fed8 	bl	80035f4 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8006844:	4602      	mov	r2, r0
 8006846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006848:	4413      	add	r3, r2
 800684a:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 800684c:	2300      	movs	r3, #0
 800684e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006852:	2b08      	cmp	r3, #8
 8006854:	d87e      	bhi.n	8006954 <_ZNK11sensor_msgs3Imu9serializeEPh+0x148>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.real = this->orientation_covariance[i];
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685a:	3308      	adds	r3, #8
 800685c:	00db      	lsls	r3, r3, #3
 800685e:	4413      	add	r3, r2
 8006860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006864:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_orientation_covariancei.base >> (8 * 0)) & 0xFF;
 8006868:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800686c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800686e:	6838      	ldr	r0, [r7, #0]
 8006870:	4401      	add	r1, r0
 8006872:	b2d3      	uxtb	r3, r2
 8006874:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_orientation_covariancei.base >> (8 * 1)) & 0xFF;
 8006876:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800687a:	f04f 0200 	mov.w	r2, #0
 800687e:	f04f 0300 	mov.w	r3, #0
 8006882:	0a02      	lsrs	r2, r0, #8
 8006884:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8006888:	0a0b      	lsrs	r3, r1, #8
 800688a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800688c:	3101      	adds	r1, #1
 800688e:	6838      	ldr	r0, [r7, #0]
 8006890:	4401      	add	r1, r0
 8006892:	b2d3      	uxtb	r3, r2
 8006894:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_orientation_covariancei.base >> (8 * 2)) & 0xFF;
 8006896:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800689a:	f04f 0200 	mov.w	r2, #0
 800689e:	f04f 0300 	mov.w	r3, #0
 80068a2:	0c02      	lsrs	r2, r0, #16
 80068a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80068a8:	0c0b      	lsrs	r3, r1, #16
 80068aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068ac:	3102      	adds	r1, #2
 80068ae:	6838      	ldr	r0, [r7, #0]
 80068b0:	4401      	add	r1, r0
 80068b2:	b2d3      	uxtb	r3, r2
 80068b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_orientation_covariancei.base >> (8 * 3)) & 0xFF;
 80068b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80068ba:	f04f 0200 	mov.w	r2, #0
 80068be:	f04f 0300 	mov.w	r3, #0
 80068c2:	0e02      	lsrs	r2, r0, #24
 80068c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80068c8:	0e0b      	lsrs	r3, r1, #24
 80068ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068cc:	3103      	adds	r1, #3
 80068ce:	6838      	ldr	r0, [r7, #0]
 80068d0:	4401      	add	r1, r0
 80068d2:	b2d3      	uxtb	r3, r2
 80068d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_orientation_covariancei.base >> (8 * 4)) & 0xFF;
 80068d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80068da:	f04f 0200 	mov.w	r2, #0
 80068de:	f04f 0300 	mov.w	r3, #0
 80068e2:	000a      	movs	r2, r1
 80068e4:	2300      	movs	r3, #0
 80068e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068e8:	3104      	adds	r1, #4
 80068ea:	6838      	ldr	r0, [r7, #0]
 80068ec:	4401      	add	r1, r0
 80068ee:	b2d3      	uxtb	r3, r2
 80068f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_orientation_covariancei.base >> (8 * 5)) & 0xFF;
 80068f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80068f6:	f04f 0200 	mov.w	r2, #0
 80068fa:	f04f 0300 	mov.w	r3, #0
 80068fe:	0a0a      	lsrs	r2, r1, #8
 8006900:	2300      	movs	r3, #0
 8006902:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006904:	3105      	adds	r1, #5
 8006906:	6838      	ldr	r0, [r7, #0]
 8006908:	4401      	add	r1, r0
 800690a:	b2d3      	uxtb	r3, r2
 800690c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_orientation_covariancei.base >> (8 * 6)) & 0xFF;
 800690e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006912:	f04f 0200 	mov.w	r2, #0
 8006916:	f04f 0300 	mov.w	r3, #0
 800691a:	0c0a      	lsrs	r2, r1, #16
 800691c:	2300      	movs	r3, #0
 800691e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006920:	3106      	adds	r1, #6
 8006922:	6838      	ldr	r0, [r7, #0]
 8006924:	4401      	add	r1, r0
 8006926:	b2d3      	uxtb	r3, r2
 8006928:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_orientation_covariancei.base >> (8 * 7)) & 0xFF;
 800692a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800692e:	f04f 0200 	mov.w	r2, #0
 8006932:	f04f 0300 	mov.w	r3, #0
 8006936:	0e0a      	lsrs	r2, r1, #24
 8006938:	2300      	movs	r3, #0
 800693a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800693c:	3107      	adds	r1, #7
 800693e:	6838      	ldr	r0, [r7, #0]
 8006940:	4401      	add	r1, r0
 8006942:	b2d3      	uxtb	r3, r2
 8006944:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->orientation_covariance[i]);
 8006946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006948:	3308      	adds	r3, #8
 800694a:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 800694c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694e:	3301      	adds	r3, #1
 8006950:	62bb      	str	r3, [r7, #40]	; 0x28
 8006952:	e77d      	b.n	8006850 <_ZNK11sensor_msgs3Imu9serializeEPh+0x44>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800695a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	4413      	add	r3, r2
 8006960:	4619      	mov	r1, r3
 8006962:	f7fb ff95 	bl	8002890 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8006966:	4602      	mov	r2, r0
 8006968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696a:	4413      	add	r3, r2
 800696c:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 800696e:	2300      	movs	r3, #0
 8006970:	627b      	str	r3, [r7, #36]	; 0x24
 8006972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006974:	2b08      	cmp	r3, #8
 8006976:	d87e      	bhi.n	8006a76 <_ZNK11sensor_msgs3Imu9serializeEPh+0x26a>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.real = this->angular_velocity_covariance[i];
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	3315      	adds	r3, #21
 800697e:	00db      	lsls	r3, r3, #3
 8006980:	4413      	add	r3, r2
 8006982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006986:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_angular_velocity_covariancei.base >> (8 * 0)) & 0xFF;
 800698a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800698e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006990:	6838      	ldr	r0, [r7, #0]
 8006992:	4401      	add	r1, r0
 8006994:	b2d3      	uxtb	r3, r2
 8006996:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_angular_velocity_covariancei.base >> (8 * 1)) & 0xFF;
 8006998:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800699c:	f04f 0200 	mov.w	r2, #0
 80069a0:	f04f 0300 	mov.w	r3, #0
 80069a4:	0a02      	lsrs	r2, r0, #8
 80069a6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80069aa:	0a0b      	lsrs	r3, r1, #8
 80069ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069ae:	3101      	adds	r1, #1
 80069b0:	6838      	ldr	r0, [r7, #0]
 80069b2:	4401      	add	r1, r0
 80069b4:	b2d3      	uxtb	r3, r2
 80069b6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_angular_velocity_covariancei.base >> (8 * 2)) & 0xFF;
 80069b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80069bc:	f04f 0200 	mov.w	r2, #0
 80069c0:	f04f 0300 	mov.w	r3, #0
 80069c4:	0c02      	lsrs	r2, r0, #16
 80069c6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80069ca:	0c0b      	lsrs	r3, r1, #16
 80069cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069ce:	3102      	adds	r1, #2
 80069d0:	6838      	ldr	r0, [r7, #0]
 80069d2:	4401      	add	r1, r0
 80069d4:	b2d3      	uxtb	r3, r2
 80069d6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_angular_velocity_covariancei.base >> (8 * 3)) & 0xFF;
 80069d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80069dc:	f04f 0200 	mov.w	r2, #0
 80069e0:	f04f 0300 	mov.w	r3, #0
 80069e4:	0e02      	lsrs	r2, r0, #24
 80069e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80069ea:	0e0b      	lsrs	r3, r1, #24
 80069ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069ee:	3103      	adds	r1, #3
 80069f0:	6838      	ldr	r0, [r7, #0]
 80069f2:	4401      	add	r1, r0
 80069f4:	b2d3      	uxtb	r3, r2
 80069f6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_angular_velocity_covariancei.base >> (8 * 4)) & 0xFF;
 80069f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80069fc:	f04f 0200 	mov.w	r2, #0
 8006a00:	f04f 0300 	mov.w	r3, #0
 8006a04:	000a      	movs	r2, r1
 8006a06:	2300      	movs	r3, #0
 8006a08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a0a:	3104      	adds	r1, #4
 8006a0c:	6838      	ldr	r0, [r7, #0]
 8006a0e:	4401      	add	r1, r0
 8006a10:	b2d3      	uxtb	r3, r2
 8006a12:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_angular_velocity_covariancei.base >> (8 * 5)) & 0xFF;
 8006a14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	f04f 0300 	mov.w	r3, #0
 8006a20:	0a0a      	lsrs	r2, r1, #8
 8006a22:	2300      	movs	r3, #0
 8006a24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a26:	3105      	adds	r1, #5
 8006a28:	6838      	ldr	r0, [r7, #0]
 8006a2a:	4401      	add	r1, r0
 8006a2c:	b2d3      	uxtb	r3, r2
 8006a2e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_angular_velocity_covariancei.base >> (8 * 6)) & 0xFF;
 8006a30:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006a34:	f04f 0200 	mov.w	r2, #0
 8006a38:	f04f 0300 	mov.w	r3, #0
 8006a3c:	0c0a      	lsrs	r2, r1, #16
 8006a3e:	2300      	movs	r3, #0
 8006a40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a42:	3106      	adds	r1, #6
 8006a44:	6838      	ldr	r0, [r7, #0]
 8006a46:	4401      	add	r1, r0
 8006a48:	b2d3      	uxtb	r3, r2
 8006a4a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_angular_velocity_covariancei.base >> (8 * 7)) & 0xFF;
 8006a4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006a50:	f04f 0200 	mov.w	r2, #0
 8006a54:	f04f 0300 	mov.w	r3, #0
 8006a58:	0e0a      	lsrs	r2, r1, #24
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a5e:	3107      	adds	r1, #7
 8006a60:	6838      	ldr	r0, [r7, #0]
 8006a62:	4401      	add	r1, r0
 8006a64:	b2d3      	uxtb	r3, r2
 8006a66:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8006a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6a:	3308      	adds	r3, #8
 8006a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	3301      	adds	r3, #1
 8006a72:	627b      	str	r3, [r7, #36]	; 0x24
 8006a74:	e77d      	b.n	8006972 <_ZNK11sensor_msgs3Imu9serializeEPh+0x166>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8006a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7e:	683a      	ldr	r2, [r7, #0]
 8006a80:	4413      	add	r3, r2
 8006a82:	4619      	mov	r1, r3
 8006a84:	f7fb ff04 	bl	8002890 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8c:	4413      	add	r3, r2
 8006a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8006a90:	2300      	movs	r3, #0
 8006a92:	623b      	str	r3, [r7, #32]
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	2b08      	cmp	r3, #8
 8006a98:	d87e      	bhi.n	8006b98 <_ZNK11sensor_msgs3Imu9serializeEPh+0x38c>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.real = this->linear_acceleration_covariance[i];
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	3322      	adds	r3, #34	; 0x22
 8006aa0:	00db      	lsls	r3, r3, #3
 8006aa2:	4413      	add	r3, r2
 8006aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa8:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_linear_acceleration_covariancei.base >> (8 * 0)) & 0xFF;
 8006aac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ab0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ab2:	6838      	ldr	r0, [r7, #0]
 8006ab4:	4401      	add	r1, r0
 8006ab6:	b2d3      	uxtb	r3, r2
 8006ab8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_linear_acceleration_covariancei.base >> (8 * 1)) & 0xFF;
 8006aba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006abe:	f04f 0200 	mov.w	r2, #0
 8006ac2:	f04f 0300 	mov.w	r3, #0
 8006ac6:	0a02      	lsrs	r2, r0, #8
 8006ac8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8006acc:	0a0b      	lsrs	r3, r1, #8
 8006ace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ad0:	3101      	adds	r1, #1
 8006ad2:	6838      	ldr	r0, [r7, #0]
 8006ad4:	4401      	add	r1, r0
 8006ad6:	b2d3      	uxtb	r3, r2
 8006ad8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_linear_acceleration_covariancei.base >> (8 * 2)) & 0xFF;
 8006ada:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ade:	f04f 0200 	mov.w	r2, #0
 8006ae2:	f04f 0300 	mov.w	r3, #0
 8006ae6:	0c02      	lsrs	r2, r0, #16
 8006ae8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006aec:	0c0b      	lsrs	r3, r1, #16
 8006aee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006af0:	3102      	adds	r1, #2
 8006af2:	6838      	ldr	r0, [r7, #0]
 8006af4:	4401      	add	r1, r0
 8006af6:	b2d3      	uxtb	r3, r2
 8006af8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_linear_acceleration_covariancei.base >> (8 * 3)) & 0xFF;
 8006afa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006afe:	f04f 0200 	mov.w	r2, #0
 8006b02:	f04f 0300 	mov.w	r3, #0
 8006b06:	0e02      	lsrs	r2, r0, #24
 8006b08:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006b0c:	0e0b      	lsrs	r3, r1, #24
 8006b0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b10:	3103      	adds	r1, #3
 8006b12:	6838      	ldr	r0, [r7, #0]
 8006b14:	4401      	add	r1, r0
 8006b16:	b2d3      	uxtb	r3, r2
 8006b18:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_linear_acceleration_covariancei.base >> (8 * 4)) & 0xFF;
 8006b1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b1e:	f04f 0200 	mov.w	r2, #0
 8006b22:	f04f 0300 	mov.w	r3, #0
 8006b26:	000a      	movs	r2, r1
 8006b28:	2300      	movs	r3, #0
 8006b2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b2c:	3104      	adds	r1, #4
 8006b2e:	6838      	ldr	r0, [r7, #0]
 8006b30:	4401      	add	r1, r0
 8006b32:	b2d3      	uxtb	r3, r2
 8006b34:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_linear_acceleration_covariancei.base >> (8 * 5)) & 0xFF;
 8006b36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b3a:	f04f 0200 	mov.w	r2, #0
 8006b3e:	f04f 0300 	mov.w	r3, #0
 8006b42:	0a0a      	lsrs	r2, r1, #8
 8006b44:	2300      	movs	r3, #0
 8006b46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b48:	3105      	adds	r1, #5
 8006b4a:	6838      	ldr	r0, [r7, #0]
 8006b4c:	4401      	add	r1, r0
 8006b4e:	b2d3      	uxtb	r3, r2
 8006b50:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_linear_acceleration_covariancei.base >> (8 * 6)) & 0xFF;
 8006b52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b56:	f04f 0200 	mov.w	r2, #0
 8006b5a:	f04f 0300 	mov.w	r3, #0
 8006b5e:	0c0a      	lsrs	r2, r1, #16
 8006b60:	2300      	movs	r3, #0
 8006b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b64:	3106      	adds	r1, #6
 8006b66:	6838      	ldr	r0, [r7, #0]
 8006b68:	4401      	add	r1, r0
 8006b6a:	b2d3      	uxtb	r3, r2
 8006b6c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_linear_acceleration_covariancei.base >> (8 * 7)) & 0xFF;
 8006b6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b72:	f04f 0200 	mov.w	r2, #0
 8006b76:	f04f 0300 	mov.w	r3, #0
 8006b7a:	0e0a      	lsrs	r2, r1, #24
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b80:	3107      	adds	r1, #7
 8006b82:	6838      	ldr	r0, [r7, #0]
 8006b84:	4401      	add	r1, r0
 8006b86:	b2d3      	uxtb	r3, r2
 8006b88:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8006b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8c:	3308      	adds	r3, #8
 8006b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	3301      	adds	r3, #1
 8006b94:	623b      	str	r3, [r7, #32]
 8006b96:	e77d      	b.n	8006a94 <_ZNK11sensor_msgs3Imu9serializeEPh+0x288>
      }
      return offset;
 8006b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3730      	adds	r7, #48	; 0x30
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8006ba2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ba6:	b0be      	sub	sp, #248	; 0xf8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 8006bae:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
    {
      int offset = 0;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      offset += this->header.deserialize(inbuffer + offset);
 8006bb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006bbc:	1d18      	adds	r0, r3, #4
 8006bbe:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8006bc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bc6:	4413      	add	r3, r2
 8006bc8:	4619      	mov	r1, r3
 8006bca:	f7fc fc09 	bl	80033e0 <_ZN8std_msgs6Header11deserializeEPh>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      offset += this->orientation.deserialize(inbuffer + offset);
 8006bda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006bde:	f103 0018 	add.w	r0, r3, #24
 8006be2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8006be6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bea:	4413      	add	r3, r2
 8006bec:	4619      	mov	r1, r3
 8006bee:	f7fc feeb 	bl	80039c8 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8006bfe:	2300      	movs	r3, #0
 8006c00:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c04:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c08:	2b08      	cmp	r3, #8
 8006c0a:	f200 8100 	bhi.w	8006e0e <_ZN11sensor_msgs3Imu11deserializeEPh+0x26c>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.base = 0;
 8006c0e:	f04f 0200 	mov.w	r2, #0
 8006c12:	f04f 0300 	mov.w	r3, #0
 8006c16:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006c1a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006c1e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8006c22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c26:	4413      	add	r3, r2
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	b2da      	uxtb	r2, r3
 8006c2c:	f04f 0300 	mov.w	r3, #0
 8006c30:	ea40 0402 	orr.w	r4, r0, r2
 8006c34:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8006c38:	430b      	orrs	r3, r1
 8006c3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c3e:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8006c42:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006c46:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8006c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c4e:	1c5a      	adds	r2, r3, #1
 8006c50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c54:	4413      	add	r3, r2
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	f04f 0300 	mov.w	r3, #0
 8006c5e:	f04f 0000 	mov.w	r0, #0
 8006c62:	f04f 0100 	mov.w	r1, #0
 8006c66:	0219      	lsls	r1, r3, #8
 8006c68:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8006c6c:	0210      	lsls	r0, r2, #8
 8006c6e:	ea44 0300 	orr.w	r3, r4, r0
 8006c72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c76:	ea45 0301 	orr.w	r3, r5, r1
 8006c7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006c7e:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8006c82:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006c86:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8006c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c8e:	1c9a      	adds	r2, r3, #2
 8006c90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c94:	4413      	add	r3, r2
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	f04f 0300 	mov.w	r3, #0
 8006c9e:	f04f 0000 	mov.w	r0, #0
 8006ca2:	f04f 0100 	mov.w	r1, #0
 8006ca6:	0419      	lsls	r1, r3, #16
 8006ca8:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8006cac:	0410      	lsls	r0, r2, #16
 8006cae:	ea44 0300 	orr.w	r3, r4, r0
 8006cb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cb6:	ea45 0301 	orr.w	r3, r5, r1
 8006cba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cbe:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8006cc2:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006cc6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cce:	1cda      	adds	r2, r3, #3
 8006cd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cd4:	4413      	add	r3, r2
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	f04f 0300 	mov.w	r3, #0
 8006cde:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8006ce2:	ea4f 6802 	mov.w	r8, r2, lsl #24
 8006ce6:	ea40 0308 	orr.w	r3, r0, r8
 8006cea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006cee:	ea41 0309 	orr.w	r3, r1, r9
 8006cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006cf6:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8006cfa:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006cfe:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8006d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d06:	1d1a      	adds	r2, r3, #4
 8006d08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d0c:	4413      	add	r3, r2
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	f04f 0300 	mov.w	r3, #0
 8006d16:	f04f 0000 	mov.w	r0, #0
 8006d1a:	f04f 0100 	mov.w	r1, #0
 8006d1e:	0011      	movs	r1, r2
 8006d20:	2000      	movs	r0, #0
 8006d22:	ea44 0300 	orr.w	r3, r4, r0
 8006d26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d2a:	ea45 0301 	orr.w	r3, r5, r1
 8006d2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006d32:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8006d36:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006d3a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8006d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d42:	1d5a      	adds	r2, r3, #5
 8006d44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d48:	4413      	add	r3, r2
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	b2da      	uxtb	r2, r3
 8006d4e:	f04f 0300 	mov.w	r3, #0
 8006d52:	f04f 0000 	mov.w	r0, #0
 8006d56:	f04f 0100 	mov.w	r1, #0
 8006d5a:	0211      	lsls	r1, r2, #8
 8006d5c:	2000      	movs	r0, #0
 8006d5e:	ea44 0300 	orr.w	r3, r4, r0
 8006d62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d66:	ea45 0301 	orr.w	r3, r5, r1
 8006d6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d6e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8006d72:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006d76:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8006d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7e:	1d9a      	adds	r2, r3, #6
 8006d80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d84:	4413      	add	r3, r2
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	f04f 0300 	mov.w	r3, #0
 8006d8e:	f04f 0000 	mov.w	r0, #0
 8006d92:	f04f 0100 	mov.w	r1, #0
 8006d96:	0411      	lsls	r1, r2, #16
 8006d98:	2000      	movs	r0, #0
 8006d9a:	ea44 0300 	orr.w	r3, r4, r0
 8006d9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006da2:	ea45 0301 	orr.w	r3, r5, r1
 8006da6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006daa:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8006dae:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006db2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8006db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dba:	1dda      	adds	r2, r3, #7
 8006dbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006dc0:	4413      	add	r3, r2
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	b2da      	uxtb	r2, r3
 8006dc6:	f04f 0300 	mov.w	r3, #0
 8006dca:	f04f 0000 	mov.w	r0, #0
 8006dce:	f04f 0100 	mov.w	r1, #0
 8006dd2:	0611      	lsls	r1, r2, #24
 8006dd4:	2000      	movs	r0, #0
 8006dd6:	ea44 0a00 	orr.w	sl, r4, r0
 8006dda:	ea45 0b01 	orr.w	fp, r5, r1
 8006dde:	e9c7 ab38 	strd	sl, fp, [r7, #224]	; 0xe0
      this->orientation_covariance[i] = u_orientation_covariancei.real;
 8006de2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006de6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8006dea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006dee:	3308      	adds	r3, #8
 8006df0:	00db      	lsls	r3, r3, #3
 8006df2:	4413      	add	r3, r2
 8006df4:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->orientation_covariance[i]);
 8006df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dfc:	3308      	adds	r3, #8
 8006dfe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8006e02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e06:	3301      	adds	r3, #1
 8006e08:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e0c:	e6fa      	b.n	8006c04 <_ZN11sensor_msgs3Imu11deserializeEPh+0x62>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 8006e0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e12:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8006e16:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8006e1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e1e:	4413      	add	r3, r2
 8006e20:	4619      	mov	r1, r3
 8006e22:	f7fb fea8 	bl	8002b76 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8006e26:	4602      	mov	r2, r0
 8006e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8006e32:	2300      	movs	r3, #0
 8006e34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e3c:	2b08      	cmp	r3, #8
 8006e3e:	f200 80fc 	bhi.w	800703a <_ZN11sensor_msgs3Imu11deserializeEPh+0x498>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.base = 0;
 8006e42:	f04f 0200 	mov.w	r2, #0
 8006e46:	f04f 0300 	mov.w	r3, #0
 8006e4a:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006e4e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006e52:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8006e56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e5a:	4413      	add	r3, r2
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	f04f 0300 	mov.w	r3, #0
 8006e64:	ea40 0402 	orr.w	r4, r0, r2
 8006e68:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006e72:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8006e76:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006e7a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8006e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e82:	1c5a      	adds	r2, r3, #1
 8006e84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e88:	4413      	add	r3, r2
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	f04f 0300 	mov.w	r3, #0
 8006e92:	f04f 0000 	mov.w	r0, #0
 8006e96:	f04f 0100 	mov.w	r1, #0
 8006e9a:	0219      	lsls	r1, r3, #8
 8006e9c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8006ea0:	0210      	lsls	r0, r2, #8
 8006ea2:	ea44 0300 	orr.w	r3, r4, r0
 8006ea6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006eaa:	ea45 0301 	orr.w	r3, r5, r1
 8006eae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006eb2:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8006eb6:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006eba:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8006ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec2:	1c9a      	adds	r2, r3, #2
 8006ec4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ec8:	4413      	add	r3, r2
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	b2da      	uxtb	r2, r3
 8006ece:	f04f 0300 	mov.w	r3, #0
 8006ed2:	f04f 0000 	mov.w	r0, #0
 8006ed6:	f04f 0100 	mov.w	r1, #0
 8006eda:	0419      	lsls	r1, r3, #16
 8006edc:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8006ee0:	0410      	lsls	r0, r2, #16
 8006ee2:	ea44 0300 	orr.w	r3, r4, r0
 8006ee6:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ee8:	ea45 0301 	orr.w	r3, r5, r1
 8006eec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006eee:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8006ef2:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006ef6:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006efe:	1cda      	adds	r2, r3, #3
 8006f00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f04:	4413      	add	r3, r2
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	f04f 0300 	mov.w	r3, #0
 8006f0e:	0a14      	lsrs	r4, r2, #8
 8006f10:	677c      	str	r4, [r7, #116]	; 0x74
 8006f12:	0613      	lsls	r3, r2, #24
 8006f14:	673b      	str	r3, [r7, #112]	; 0x70
 8006f16:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8006f1a:	4623      	mov	r3, r4
 8006f1c:	4303      	orrs	r3, r0
 8006f1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f20:	462b      	mov	r3, r5
 8006f22:	430b      	orrs	r3, r1
 8006f24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f26:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006f2a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006f2e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8006f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f36:	1d1a      	adds	r2, r3, #4
 8006f38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f3c:	4413      	add	r3, r2
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	f04f 0300 	mov.w	r3, #0
 8006f46:	f04f 0000 	mov.w	r0, #0
 8006f4a:	f04f 0100 	mov.w	r1, #0
 8006f4e:	0011      	movs	r1, r2
 8006f50:	2000      	movs	r0, #0
 8006f52:	ea44 0300 	orr.w	r3, r4, r0
 8006f56:	663b      	str	r3, [r7, #96]	; 0x60
 8006f58:	ea45 0301 	orr.w	r3, r5, r1
 8006f5c:	667b      	str	r3, [r7, #100]	; 0x64
 8006f5e:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8006f62:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006f66:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8006f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f6e:	1d5a      	adds	r2, r3, #5
 8006f70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f74:	4413      	add	r3, r2
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	f04f 0300 	mov.w	r3, #0
 8006f7e:	f04f 0000 	mov.w	r0, #0
 8006f82:	f04f 0100 	mov.w	r1, #0
 8006f86:	0211      	lsls	r1, r2, #8
 8006f88:	2000      	movs	r0, #0
 8006f8a:	ea44 0300 	orr.w	r3, r4, r0
 8006f8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f90:	ea45 0301 	orr.w	r3, r5, r1
 8006f94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f96:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8006f9a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006f9e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8006fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa6:	1d9a      	adds	r2, r3, #6
 8006fa8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fac:	4413      	add	r3, r2
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	b2da      	uxtb	r2, r3
 8006fb2:	f04f 0300 	mov.w	r3, #0
 8006fb6:	f04f 0000 	mov.w	r0, #0
 8006fba:	f04f 0100 	mov.w	r1, #0
 8006fbe:	0411      	lsls	r1, r2, #16
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	ea44 0300 	orr.w	r3, r4, r0
 8006fc6:	653b      	str	r3, [r7, #80]	; 0x50
 8006fc8:	ea45 0301 	orr.w	r3, r5, r1
 8006fcc:	657b      	str	r3, [r7, #84]	; 0x54
 8006fce:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8006fd2:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006fd6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8006fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fde:	1dda      	adds	r2, r3, #7
 8006fe0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fe4:	4413      	add	r3, r2
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	f04f 0300 	mov.w	r3, #0
 8006fee:	f04f 0000 	mov.w	r0, #0
 8006ff2:	f04f 0100 	mov.w	r1, #0
 8006ff6:	0611      	lsls	r1, r2, #24
 8006ff8:	2000      	movs	r0, #0
 8006ffa:	ea44 0300 	orr.w	r3, r4, r0
 8006ffe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007000:	ea45 0301 	orr.w	r3, r5, r1
 8007004:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007006:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800700a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      this->angular_velocity_covariance[i] = u_angular_velocity_covariancei.real;
 800700e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007012:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8007016:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800701a:	3315      	adds	r3, #21
 800701c:	00db      	lsls	r3, r3, #3
 800701e:	4413      	add	r3, r2
 8007020:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8007024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007028:	3308      	adds	r3, #8
 800702a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 800702e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007032:	3301      	adds	r3, #1
 8007034:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007038:	e6fe      	b.n	8006e38 <_ZN11sensor_msgs3Imu11deserializeEPh+0x296>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 800703a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800703e:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8007042:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8007046:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800704a:	4413      	add	r3, r2
 800704c:	4619      	mov	r1, r3
 800704e:	f7fb fd92 	bl	8002b76 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8007052:	4602      	mov	r2, r0
 8007054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007058:	4413      	add	r3, r2
 800705a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 800705e:	2300      	movs	r3, #0
 8007060:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007064:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007068:	2b08      	cmp	r3, #8
 800706a:	f200 80f8 	bhi.w	800725e <_ZN11sensor_msgs3Imu11deserializeEPh+0x6bc>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.base = 0;
 800706e:	f04f 0200 	mov.w	r2, #0
 8007072:	f04f 0300 	mov.w	r3, #0
 8007076:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800707a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800707e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8007082:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007086:	4413      	add	r3, r2
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	b2da      	uxtb	r2, r3
 800708c:	f04f 0300 	mov.w	r3, #0
 8007090:	ea40 0402 	orr.w	r4, r0, r2
 8007094:	643c      	str	r4, [r7, #64]	; 0x40
 8007096:	430b      	orrs	r3, r1
 8007098:	647b      	str	r3, [r7, #68]	; 0x44
 800709a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800709e:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80070a2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80070a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070aa:	1c5a      	adds	r2, r3, #1
 80070ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070b0:	4413      	add	r3, r2
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	f04f 0300 	mov.w	r3, #0
 80070ba:	f04f 0000 	mov.w	r0, #0
 80070be:	f04f 0100 	mov.w	r1, #0
 80070c2:	0219      	lsls	r1, r3, #8
 80070c4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80070c8:	0210      	lsls	r0, r2, #8
 80070ca:	ea44 0300 	orr.w	r3, r4, r0
 80070ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80070d0:	ea45 0301 	orr.w	r3, r5, r1
 80070d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070d6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80070da:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80070de:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80070e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070e6:	1c9a      	adds	r2, r3, #2
 80070e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070ec:	4413      	add	r3, r2
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	f04f 0300 	mov.w	r3, #0
 80070f6:	f04f 0000 	mov.w	r0, #0
 80070fa:	f04f 0100 	mov.w	r1, #0
 80070fe:	0419      	lsls	r1, r3, #16
 8007100:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8007104:	0410      	lsls	r0, r2, #16
 8007106:	ea44 0300 	orr.w	r3, r4, r0
 800710a:	633b      	str	r3, [r7, #48]	; 0x30
 800710c:	ea45 0301 	orr.w	r3, r5, r1
 8007110:	637b      	str	r3, [r7, #52]	; 0x34
 8007112:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8007116:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800711a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800711e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007122:	1cda      	adds	r2, r3, #3
 8007124:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007128:	4413      	add	r3, r2
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	b2da      	uxtb	r2, r3
 800712e:	f04f 0300 	mov.w	r3, #0
 8007132:	0a14      	lsrs	r4, r2, #8
 8007134:	62fc      	str	r4, [r7, #44]	; 0x2c
 8007136:	0613      	lsls	r3, r2, #24
 8007138:	62bb      	str	r3, [r7, #40]	; 0x28
 800713a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800713e:	4623      	mov	r3, r4
 8007140:	4303      	orrs	r3, r0
 8007142:	623b      	str	r3, [r7, #32]
 8007144:	462b      	mov	r3, r5
 8007146:	430b      	orrs	r3, r1
 8007148:	627b      	str	r3, [r7, #36]	; 0x24
 800714a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800714e:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8007152:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8007156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800715a:	1d1a      	adds	r2, r3, #4
 800715c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007160:	4413      	add	r3, r2
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	b2da      	uxtb	r2, r3
 8007166:	f04f 0300 	mov.w	r3, #0
 800716a:	f04f 0000 	mov.w	r0, #0
 800716e:	f04f 0100 	mov.w	r1, #0
 8007172:	0011      	movs	r1, r2
 8007174:	2000      	movs	r0, #0
 8007176:	ea44 0300 	orr.w	r3, r4, r0
 800717a:	61bb      	str	r3, [r7, #24]
 800717c:	ea45 0301 	orr.w	r3, r5, r1
 8007180:	61fb      	str	r3, [r7, #28]
 8007182:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8007186:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800718a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800718e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007192:	1d5a      	adds	r2, r3, #5
 8007194:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007198:	4413      	add	r3, r2
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	b2da      	uxtb	r2, r3
 800719e:	f04f 0300 	mov.w	r3, #0
 80071a2:	f04f 0000 	mov.w	r0, #0
 80071a6:	f04f 0100 	mov.w	r1, #0
 80071aa:	0211      	lsls	r1, r2, #8
 80071ac:	2000      	movs	r0, #0
 80071ae:	ea44 0300 	orr.w	r3, r4, r0
 80071b2:	613b      	str	r3, [r7, #16]
 80071b4:	ea45 0301 	orr.w	r3, r5, r1
 80071b8:	617b      	str	r3, [r7, #20]
 80071ba:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80071be:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80071c2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80071c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ca:	1d9a      	adds	r2, r3, #6
 80071cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071d0:	4413      	add	r3, r2
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	b2da      	uxtb	r2, r3
 80071d6:	f04f 0300 	mov.w	r3, #0
 80071da:	f04f 0000 	mov.w	r0, #0
 80071de:	f04f 0100 	mov.w	r1, #0
 80071e2:	0411      	lsls	r1, r2, #16
 80071e4:	2000      	movs	r0, #0
 80071e6:	ea44 0300 	orr.w	r3, r4, r0
 80071ea:	60bb      	str	r3, [r7, #8]
 80071ec:	ea45 0301 	orr.w	r3, r5, r1
 80071f0:	60fb      	str	r3, [r7, #12]
 80071f2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80071f6:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80071fa:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80071fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007202:	1dda      	adds	r2, r3, #7
 8007204:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007208:	4413      	add	r3, r2
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	b2da      	uxtb	r2, r3
 800720e:	f04f 0300 	mov.w	r3, #0
 8007212:	f04f 0000 	mov.w	r0, #0
 8007216:	f04f 0100 	mov.w	r1, #0
 800721a:	0611      	lsls	r1, r2, #24
 800721c:	2000      	movs	r0, #0
 800721e:	ea44 0300 	orr.w	r3, r4, r0
 8007222:	603b      	str	r3, [r7, #0]
 8007224:	ea45 0301 	orr.w	r3, r5, r1
 8007228:	607b      	str	r3, [r7, #4]
 800722a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800722e:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      this->linear_acceleration_covariance[i] = u_linear_acceleration_covariancei.real;
 8007232:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8007236:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800723a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800723e:	3322      	adds	r3, #34	; 0x22
 8007240:	00db      	lsls	r3, r3, #3
 8007242:	4413      	add	r3, r2
 8007244:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8007248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800724c:	3308      	adds	r3, #8
 800724e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8007252:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007256:	3301      	adds	r3, #1
 8007258:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800725c:	e702      	b.n	8007064 <_ZN11sensor_msgs3Imu11deserializeEPh+0x4c2>
      }
     return offset;
 800725e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    }
 8007262:	4618      	mov	r0, r3
 8007264:	37f8      	adds	r7, #248	; 0xf8
 8007266:	46bd      	mov	sp, r7
 8007268:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800726c <_ZN11sensor_msgs3Imu7getTypeEv>:

    const char * getType(){ return "sensor_msgs/Imu"; };
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	4b03      	ldr	r3, [pc, #12]	; (8007284 <_ZN11sensor_msgs3Imu7getTypeEv+0x18>)
 8007276:	4618      	mov	r0, r3
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	0800da34 	.word	0x0800da34

08007288 <_ZN11sensor_msgs3Imu6getMD5Ev>:
    const char * getMD5(){ return "6a62c6daae103f4ff57a132d6f95cec2"; };
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	4b03      	ldr	r3, [pc, #12]	; (80072a0 <_ZN11sensor_msgs3Imu6getMD5Ev+0x18>)
 8007292:	4618      	mov	r0, r3
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	0800da44 	.word	0x0800da44

080072a4 <_ZN2tf9tfMessageC1Ev>:
      uint32_t transforms_length;
      typedef geometry_msgs::TransformStamped _transforms_type;
      _transforms_type st_transforms;
      _transforms_type * transforms;

    tfMessage():
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
      transforms_length(0), transforms(NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fa fa94 	bl	80017dc <_ZN3ros3MsgC1Ev>
 80072b4:	4a09      	ldr	r2, [pc, #36]	; (80072dc <_ZN2tf9tfMessageC1Ev+0x38>)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	605a      	str	r2, [r3, #4]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3308      	adds	r3, #8
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7fc fffd 	bl	80042c4 <_ZN13geometry_msgs16TransformStampedC1Ev>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	679a      	str	r2, [r3, #120]	; 0x78
    {
    }
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4618      	mov	r0, r3
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	0800db5c 	.word	0x0800db5c

080072e0 <_ZNK2tf9tfMessage9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80072ea:	2300      	movs	r3, #0
 80072ec:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->transforms_length >> (8 * 0)) & 0xFF;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6859      	ldr	r1, [r3, #4]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	683a      	ldr	r2, [r7, #0]
 80072f6:	4413      	add	r3, r2
 80072f8:	b2ca      	uxtb	r2, r1
 80072fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->transforms_length >> (8 * 1)) & 0xFF;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	0a19      	lsrs	r1, r3, #8
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	3301      	adds	r3, #1
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	4413      	add	r3, r2
 800730a:	b2ca      	uxtb	r2, r1
 800730c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->transforms_length >> (8 * 2)) & 0xFF;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	0c19      	lsrs	r1, r3, #16
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	3302      	adds	r3, #2
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	4413      	add	r3, r2
 800731c:	b2ca      	uxtb	r2, r1
 800731e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->transforms_length >> (8 * 3)) & 0xFF;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	0e19      	lsrs	r1, r3, #24
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	3303      	adds	r3, #3
 800732a:	683a      	ldr	r2, [r7, #0]
 800732c:	4413      	add	r3, r2
 800732e:	b2ca      	uxtb	r2, r1
 8007330:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->transforms_length);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	3304      	adds	r3, #4
 8007336:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 8007338:	2300      	movs	r3, #0
 800733a:	60bb      	str	r3, [r7, #8]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	429a      	cmp	r2, r3
 8007344:	d223      	bcs.n	800738e <_ZNK2tf9tfMessage9serializeEPh+0xae>
      offset += this->transforms[i].serialize(outbuffer + offset);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	4613      	mov	r3, r2
 800734e:	00db      	lsls	r3, r3, #3
 8007350:	1a9b      	subs	r3, r3, r2
 8007352:	011b      	lsls	r3, r3, #4
 8007354:	18c8      	adds	r0, r1, r3
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	4613      	mov	r3, r2
 800735a:	00db      	lsls	r3, r3, #3
 800735c:	1a9b      	subs	r3, r3, r2
 800735e:	011b      	lsls	r3, r3, #4
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	4613      	mov	r3, r2
 8007368:	00db      	lsls	r3, r3, #3
 800736a:	1a9b      	subs	r3, r3, r2
 800736c:	011b      	lsls	r3, r3, #4
 800736e:	440b      	add	r3, r1
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	440a      	add	r2, r1
 800737a:	4611      	mov	r1, r2
 800737c:	4798      	blx	r3
 800737e:	4602      	mov	r2, r0
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	4413      	add	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	3301      	adds	r3, #1
 800738a:	60bb      	str	r3, [r7, #8]
 800738c:	e7d6      	b.n	800733c <_ZNK2tf9tfMessage9serializeEPh+0x5c>
      }
      return offset;
 800738e:	68fb      	ldr	r3, [r7, #12]
    }
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <_ZN2tf9tfMessage11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	617b      	str	r3, [r7, #20]
      uint32_t transforms_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	4413      	add	r3, r2
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	3301      	adds	r3, #1
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	4413      	add	r3, r2
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	021b      	lsls	r3, r3, #8
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	4313      	orrs	r3, r2
 80073c0:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	3302      	adds	r3, #2
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	4413      	add	r3, r2
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	041b      	lsls	r3, r3, #16
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	3303      	adds	r3, #3
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	4413      	add	r3, r2
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	061b      	lsls	r3, r3, #24
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->transforms_length);
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	3304      	adds	r3, #4
 80073ea:	617b      	str	r3, [r7, #20]
      if(transforms_lengthT > transforms_length)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d90c      	bls.n	8007410 <_ZN2tf9tfMessage11deserializeEPh+0x78>
        this->transforms = (geometry_msgs::TransformStamped*)realloc(this->transforms, transforms_lengthT * sizeof(geometry_msgs::TransformStamped));
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	4613      	mov	r3, r2
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	1a9b      	subs	r3, r3, r2
 8007402:	011b      	lsls	r3, r3, #4
 8007404:	4619      	mov	r1, r3
 8007406:	f006 f891 	bl	800d52c <realloc>
 800740a:	4602      	mov	r2, r0
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	679a      	str	r2, [r3, #120]	; 0x78
      transforms_length = transforms_lengthT;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < transforms_length; i++){
 8007416:	2300      	movs	r3, #0
 8007418:	613b      	str	r3, [r7, #16]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	429a      	cmp	r2, r3
 8007422:	d21e      	bcs.n	8007462 <_ZN2tf9tfMessage11deserializeEPh+0xca>
      offset += this->st_transforms.deserialize(inbuffer + offset);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f103 0008 	add.w	r0, r3, #8
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	4413      	add	r3, r2
 8007430:	4619      	mov	r1, r3
 8007432:	f7fc ffab 	bl	800438c <_ZN13geometry_msgs16TransformStamped11deserializeEPh>
 8007436:	4602      	mov	r2, r0
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	4413      	add	r3, r2
 800743c:	617b      	str	r3, [r7, #20]
        memcpy( &(this->transforms[i]), &(this->st_transforms), sizeof(geometry_msgs::TransformStamped));
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	4613      	mov	r3, r2
 8007446:	00db      	lsls	r3, r3, #3
 8007448:	1a9b      	subs	r3, r3, r2
 800744a:	011b      	lsls	r3, r3, #4
 800744c:	18c8      	adds	r0, r1, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	3308      	adds	r3, #8
 8007452:	2270      	movs	r2, #112	; 0x70
 8007454:	4619      	mov	r1, r3
 8007456:	f005 ffa9 	bl	800d3ac <memcpy>
      for( uint32_t i = 0; i < transforms_length; i++){
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	3301      	adds	r3, #1
 800745e:	613b      	str	r3, [r7, #16]
 8007460:	e7db      	b.n	800741a <_ZN2tf9tfMessage11deserializeEPh+0x82>
      }
     return offset;
 8007462:	697b      	ldr	r3, [r7, #20]
    }
 8007464:	4618      	mov	r0, r3
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <_ZN2tf9tfMessage7getTypeEv>:

    const char * getType(){ return "tf/tfMessage"; };
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	4b03      	ldr	r3, [pc, #12]	; (8007484 <_ZN2tf9tfMessage7getTypeEv+0x18>)
 8007476:	4618      	mov	r0, r3
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	0800da68 	.word	0x0800da68

08007488 <_ZN2tf9tfMessage6getMD5Ev>:
    const char * getMD5(){ return "94810edda583a504dfda3829e70d7eec"; };
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	4b03      	ldr	r3, [pc, #12]	; (80074a0 <_ZN2tf9tfMessage6getMD5Ev+0x18>)
 8007492:	4618      	mov	r0, r3
 8007494:	370c      	adds	r7, #12
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	0800da78 	.word	0x0800da78

080074a4 <_ZN2tf20TransformBroadcasterC1Ev>:
{

class TransformBroadcaster
{
public:
  TransformBroadcaster() : publisher_("/tf", &internal_msg) {}
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7ff fef8 	bl	80072a4 <_ZN2tf9tfMessageC1Ev>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f103 0080 	add.w	r0, r3, #128	; 0x80
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	2300      	movs	r3, #0
 80074be:	4904      	ldr	r1, [pc, #16]	; (80074d0 <_ZN2tf20TransformBroadcasterC1Ev+0x2c>)
 80074c0:	f7fa ffc2 	bl	8002448 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4618      	mov	r0, r3
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	0800da9c 	.word	0x0800da9c

080074d4 <_ZN11MotorDriverC1Ev>:
	int rxPacket(uint8_t *rxpacketL, uint8_t *rxpacketR);
	int txRxPacket(uint8_t *txpacketL, uint8_t *txpacketR, uint8_t *rxpacketL, uint8_t *rxpacketR);


public:
	MotorDriver(){};
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4618      	mov	r0, r3
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <_ZN11MotorDriverD1Ev>:
	~MotorDriver(){};
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4618      	mov	r0, r3
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <_Z5cbCmdRKN13geometry_msgs5TwistE>:

char msg[] = "Dummy";
char confirm_receive[] = "Received cmd_vel";


void cbCmd(const geometry_msgs::Twist& data){
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
	value[0] = data.linear.x;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800750e:	4610      	mov	r0, r2
 8007510:	4619      	mov	r1, r3
 8007512:	f7f9 fad7 	bl	8000ac4 <__aeabi_d2f>
 8007516:	4603      	mov	r3, r0
 8007518:	4a0f      	ldr	r2, [pc, #60]	; (8007558 <_Z5cbCmdRKN13geometry_msgs5TwistE+0x58>)
 800751a:	6013      	str	r3, [r2, #0]
	value[1] = data.angular.z;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8007522:	4610      	mov	r0, r2
 8007524:	4619      	mov	r1, r3
 8007526:	f7f9 facd 	bl	8000ac4 <__aeabi_d2f>
 800752a:	4603      	mov	r3, r0
 800752c:	4a0a      	ldr	r2, [pc, #40]	; (8007558 <_Z5cbCmdRKN13geometry_msgs5TwistE+0x58>)
 800752e:	6053      	str	r3, [r2, #4]
	motorDriver.controlMotor(wheel_radius, wheel_separation, value);
 8007530:	4909      	ldr	r1, [pc, #36]	; (8007558 <_Z5cbCmdRKN13geometry_msgs5TwistE+0x58>)
 8007532:	eef4 0a00 	vmov.f32	s1, #64	; 0x3e000000  0.125
 8007536:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800755c <_Z5cbCmdRKN13geometry_msgs5TwistE+0x5c>
 800753a:	4809      	ldr	r0, [pc, #36]	; (8007560 <_Z5cbCmdRKN13geometry_msgs5TwistE+0x60>)
 800753c:	f001 faa4 	bl	8008a88 <_ZN11MotorDriver12controlMotorEffPf>
	motorDriver.readEncoder(last_diff_tick[LEFT], last_diff_tick[RIGHT]);
 8007540:	4a08      	ldr	r2, [pc, #32]	; (8007564 <_Z5cbCmdRKN13geometry_msgs5TwistE+0x64>)
 8007542:	4909      	ldr	r1, [pc, #36]	; (8007568 <_Z5cbCmdRKN13geometry_msgs5TwistE+0x68>)
 8007544:	4806      	ldr	r0, [pc, #24]	; (8007560 <_Z5cbCmdRKN13geometry_msgs5TwistE+0x60>)
 8007546:	f001 f954 	bl	80087f2 <_ZN11MotorDriver11readEncoderERlS0_>
	isReceived = true;
 800754a:	4b08      	ldr	r3, [pc, #32]	; (800756c <_Z5cbCmdRKN13geometry_msgs5TwistE+0x6c>)
 800754c:	2201      	movs	r2, #1
 800754e:	701a      	strb	r2, [r3, #0]
}
 8007550:	bf00      	nop
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	20000f58 	.word	0x20000f58
 800755c:	3dcccccd 	.word	0x3dcccccd
 8007560:	200000c8 	.word	0x200000c8
 8007564:	20000f4c 	.word	0x20000f4c
 8007568:	20000f48 	.word	0x20000f48
 800756c:	20000f60 	.word	0x20000f60

08007570 <HAL_UART_TxCpltCallback>:

geometry_msgs::TransformStamped odom_tf;
tf::TransformBroadcaster tf_broadcaster;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a06      	ldr	r2, [pc, #24]	; (8007598 <HAL_UART_TxCpltCallback+0x28>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d106      	bne.n	8007590 <HAL_UART_TxCpltCallback+0x20>
		nh.getHardware()->flush();
 8007582:	4806      	ldr	r0, [pc, #24]	; (800759c <HAL_UART_TxCpltCallback+0x2c>)
 8007584:	f000 f9aa 	bl	80078dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8007588:	4603      	mov	r3, r0
 800758a:	4618      	mov	r0, r3
 800758c:	f7fb f80c 	bl	80025a8 <_ZN13STM32Hardware5flushEv>
}
 8007590:	bf00      	nop
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	40004800 	.word	0x40004800
 800759c:	20000100 	.word	0x20000100

080075a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a06      	ldr	r2, [pc, #24]	; (80075c8 <HAL_UART_RxCpltCallback+0x28>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d106      	bne.n	80075c0 <HAL_UART_RxCpltCallback+0x20>
		nh.getHardware()->reset_rbuf();
 80075b2:	4806      	ldr	r0, [pc, #24]	; (80075cc <HAL_UART_RxCpltCallback+0x2c>)
 80075b4:	f000 f992 	bl	80078dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80075b8:	4603      	mov	r3, r0
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fa ffb5 	bl	800252a <_ZN13STM32Hardware10reset_rbufEv>
}
 80075c0:	bf00      	nop
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	40004800 	.word	0x40004800
 80075cc:	20000100 	.word	0x20000100

080075d0 <setup>:

void setup(UART_HandleTypeDef* leftPort, UART_HandleTypeDef* rightPort, SPI_HandleTypeDef* imuPort, GPIO_TypeDef* portx, uint16_t pin)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
 80075dc:	603b      	str	r3, [r7, #0]
	motorDriver.init(leftPort, rightPort);
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	68f9      	ldr	r1, [r7, #12]
 80075e2:	480c      	ldr	r0, [pc, #48]	; (8007614 <setup+0x44>)
 80075e4:	f000 fec8 	bl	8008378 <_ZN11MotorDriver4initEP20__UART_HandleTypeDefS1_>
	imuDriver.imu_init(imuPort, portx, pin);
 80075e8:	8b3b      	ldrh	r3, [r7, #24]
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	6879      	ldr	r1, [r7, #4]
 80075ee:	480a      	ldr	r0, [pc, #40]	; (8007618 <setup+0x48>)
 80075f0:	f7f9 fcbe 	bl	8000f70 <_ZN9ImuDriver8imu_initEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
	nh.initNode();
 80075f4:	4809      	ldr	r0, [pc, #36]	; (800761c <setup+0x4c>)
 80075f6:	f000 f97d 	bl	80078f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(pub_state);
 80075fa:	4909      	ldr	r1, [pc, #36]	; (8007620 <setup+0x50>)
 80075fc:	4807      	ldr	r0, [pc, #28]	; (800761c <setup+0x4c>)
 80075fe:	f000 f878 	bl	80076f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.subscribe(sub_cmd);
 8007602:	4908      	ldr	r1, [pc, #32]	; (8007624 <setup+0x54>)
 8007604:	4805      	ldr	r0, [pc, #20]	; (800761c <setup+0x4c>)
 8007606:	f000 f992 	bl	800792e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
}
 800760a:	bf00      	nop
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	200000c8 	.word	0x200000c8
 8007618:	200000f4 	.word	0x200000f4
 800761c:	20000100 	.word	0x20000100
 8007620:	20000fc8 	.word	0x20000fc8
 8007624:	20000f68 	.word	0x20000f68

08007628 <loop>:

void loop(void)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	af00      	add	r7, sp, #0
	nh.spinOnce();
 800762c:	4809      	ldr	r0, [pc, #36]	; (8007654 <loop+0x2c>)
 800762e:	f000 f9a9 	bl	8007984 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	if (isReceived)
 8007632:	4b09      	ldr	r3, [pc, #36]	; (8007658 <loop+0x30>)
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <loop+0x1a>
		str_msg.data = confirm_receive;
 800763a:	4b08      	ldr	r3, [pc, #32]	; (800765c <loop+0x34>)
 800763c:	4a08      	ldr	r2, [pc, #32]	; (8007660 <loop+0x38>)
 800763e:	605a      	str	r2, [r3, #4]
 8007640:	e002      	b.n	8007648 <loop+0x20>
	else
		str_msg.data = msg;
 8007642:	4b06      	ldr	r3, [pc, #24]	; (800765c <loop+0x34>)
 8007644:	4a07      	ldr	r2, [pc, #28]	; (8007664 <loop+0x3c>)
 8007646:	605a      	str	r2, [r3, #4]
	pub_state.publish(&str_msg);
 8007648:	4904      	ldr	r1, [pc, #16]	; (800765c <loop+0x34>)
 800764a:	4807      	ldr	r0, [pc, #28]	; (8007668 <loop+0x40>)
 800764c:	f7fa ff13 	bl	8002476 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8007650:	bf00      	nop
 8007652:	bd80      	pop	{r7, pc}
 8007654:	20000100 	.word	0x20000100
 8007658:	20000f60 	.word	0x20000f60
 800765c:	20000a3c 	.word	0x20000a3c
 8007660:	20000008 	.word	0x20000008
 8007664:	20000000 	.word	0x20000000
 8007668:	20000fc8 	.word	0x20000fc8

0800766c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8007676:	2300      	movs	r3, #0
 8007678:	60fb      	str	r3, [r7, #12]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2b03      	cmp	r3, #3
 800767e:	d80d      	bhi.n	800769c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	00db      	lsls	r3, r3, #3
 8007684:	683a      	ldr	r2, [r7, #0]
 8007686:	fa22 f103 	lsr.w	r1, r2, r3
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4413      	add	r3, r2
 8007690:	b2ca      	uxtb	r2, r1
 8007692:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	3301      	adds	r3, #1
 8007698:	60fb      	str	r3, [r7, #12]
 800769a:	e7ee      	b.n	800767a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800769c:	bf00      	nop
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80076b8:	2300      	movs	r3, #0
 80076ba:	60fb      	str	r3, [r7, #12]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2b03      	cmp	r3, #3
 80076c0:	d811      	bhi.n	80076e6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	440a      	add	r2, r1
 80076cc:	7812      	ldrb	r2, [r2, #0]
 80076ce:	4611      	mov	r1, r2
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	00d2      	lsls	r2, r2, #3
 80076d4:	fa01 f202 	lsl.w	r2, r1, r2
 80076d8:	431a      	orrs	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	3301      	adds	r3, #1
 80076e2:	60fb      	str	r3, [r7, #12]
 80076e4:	e7ea      	b.n	80076bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80076e6:	bf00      	nop
 80076e8:	3714      	adds	r7, #20
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80076f2:	b480      	push	{r7}
 80076f4:	b085      	sub	sp, #20
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
 80076fa:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80076fc:	2300      	movs	r3, #0
 80076fe:	60fb      	str	r3, [r7, #12]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2b18      	cmp	r3, #24
 8007704:	dc1e      	bgt.n	8007744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4413      	add	r3, r2
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d111      	bne.n	800773c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	683a      	ldr	r2, [r7, #0]
 8007726:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	60da      	str	r2, [r3, #12]
        return true;
 8007738:	2301      	movs	r3, #1
 800773a:	e004      	b.n	8007746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	3301      	adds	r3, #1
 8007740:	60fb      	str	r3, [r7, #12]
 8007742:	e7dd      	b.n	8007700 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8007744:	2300      	movs	r3, #0
  }
 8007746:	4618      	mov	r0, r3
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
	...

08007754 <_ZN3ros15NodeHandleBase_C1Ev>:
class NodeHandleBase_
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	4a04      	ldr	r2, [pc, #16]	; (8007770 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	601a      	str	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4618      	mov	r0, r3
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	0800dcdc 	.word	0x0800dcdc

08007774 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
  NodeHandle_() : configured_(false)
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4618      	mov	r0, r3
 8007780:	f7ff ffe8 	bl	8007754 <_ZN3ros15NodeHandleBase_C1Ev>
 8007784:	4a3a      	ldr	r2, [pc, #232]	; (8007870 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	3304      	adds	r3, #4
 800778e:	4618      	mov	r0, r3
 8007790:	f7fa fea4 	bl	80024dc <_ZN13STM32HardwareC1Ev>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fa fb8e 	bl	8001ec4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80077a8:	2300      	movs	r3, #0
 80077aa:	617b      	str	r3, [r7, #20]
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	2b18      	cmp	r3, #24
 80077b0:	d80b      	bhi.n	80077ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4413      	add	r3, r2
 80077be:	2200      	movs	r2, #0
 80077c0:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	3301      	adds	r3, #1
 80077c6:	617b      	str	r3, [r7, #20]
 80077c8:	e7f0      	b.n	80077ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80077ca:	2300      	movs	r3, #0
 80077cc:	613b      	str	r3, [r7, #16]
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	2b18      	cmp	r3, #24
 80077d2:	d80a      	bhi.n	80077ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80077dc:	2100      	movs	r1, #0
 80077de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	3301      	adds	r3, #1
 80077e6:	613b      	str	r3, [r7, #16]
 80077e8:	e7f1      	b.n	80077ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80077ea:	2300      	movs	r3, #0
 80077ec:	60fb      	str	r3, [r7, #12]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077f4:	d20a      	bcs.n	800780c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4413      	add	r3, r2
 80077fc:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007800:	2200      	movs	r2, #0
 8007802:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	3301      	adds	r3, #1
 8007808:	60fb      	str	r3, [r7, #12]
 800780a:	e7f0      	b.n	80077ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800780c:	2300      	movs	r3, #0
 800780e:	60bb      	str	r3, [r7, #8]
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007816:	d20a      	bcs.n	800782e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	4413      	add	r3, r2
 800781e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8007822:	2200      	movs	r2, #0
 8007824:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	3301      	adds	r3, #1
 800782a:	60bb      	str	r3, [r7, #8]
 800782c:	e7f0      	b.n	8007810 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>
    req_param_resp.ints_length = 0;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    spin_timeout_ = 0;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4618      	mov	r0, r3
 800786a:	3718      	adds	r7, #24
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	0800db48 	.word	0x0800db48

08007874 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	4a04      	ldr	r2, [pc, #16]	; (8007890 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	601a      	str	r2, [r3, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4618      	mov	r0, r3
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	0800dcc4 	.word	0x0800dcc4

08007894 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
 80078a0:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7ff ffe5 	bl	8007874 <_ZN3ros11Subscriber_C1Ev>
 80078aa:	4a0b      	ldr	r2, [pc, #44]	; (80078d8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	601a      	str	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	3310      	adds	r3, #16
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7fb fc57 	bl	8003168 <_ZN13geometry_msgs5TwistC1Ev>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	659a      	str	r2, [r3, #88]	; 0x58
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	683a      	ldr	r2, [r7, #0]
 80078c4:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	609a      	str	r2, [r3, #8]
  };
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	0800db30 	.word	0x0800db30

080078dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
    return &hardware_;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	3304      	adds	r3, #4
  }
 80078e8:	4618      	mov	r0, r3
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  void initNode()
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
    hardware_.init();
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3304      	adds	r3, #4
 8007900:	4618      	mov	r0, r3
 8007902:	f7fa fe07 	bl	8002514 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8007926:	bf00      	nop
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800792e:	b480      	push	{r7}
 8007930:	b085      	sub	sp, #20
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8007938:	2300      	movs	r3, #0
 800793a:	60fb      	str	r3, [r7, #12]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2b18      	cmp	r3, #24
 8007940:	dc19      	bgt.n	8007976 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	f202 2222 	addw	r2, r2, #546	; 0x222
 800794a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10d      	bne.n	800796e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	f202 2222 	addw	r2, r2, #546	; 0x222
 800795c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	605a      	str	r2, [r3, #4]
        return true;
 800796a:	2301      	movs	r3, #1
 800796c:	e004      	b.n	8007978 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	3301      	adds	r3, #1
 8007972:	60fb      	str	r3, [r7, #12]
 8007974:	e7e2      	b.n	800793c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8007976:	2300      	movs	r3, #0
  }
 8007978:	4618      	mov	r0, r3
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	3304      	adds	r3, #4
 8007990:	4618      	mov	r0, r3
 8007992:	f7fa fead 	bl	80026f0 <_ZN13STM32Hardware4timeEv>
 8007996:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d903      	bls.n	80079b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d009      	beq.n	80079d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d903      	bls.n	80079d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d014      	beq.n	8007a04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	3304      	adds	r3, #4
 80079de:	4618      	mov	r0, r3
 80079e0:	f7fa fe86 	bl	80026f0 <_ZN13STM32Hardware4timeEv>
 80079e4:	4602      	mov	r2, r0
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	1ad2      	subs	r2, r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80079f0:	429a      	cmp	r2, r3
 80079f2:	bf8c      	ite	hi
 80079f4:	2301      	movhi	r3, #1
 80079f6:	2300      	movls	r3, #0
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d002      	beq.n	8007a04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80079fe:	f06f 0301 	mvn.w	r3, #1
 8007a02:	e194      	b.n	8007d2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	3304      	adds	r3, #4
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7fa fd9f 	bl	800254c <_ZN13STM32Hardware4readEv>
 8007a0e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f2c0 8174 	blt.w	8007d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	441a      	add	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007a2e:	2b07      	cmp	r3, #7
 8007a30:	d11e      	bne.n	8007a70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8007a38:	1c59      	adds	r1, r3, #1
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	b2d1      	uxtb	r1, r2
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	4413      	add	r3, r2
 8007a48:	460a      	mov	r2, r1
 8007a4a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8007a54:	1e5a      	subs	r2, r3, #1
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1b4      	bne.n	80079d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2208      	movs	r2, #8
 8007a6a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8007a6e:	e7af      	b.n	80079d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d128      	bne.n	8007acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	2bff      	cmp	r3, #255	; 0xff
 8007a7e:	d10d      	bne.n	8007a9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007a86:	1c5a      	adds	r2, r3, #1
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f103 0214 	add.w	r2, r3, #20
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8007a9a:	e799      	b.n	80079d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7fa fe25 	bl	80026f0 <_ZN13STM32Hardware4timeEv>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	bf8c      	ite	hi
 8007ab4:	2301      	movhi	r3, #1
 8007ab6:	2300      	movls	r3, #0
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d088      	beq.n	80079d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8007ac6:	f06f 0301 	mvn.w	r3, #1
 8007aca:	e130      	b.n	8007d2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d118      	bne.n	8007b08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2bfe      	cmp	r3, #254	; 0xfe
 8007ada:	d107      	bne.n	8007aec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007ae2:	1c5a      	adds	r2, r3, #1
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8007aea:	e771      	b.n	80079d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f47f af68 	bne.w	80079d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f918 	bl	8007d36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8007b06:	e763      	b.n	80079d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d113      	bne.n	8007b3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007b28:	1c5a      	adds	r2, r3, #1
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8007b38:	e74a      	b.n	80079d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	d110      	bne.n	8007b66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	021b      	lsls	r3, r3, #8
 8007b4e:	441a      	add	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007b5c:	1c5a      	adds	r2, r3, #1
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8007b64:	e734      	b.n	80079d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007b6c:	2b04      	cmp	r3, #4
 8007b6e:	d116      	bne.n	8007b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8007b76:	425a      	negs	r2, r3
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	b2d2      	uxtb	r2, r2
 8007b7c:	bf58      	it	pl
 8007b7e:	4253      	negpl	r3, r2
 8007b80:	2bff      	cmp	r3, #255	; 0xff
 8007b82:	d107      	bne.n	8007b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007b8a:	1c5a      	adds	r2, r3, #1
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8007b92:	e71d      	b.n	80079d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8007b9c:	e718      	b.n	80079d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007ba4:	2b05      	cmp	r3, #5
 8007ba6:	d10f      	bne.n	8007bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007bb6:	1c5a      	adds	r2, r3, #1
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8007bc6:	e703      	b.n	80079d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007bce:	2b06      	cmp	r3, #6
 8007bd0:	d117      	bne.n	8007c02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	021b      	lsls	r3, r3, #8
 8007bdc:	441a      	add	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2207      	movs	r2, #7
 8007be8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f47f aeec 	bne.w	80079d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2208      	movs	r2, #8
 8007bfc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8007c00:	e6e6      	b.n	80079d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007c08:	2b08      	cmp	r3, #8
 8007c0a:	f47f aee1 	bne.w	80079d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8007c1c:	425a      	negs	r2, r3
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	b2d2      	uxtb	r2, r2
 8007c22:	bf58      	it	pl
 8007c24:	4253      	negpl	r3, r2
 8007c26:	2bff      	cmp	r3, #255	; 0xff
 8007c28:	f47f aed2 	bne.w	80079d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d110      	bne.n	8007c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f87d 	bl	8007d36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f898 	bl	8007d72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8007c52:	f04f 33ff 	mov.w	r3, #4294967295
 8007c56:	e06a      	b.n	8007d2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8007c5e:	2b0a      	cmp	r3, #10
 8007c60:	d107      	bne.n	8007c72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f960 	bl	8007f30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8007c70:	e6ae      	b.n	80079d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8007c78:	2b06      	cmp	r3, #6
 8007c7a:	d10e      	bne.n	8007c9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007c88:	4619      	mov	r1, r3
 8007c8a:	4610      	mov	r0, r2
 8007c8c:	f7fa fa4f 	bl	800212e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8007c98:	e69a      	b.n	80079d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8007ca0:	2b0b      	cmp	r3, #11
 8007ca2:	d104      	bne.n	8007cae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8007cac:	e690      	b.n	80079d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8007cb4:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f43f ae84 	beq.w	80079d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8007cce:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007cd8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8007ce2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8007cfa:	4611      	mov	r1, r2
 8007cfc:	4798      	blx	r3
    while (true)
 8007cfe:	e667      	b.n	80079d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8007d00:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00f      	beq.n	8007d2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	1ad3      	subs	r3, r2, r3
 8007d16:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d906      	bls.n	8007d2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f809 	bl	8007d36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8007d2c:	2300      	movs	r3, #0
  }
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b086      	sub	sp, #24
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8007d3e:	f107 030c 	add.w	r3, r7, #12
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7f9 fd5a 	bl	80017fc <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f107 020c 	add.w	r2, r7, #12
 8007d52:	210a      	movs	r1, #10
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	4798      	blx	r3
    rt_time = hardware_.time();
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	3304      	adds	r3, #4
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7fa fcc7 	bl	80026f0 <_ZN13STM32Hardware4timeEv>
 8007d62:	4602      	mov	r2, r0
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8007d6a:	bf00      	nop
 8007d6c:	3718      	adds	r7, #24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8007d72:	b590      	push	{r4, r7, lr}
 8007d74:	b08b      	sub	sp, #44	; 0x2c
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8007d7a:	f107 030c 	add.w	r3, r7, #12
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7f9 fe2c 	bl	80019dc <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8007d84:	2300      	movs	r3, #0
 8007d86:	627b      	str	r3, [r7, #36]	; 0x24
 8007d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8a:	2b18      	cmp	r3, #24
 8007d8c:	dc63      	bgt.n	8007e56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d92:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	4413      	add	r3, r2
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d056      	beq.n	8007e4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4413      	add	r3, r2
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4413      	add	r3, r2
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	6859      	ldr	r1, [r3, #4]
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dda:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	4413      	add	r3, r2
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3308      	adds	r3, #8
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4608      	mov	r0, r1
 8007dee:	4798      	blx	r3
 8007df0:	4603      	mov	r3, r0
 8007df2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4413      	add	r3, r2
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	6859      	ldr	r1, [r3, #4]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4413      	add	r3, r2
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	330c      	adds	r3, #12
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4608      	mov	r0, r1
 8007e1c:	4798      	blx	r3
 8007e1e:	4603      	mov	r3, r0
 8007e20:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8007e22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e26:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681c      	ldr	r4, [r3, #0]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7fa fb2e 	bl	800249e <_ZN3ros9Publisher15getEndpointTypeEv>
 8007e42:	4601      	mov	r1, r0
 8007e44:	f107 030c 	add.w	r3, r7, #12
 8007e48:	461a      	mov	r2, r3
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	3301      	adds	r3, #1
 8007e52:	627b      	str	r3, [r7, #36]	; 0x24
 8007e54:	e798      	b.n	8007d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8007e56:	2300      	movs	r3, #0
 8007e58:	627b      	str	r3, [r7, #36]	; 0x24
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5c:	2b18      	cmp	r3, #24
 8007e5e:	dc5f      	bgt.n	8007f20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e64:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d053      	beq.n	8007f18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e74:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e86:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e96:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007e9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ea2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	3308      	adds	r3, #8
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4608      	mov	r0, r1
 8007eb2:	4798      	blx	r3
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ebc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007ec0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ec8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	330c      	adds	r3, #12
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4608      	mov	r0, r1
 8007ed8:	4798      	blx	r3
 8007eda:	4603      	mov	r3, r0
 8007edc:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8007ede:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ee2:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681c      	ldr	r4, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eee:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007ef2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007efa:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	3304      	adds	r3, #4
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4608      	mov	r0, r1
 8007f0a:	4798      	blx	r3
 8007f0c:	4601      	mov	r1, r0
 8007f0e:	f107 030c 	add.w	r3, r7, #12
 8007f12:	461a      	mov	r2, r3
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8007f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f1e:	e79c      	b.n	8007e5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8007f28:	bf00      	nop
 8007f2a:	372c      	adds	r7, #44	; 0x2c
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd90      	pop	{r4, r7, pc}

08007f30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8007f3a:	f107 0308 	add.w	r3, r7, #8
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7f9 fc5c 	bl	80017fc <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	3304      	adds	r3, #4
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fa fbd1 	bl	80026f0 <_ZN13STM32Hardware4timeEv>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8007f5a:	f107 0308 	add.w	r3, r7, #8
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7f9 fcbb 	bl	80018dc <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	4915      	ldr	r1, [pc, #84]	; (8007fc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8007f6c:	fba1 1303 	umull	r1, r3, r1, r3
 8007f70:	099b      	lsrs	r3, r3, #6
 8007f72:	4413      	add	r3, r2
 8007f74:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8007f76:	6939      	ldr	r1, [r7, #16]
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	4b11      	ldr	r3, [pc, #68]	; (8007fc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8007f7c:	fba3 0302 	umull	r0, r3, r3, r2
 8007f80:	099b      	lsrs	r3, r3, #6
 8007f82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007f86:	fb00 f303 	mul.w	r3, r0, r3
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	4a0d      	ldr	r2, [pc, #52]	; (8007fc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8007f8e:	fb02 f303 	mul.w	r3, r2, r3
 8007f92:	440b      	add	r3, r1
 8007f94:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8007f96:	f107 0308 	add.w	r3, r7, #8
 8007f9a:	3304      	adds	r3, #4
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f8a4 	bl	80080ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7fa fba1 	bl	80026f0 <_ZN13STM32Hardware4timeEv>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8007fb6:	bf00      	nop
 8007fb8:	3718      	adds	r7, #24
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	10624dd3 	.word	0x10624dd3
 8007fc4:	000f4240 	.word	0x000f4240

08007fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b088      	sub	sp, #32
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	2b63      	cmp	r3, #99	; 0x63
 8007fd8:	dd09      	ble.n	8007fee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8007fe0:	f083 0301 	eor.w	r3, r3, #1
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	e077      	b.n	80080de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8007ffa:	3207      	adds	r2, #7
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	4798      	blx	r3
 8008002:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	22ff      	movs	r2, #255	; 0xff
 8008008:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	22fe      	movs	r2, #254	; 0xfe
 8008010:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	b2da      	uxtb	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	b29b      	uxth	r3, r3
 8008022:	121b      	asrs	r3, r3, #8
 8008024:	b2da      	uxtb	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8008038:	4413      	add	r3, r2
 800803a:	b2db      	uxtb	r3, r3
 800803c:	43db      	mvns	r3, r3
 800803e:	b2da      	uxtb	r2, r3
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	b2da      	uxtb	r2, r3
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	b21b      	sxth	r3, r3
 8008054:	121b      	asrs	r3, r3, #8
 8008056:	b2da      	uxtb	r2, r3
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 800805e:	2300      	movs	r3, #0
 8008060:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8008062:	2305      	movs	r3, #5
 8008064:	61bb      	str	r3, [r7, #24]
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	3306      	adds	r3, #6
 800806a:	69ba      	ldr	r2, [r7, #24]
 800806c:	429a      	cmp	r2, r3
 800806e:	dc0d      	bgt.n	800808c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	4413      	add	r3, r2
 8008076:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	461a      	mov	r2, r3
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	4413      	add	r3, r2
 8008082:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	3301      	adds	r3, #1
 8008088:	61bb      	str	r3, [r7, #24]
 800808a:	e7ec      	b.n	8008066 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	3307      	adds	r3, #7
 8008090:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	425a      	negs	r2, r3
 8008096:	b2db      	uxtb	r3, r3
 8008098:	b2d2      	uxtb	r2, r2
 800809a:	bf58      	it	pl
 800809c:	4253      	negpl	r3, r2
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	1c59      	adds	r1, r3, #1
 80080a4:	6179      	str	r1, [r7, #20]
 80080a6:	43d2      	mvns	r2, r2
 80080a8:	b2d1      	uxtb	r1, r2
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	4413      	add	r3, r2
 80080ae:	460a      	mov	r2, r1
 80080b0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080ba:	dc0a      	bgt.n	80080d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	1d18      	adds	r0, r3, #4
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	4619      	mov	r1, r3
 80080ca:	f7fa facb 	bl	8002664 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	e005      	b.n	80080de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80080d2:	4905      	ldr	r1, [pc, #20]	; (80080e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f000 f849 	bl	800816c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80080da:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 80080de:	4618      	mov	r0, r3
 80080e0:	3720      	adds	r7, #32
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	0800daa0 	.word	0x0800daa0

080080ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	3304      	adds	r3, #4
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7fa faf8 	bl	80026f0 <_ZN13STM32Hardware4timeEv>
 8008100:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	4915      	ldr	r1, [pc, #84]	; (8008160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800810a:	fba1 1303 	umull	r1, r3, r1, r3
 800810e:	099b      	lsrs	r3, r3, #6
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	1e5a      	subs	r2, r3, #1
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	6859      	ldr	r1, [r3, #4]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	4b0f      	ldr	r3, [pc, #60]	; (8008160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8008122:	fba3 0302 	umull	r0, r3, r3, r2
 8008126:	099b      	lsrs	r3, r3, #6
 8008128:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800812c:	fb00 f303 	mul.w	r3, r0, r3
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	4a0c      	ldr	r2, [pc, #48]	; (8008164 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8008134:	fb02 f303 	mul.w	r3, r2, r3
 8008138:	1aca      	subs	r2, r1, r3
 800813a:	4b0b      	ldr	r3, [pc, #44]	; (8008168 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 800813c:	4413      	add	r3, r2
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8008150:	4619      	mov	r1, r3
 8008152:	4610      	mov	r0, r2
 8008154:	f7f8 fed6 	bl	8000f04 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8008158:	bf00      	nop
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	10624dd3 	.word	0x10624dd3
 8008164:	000f4240 	.word	0x000f4240
 8008168:	3b9aca00 	.word	0x3b9aca00

0800816c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	2103      	movs	r1, #3
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f804 	bl	8008188 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8008180:	bf00      	nop
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8008188:	b580      	push	{r7, lr}
 800818a:	b088      	sub	sp, #32
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	460b      	mov	r3, r1
 8008192:	607a      	str	r2, [r7, #4]
 8008194:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8008196:	f107 0314 	add.w	r3, r7, #20
 800819a:	4618      	mov	r0, r3
 800819c:	f7f9 fde2 	bl	8001d64 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80081a0:	7afb      	ldrb	r3, [r7, #11]
 80081a2:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f107 0214 	add.w	r2, r7, #20
 80081b2:	2107      	movs	r1, #7
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	4798      	blx	r3
  }
 80081b8:	bf00      	nop
 80081ba:	3720      	adds	r7, #32
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <_Z41__static_initialization_and_destruction_0ii>:
	last_velocity[RIGHT] = wheel_r / step_time;
	last_theta = theta;
	*/
	return true;

}
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d140      	bne.n	8008252 <_Z41__static_initialization_and_destruction_0ii+0x92>
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d13b      	bne.n	8008252 <_Z41__static_initialization_and_destruction_0ii+0x92>
MotorDriver motorDriver;
 80081da:	4825      	ldr	r0, [pc, #148]	; (8008270 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80081dc:	f7ff f97a 	bl	80074d4 <_ZN11MotorDriverC1Ev>
ros::NodeHandle nh;
 80081e0:	4824      	ldr	r0, [pc, #144]	; (8008274 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80081e2:	f7ff fac7 	bl	8007774 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 80081e6:	4824      	ldr	r0, [pc, #144]	; (8008278 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80081e8:	f7fa fa8e 	bl	8002708 <_ZN8std_msgs6StringC1Ev>
geometry_msgs::Twist twist;
 80081ec:	4823      	ldr	r0, [pc, #140]	; (800827c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80081ee:	f7fa ffbb 	bl	8003168 <_ZN13geometry_msgs5TwistC1Ev>
sensor_msgs::Imu imu_msg;
 80081f2:	4823      	ldr	r0, [pc, #140]	; (8008280 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80081f4:	f7fe fab6 	bl	8006764 <_ZN11sensor_msgs3ImuC1Ev>
nav_msgs::Odometry odom;
 80081f8:	4822      	ldr	r0, [pc, #136]	; (8008284 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80081fa:	f7fd fa0b 	bl	8005614 <_ZN8nav_msgs8OdometryC1Ev>
sensor_msgs::JointState joint_states;
 80081fe:	4822      	ldr	r0, [pc, #136]	; (8008288 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8008200:	f7fd fb00 	bl	8005804 <_ZN11sensor_msgs10JointStateC1Ev>
ros::Time current_time;
 8008204:	4821      	ldr	r0, [pc, #132]	; (800828c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8008206:	f7f9 fad8 	bl	80017ba <_ZN3ros4TimeC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub_cmd("cmd_vel", &cbCmd);
 800820a:	2301      	movs	r3, #1
 800820c:	4a20      	ldr	r2, [pc, #128]	; (8008290 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800820e:	4921      	ldr	r1, [pc, #132]	; (8008294 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8008210:	4821      	ldr	r0, [pc, #132]	; (8008298 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8008212:	f7ff fb3f 	bl	8007894 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub_state("from_stm", &str_msg);
 8008216:	2300      	movs	r3, #0
 8008218:	4a17      	ldr	r2, [pc, #92]	; (8008278 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800821a:	4920      	ldr	r1, [pc, #128]	; (800829c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 800821c:	4820      	ldr	r0, [pc, #128]	; (80082a0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 800821e:	f7fa f913 	bl	8002448 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher imu_pub("imu", &imu_msg);
 8008222:	2300      	movs	r3, #0
 8008224:	4a16      	ldr	r2, [pc, #88]	; (8008280 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8008226:	491f      	ldr	r1, [pc, #124]	; (80082a4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8008228:	481f      	ldr	r0, [pc, #124]	; (80082a8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 800822a:	f7fa f90d 	bl	8002448 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher odom_pub("odom", &odom);
 800822e:	2300      	movs	r3, #0
 8008230:	4a14      	ldr	r2, [pc, #80]	; (8008284 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8008232:	491e      	ldr	r1, [pc, #120]	; (80082ac <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8008234:	481e      	ldr	r0, [pc, #120]	; (80082b0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8008236:	f7fa f907 	bl	8002448 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher joint_states_pub("joint_states", &joint_states);
 800823a:	2300      	movs	r3, #0
 800823c:	4a12      	ldr	r2, [pc, #72]	; (8008288 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800823e:	491d      	ldr	r1, [pc, #116]	; (80082b4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8008240:	481d      	ldr	r0, [pc, #116]	; (80082b8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8008242:	f7fa f901 	bl	8002448 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
geometry_msgs::TransformStamped odom_tf;
 8008246:	481d      	ldr	r0, [pc, #116]	; (80082bc <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8008248:	f7fc f83c 	bl	80042c4 <_ZN13geometry_msgs16TransformStampedC1Ev>
tf::TransformBroadcaster tf_broadcaster;
 800824c:	481c      	ldr	r0, [pc, #112]	; (80082c0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 800824e:	f7ff f929 	bl	80074a4 <_ZN2tf20TransformBroadcasterC1Ev>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d107      	bne.n	8008268 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800825e:	4293      	cmp	r3, r2
 8008260:	d102      	bne.n	8008268 <_Z41__static_initialization_and_destruction_0ii+0xa8>
MotorDriver motorDriver;
 8008262:	4803      	ldr	r0, [pc, #12]	; (8008270 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8008264:	f7ff f941 	bl	80074ea <_ZN11MotorDriverD1Ev>
}
 8008268:	bf00      	nop
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	200000c8 	.word	0x200000c8
 8008274:	20000100 	.word	0x20000100
 8008278:	20000a3c 	.word	0x20000a3c
 800827c:	20000a48 	.word	0x20000a48
 8008280:	20000a90 	.word	0x20000a90
 8008284:	20000be8 	.word	0x20000be8
 8008288:	20000ef0 	.word	0x20000ef0
 800828c:	20000f50 	.word	0x20000f50
 8008290:	08007501 	.word	0x08007501
 8008294:	0800dadc 	.word	0x0800dadc
 8008298:	20000f68 	.word	0x20000f68
 800829c:	0800dae4 	.word	0x0800dae4
 80082a0:	20000fc8 	.word	0x20000fc8
 80082a4:	0800daf0 	.word	0x0800daf0
 80082a8:	20000fdc 	.word	0x20000fdc
 80082ac:	0800daf4 	.word	0x0800daf4
 80082b0:	20000ff0 	.word	0x20000ff0
 80082b4:	0800dafc 	.word	0x0800dafc
 80082b8:	20001004 	.word	0x20001004
 80082bc:	20001018 	.word	0x20001018
 80082c0:	20001088 	.word	0x20001088

080082c4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	3310      	adds	r3, #16
 80082d2:	6839      	ldr	r1, [r7, #0]
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fa ff89 	bl	80031ec <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	3210      	adds	r2, #16
 80082e2:	4610      	mov	r0, r2
 80082e4:	4798      	blx	r3
  }
 80082e6:	bf00      	nop
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80082ee:	b480      	push	{r7}
 80082f0:	b083      	sub	sp, #12
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 80082fa:	4618      	mov	r0, r3
 80082fc:	370c      	adds	r7, #12
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr

08008306 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8008306:	b580      	push	{r7, lr}
 8008308:	b082      	sub	sp, #8
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	3310      	adds	r3, #16
 8008312:	4618      	mov	r0, r3
 8008314:	f7fa ff90 	bl	8003238 <_ZN13geometry_msgs5Twist7getTypeEv>
 8008318:	4603      	mov	r3, r0
  }
 800831a:	4618      	mov	r0, r3
 800831c:	3708      	adds	r7, #8
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8008322:	b580      	push	{r7, lr}
 8008324:	b082      	sub	sp, #8
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	3310      	adds	r3, #16
 800832e:	4618      	mov	r0, r3
 8008330:	f7fa ff90 	bl	8003254 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8008334:	4603      	mov	r3, r0
  }
 8008336:	4618      	mov	r0, r3
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800833e:	b480      	push	{r7}
 8008340:	b083      	sub	sp, #12
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
    return configured_;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 800834c:	4618      	mov	r0, r3
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <_GLOBAL__sub_I_motorDriver>:
 8008358:	b580      	push	{r7, lr}
 800835a:	af00      	add	r7, sp, #0
 800835c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008360:	2001      	movs	r0, #1
 8008362:	f7ff ff2d 	bl	80081c0 <_Z41__static_initialization_and_destruction_0ii>
 8008366:	bd80      	pop	{r7, pc}

08008368 <_GLOBAL__sub_D_motorDriver>:
 8008368:	b580      	push	{r7, lr}
 800836a:	af00      	add	r7, sp, #0
 800836c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008370:	2000      	movs	r0, #0
 8008372:	f7ff ff25 	bl	80081c0 <_Z41__static_initialization_and_destruction_0ii>
 8008376:	bd80      	pop	{r7, pc}

08008378 <_ZN11MotorDriver4initEP20__UART_HandleTypeDefS1_>:
#include "motor_driver.h"

void MotorDriver::init(UART_HandleTypeDef* left, UART_HandleTypeDef* right){
 8008378:	b580      	push	{r7, lr}
 800837a:	b08a      	sub	sp, #40	; 0x28
 800837c:	af04      	add	r7, sp, #16
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
	leftPort = left;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	601a      	str	r2, [r3, #0]
	rightPort = right;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	605a      	str	r2, [r3, #4]
	uint16_t length = LEN_X_BAUD;
 8008390:	2301      	movs	r3, #1
 8008392:	82fb      	strh	r3, [r7, #22]
	uint8_t data [1] ={TARGET_BAUD};
 8008394:	2303      	movs	r3, #3
 8008396:	743b      	strb	r3, [r7, #16]
	leftPort.Init.OverSampling = UART_OVERSAMPLING_16;
	HAL_HalfDuplex_Init(leftPort);
	*/

	// set motor ID
	length = LEN_X_ID;
 8008398:	2301      	movs	r3, #1
 800839a:	82fb      	strh	r3, [r7, #22]
	left_packet = (uint8_t *)malloc(length + 12 + (length / 3));
 800839c:	8afb      	ldrh	r3, [r7, #22]
 800839e:	330c      	adds	r3, #12
 80083a0:	8afa      	ldrh	r2, [r7, #22]
 80083a2:	49b3      	ldr	r1, [pc, #716]	; (8008670 <_ZN11MotorDriver4initEP20__UART_HandleTypeDefS1_+0x2f8>)
 80083a4:	fba1 1202 	umull	r1, r2, r1, r2
 80083a8:	0852      	lsrs	r2, r2, #1
 80083aa:	b292      	uxth	r2, r2
 80083ac:	4413      	add	r3, r2
 80083ae:	4618      	mov	r0, r3
 80083b0:	f004 ffec 	bl	800d38c <malloc>
 80083b4:	4603      	mov	r3, r0
 80083b6:	461a      	mov	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	609a      	str	r2, [r3, #8]
	right_packet = (uint8_t *)malloc(length + 12 + (length / 3));
 80083bc:	8afb      	ldrh	r3, [r7, #22]
 80083be:	330c      	adds	r3, #12
 80083c0:	8afa      	ldrh	r2, [r7, #22]
 80083c2:	49ab      	ldr	r1, [pc, #684]	; (8008670 <_ZN11MotorDriver4initEP20__UART_HandleTypeDefS1_+0x2f8>)
 80083c4:	fba1 1202 	umull	r1, r2, r1, r2
 80083c8:	0852      	lsrs	r2, r2, #1
 80083ca:	b292      	uxth	r2, r2
 80083cc:	4413      	add	r3, r2
 80083ce:	4618      	mov	r0, r3
 80083d0:	f004 ffdc 	bl	800d38c <malloc>
 80083d4:	4603      	mov	r3, r0
 80083d6:	461a      	mov	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	60da      	str	r2, [r3, #12]
	data[0] = LEFT_ID;
 80083dc:	2301      	movs	r3, #1
 80083de:	743b      	strb	r3, [r7, #16]
	makeData(left_packet, DEFAULT_ID, INST_WRITE, data, length, ADDR_X_ID);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6899      	ldr	r1, [r3, #8]
 80083e4:	2307      	movs	r3, #7
 80083e6:	9302      	str	r3, [sp, #8]
 80083e8:	8afb      	ldrh	r3, [r7, #22]
 80083ea:	9301      	str	r3, [sp, #4]
 80083ec:	f107 0310 	add.w	r3, r7, #16
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	2303      	movs	r3, #3
 80083f4:	2201      	movs	r2, #1
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f000 f9aa 	bl	8008750 <_ZN11MotorDriver8makeDataEPhhhS0_tt>
	data[0] = RIGHT_ID;
 80083fc:	2302      	movs	r3, #2
 80083fe:	743b      	strb	r3, [r7, #16]
	makeData(right_packet, DEFAULT_ID, INST_WRITE, data, length, ADDR_X_ID);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	68d9      	ldr	r1, [r3, #12]
 8008404:	2307      	movs	r3, #7
 8008406:	9302      	str	r3, [sp, #8]
 8008408:	8afb      	ldrh	r3, [r7, #22]
 800840a:	9301      	str	r3, [sp, #4]
 800840c:	f107 0310 	add.w	r3, r7, #16
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	2303      	movs	r3, #3
 8008414:	2201      	movs	r2, #1
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f000 f99a 	bl	8008750 <_ZN11MotorDriver8makeDataEPhhhS0_tt>

	txPacket(left_packet, right_packet);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6899      	ldr	r1, [r3, #8]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	461a      	mov	r2, r3
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f000 fdd4 	bl	8008fd4 <_ZN11MotorDriver8txPacketEPhS0_>
	free(left_packet);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	4618      	mov	r0, r3
 8008432:	f004 ffb3 	bl	800d39c <free>
	free(right_packet);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	4618      	mov	r0, r3
 800843c:	f004 ffae 	bl	800d39c <free>

	/************************* MOTOR INITIAL SETTING END *************************************/

	// set drive mode
	length = LEN_X_DRIVE_MODE;
 8008440:	2301      	movs	r3, #1
 8008442:	82fb      	strh	r3, [r7, #22]

	left_packet = (uint8_t *)malloc(length + 12 + (length / 3));
 8008444:	8afb      	ldrh	r3, [r7, #22]
 8008446:	330c      	adds	r3, #12
 8008448:	8afa      	ldrh	r2, [r7, #22]
 800844a:	4989      	ldr	r1, [pc, #548]	; (8008670 <_ZN11MotorDriver4initEP20__UART_HandleTypeDefS1_+0x2f8>)
 800844c:	fba1 1202 	umull	r1, r2, r1, r2
 8008450:	0852      	lsrs	r2, r2, #1
 8008452:	b292      	uxth	r2, r2
 8008454:	4413      	add	r3, r2
 8008456:	4618      	mov	r0, r3
 8008458:	f004 ff98 	bl	800d38c <malloc>
 800845c:	4603      	mov	r3, r0
 800845e:	461a      	mov	r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	609a      	str	r2, [r3, #8]
	right_packet = (uint8_t *)malloc(length + 12 + (length / 3));
 8008464:	8afb      	ldrh	r3, [r7, #22]
 8008466:	330c      	adds	r3, #12
 8008468:	8afa      	ldrh	r2, [r7, #22]
 800846a:	4981      	ldr	r1, [pc, #516]	; (8008670 <_ZN11MotorDriver4initEP20__UART_HandleTypeDefS1_+0x2f8>)
 800846c:	fba1 1202 	umull	r1, r2, r1, r2
 8008470:	0852      	lsrs	r2, r2, #1
 8008472:	b292      	uxth	r2, r2
 8008474:	4413      	add	r3, r2
 8008476:	4618      	mov	r0, r3
 8008478:	f004 ff88 	bl	800d38c <malloc>
 800847c:	4603      	mov	r3, r0
 800847e:	461a      	mov	r2, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	60da      	str	r2, [r3, #12]

	data[0] = LEFT_DRIVE_MODE;
 8008484:	2300      	movs	r3, #0
 8008486:	743b      	strb	r3, [r7, #16]
	makeData(left_packet, LEFT_ID, INST_WRITE, data, length, ADDR_X_DRIVE_MODE);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6899      	ldr	r1, [r3, #8]
 800848c:	230a      	movs	r3, #10
 800848e:	9302      	str	r3, [sp, #8]
 8008490:	8afb      	ldrh	r3, [r7, #22]
 8008492:	9301      	str	r3, [sp, #4]
 8008494:	f107 0310 	add.w	r3, r7, #16
 8008498:	9300      	str	r3, [sp, #0]
 800849a:	2303      	movs	r3, #3
 800849c:	2201      	movs	r2, #1
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f000 f956 	bl	8008750 <_ZN11MotorDriver8makeDataEPhhhS0_tt>
	data[0] = RIGHT_DRIVE_MODE;
 80084a4:	2301      	movs	r3, #1
 80084a6:	743b      	strb	r3, [r7, #16]
	makeData(right_packet, RIGHT_ID, INST_WRITE, data, length, ADDR_X_DRIVE_MODE);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	68d9      	ldr	r1, [r3, #12]
 80084ac:	230a      	movs	r3, #10
 80084ae:	9302      	str	r3, [sp, #8]
 80084b0:	8afb      	ldrh	r3, [r7, #22]
 80084b2:	9301      	str	r3, [sp, #4]
 80084b4:	f107 0310 	add.w	r3, r7, #16
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	2303      	movs	r3, #3
 80084bc:	2202      	movs	r2, #2
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f000 f946 	bl	8008750 <_ZN11MotorDriver8makeDataEPhhhS0_tt>

	txPacket(left_packet, right_packet);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6899      	ldr	r1, [r3, #8]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	461a      	mov	r2, r3
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f000 fd80 	bl	8008fd4 <_ZN11MotorDriver8txPacketEPhS0_>
	free(left_packet);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	4618      	mov	r0, r3
 80084da:	f004 ff5f 	bl	800d39c <free>
	free(right_packet);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f004 ff5a 	bl	800d39c <free>

	// set operation mode
	length = LEN_X_OP_MODE;
 80084e8:	2301      	movs	r3, #1
 80084ea:	82fb      	strh	r3, [r7, #22]

	left_packet = (uint8_t *)malloc(length + 12 + (length / 3));
 80084ec:	8afb      	ldrh	r3, [r7, #22]
 80084ee:	330c      	adds	r3, #12
 80084f0:	8afa      	ldrh	r2, [r7, #22]
 80084f2:	495f      	ldr	r1, [pc, #380]	; (8008670 <_ZN11MotorDriver4initEP20__UART_HandleTypeDefS1_+0x2f8>)
 80084f4:	fba1 1202 	umull	r1, r2, r1, r2
 80084f8:	0852      	lsrs	r2, r2, #1
 80084fa:	b292      	uxth	r2, r2
 80084fc:	4413      	add	r3, r2
 80084fe:	4618      	mov	r0, r3
 8008500:	f004 ff44 	bl	800d38c <malloc>
 8008504:	4603      	mov	r3, r0
 8008506:	461a      	mov	r2, r3
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	609a      	str	r2, [r3, #8]
	right_packet = (uint8_t *)malloc(length + 12 + (length / 3));
 800850c:	8afb      	ldrh	r3, [r7, #22]
 800850e:	330c      	adds	r3, #12
 8008510:	8afa      	ldrh	r2, [r7, #22]
 8008512:	4957      	ldr	r1, [pc, #348]	; (8008670 <_ZN11MotorDriver4initEP20__UART_HandleTypeDefS1_+0x2f8>)
 8008514:	fba1 1202 	umull	r1, r2, r1, r2
 8008518:	0852      	lsrs	r2, r2, #1
 800851a:	b292      	uxth	r2, r2
 800851c:	4413      	add	r3, r2
 800851e:	4618      	mov	r0, r3
 8008520:	f004 ff34 	bl	800d38c <malloc>
 8008524:	4603      	mov	r3, r0
 8008526:	461a      	mov	r2, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	60da      	str	r2, [r3, #12]

	data[0] = VEL_CONTROL_MODE;
 800852c:	2301      	movs	r3, #1
 800852e:	743b      	strb	r3, [r7, #16]
	makeData(left_packet, LEFT_ID, INST_WRITE, data, length, ADDR_X_OP_MODE);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6899      	ldr	r1, [r3, #8]
 8008534:	230b      	movs	r3, #11
 8008536:	9302      	str	r3, [sp, #8]
 8008538:	8afb      	ldrh	r3, [r7, #22]
 800853a:	9301      	str	r3, [sp, #4]
 800853c:	f107 0310 	add.w	r3, r7, #16
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	2303      	movs	r3, #3
 8008544:	2201      	movs	r2, #1
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	f000 f902 	bl	8008750 <_ZN11MotorDriver8makeDataEPhhhS0_tt>
	makeData(right_packet, RIGHT_ID, INST_WRITE, data, length, ADDR_X_OP_MODE);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	68d9      	ldr	r1, [r3, #12]
 8008550:	230b      	movs	r3, #11
 8008552:	9302      	str	r3, [sp, #8]
 8008554:	8afb      	ldrh	r3, [r7, #22]
 8008556:	9301      	str	r3, [sp, #4]
 8008558:	f107 0310 	add.w	r3, r7, #16
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	2303      	movs	r3, #3
 8008560:	2202      	movs	r2, #2
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f000 f8f4 	bl	8008750 <_ZN11MotorDriver8makeDataEPhhhS0_tt>

	txPacket(left_packet, right_packet);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6899      	ldr	r1, [r3, #8]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	461a      	mov	r2, r3
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 fd2e 	bl	8008fd4 <_ZN11MotorDriver8txPacketEPhS0_>
	free(left_packet);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	4618      	mov	r0, r3
 800857e:	f004 ff0d 	bl	800d39c <free>
	free(right_packet);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	4618      	mov	r0, r3
 8008588:	f004 ff08 	bl	800d39c <free>

	// set torque
	length = LEN_X_TORQUE_ENABLE;
 800858c:	2301      	movs	r3, #1
 800858e:	82fb      	strh	r3, [r7, #22]
	left_packet = (uint8_t *)malloc(length + 12 + (length / 3));
 8008590:	8afb      	ldrh	r3, [r7, #22]
 8008592:	330c      	adds	r3, #12
 8008594:	8afa      	ldrh	r2, [r7, #22]
 8008596:	4936      	ldr	r1, [pc, #216]	; (8008670 <_ZN11MotorDriver4initEP20__UART_HandleTypeDefS1_+0x2f8>)
 8008598:	fba1 1202 	umull	r1, r2, r1, r2
 800859c:	0852      	lsrs	r2, r2, #1
 800859e:	b292      	uxth	r2, r2
 80085a0:	4413      	add	r3, r2
 80085a2:	4618      	mov	r0, r3
 80085a4:	f004 fef2 	bl	800d38c <malloc>
 80085a8:	4603      	mov	r3, r0
 80085aa:	461a      	mov	r2, r3
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	609a      	str	r2, [r3, #8]
	right_packet = (uint8_t *)malloc(length + 12 + (length / 3));
 80085b0:	8afb      	ldrh	r3, [r7, #22]
 80085b2:	330c      	adds	r3, #12
 80085b4:	8afa      	ldrh	r2, [r7, #22]
 80085b6:	492e      	ldr	r1, [pc, #184]	; (8008670 <_ZN11MotorDriver4initEP20__UART_HandleTypeDefS1_+0x2f8>)
 80085b8:	fba1 1202 	umull	r1, r2, r1, r2
 80085bc:	0852      	lsrs	r2, r2, #1
 80085be:	b292      	uxth	r2, r2
 80085c0:	4413      	add	r3, r2
 80085c2:	4618      	mov	r0, r3
 80085c4:	f004 fee2 	bl	800d38c <malloc>
 80085c8:	4603      	mov	r3, r0
 80085ca:	461a      	mov	r2, r3
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	60da      	str	r2, [r3, #12]

	data[0] = TORQUE_ENABLE;
 80085d0:	2301      	movs	r3, #1
 80085d2:	743b      	strb	r3, [r7, #16]
	makeData(left_packet, LEFT_ID, INST_WRITE, data, length, ADDR_X_TORQUE_ENABLE);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6899      	ldr	r1, [r3, #8]
 80085d8:	2340      	movs	r3, #64	; 0x40
 80085da:	9302      	str	r3, [sp, #8]
 80085dc:	8afb      	ldrh	r3, [r7, #22]
 80085de:	9301      	str	r3, [sp, #4]
 80085e0:	f107 0310 	add.w	r3, r7, #16
 80085e4:	9300      	str	r3, [sp, #0]
 80085e6:	2303      	movs	r3, #3
 80085e8:	2201      	movs	r2, #1
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f000 f8b0 	bl	8008750 <_ZN11MotorDriver8makeDataEPhhhS0_tt>
	makeData(right_packet, RIGHT_ID, INST_WRITE, data, length, ADDR_X_TORQUE_ENABLE);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	68d9      	ldr	r1, [r3, #12]
 80085f4:	2340      	movs	r3, #64	; 0x40
 80085f6:	9302      	str	r3, [sp, #8]
 80085f8:	8afb      	ldrh	r3, [r7, #22]
 80085fa:	9301      	str	r3, [sp, #4]
 80085fc:	f107 0310 	add.w	r3, r7, #16
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	2303      	movs	r3, #3
 8008604:	2202      	movs	r2, #2
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f000 f8a2 	bl	8008750 <_ZN11MotorDriver8makeDataEPhhhS0_tt>

	txPacket(left_packet, right_packet);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6899      	ldr	r1, [r3, #8]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	461a      	mov	r2, r3
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f000 fcdc 	bl	8008fd4 <_ZN11MotorDriver8txPacketEPhS0_>
	free(left_packet);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	4618      	mov	r0, r3
 8008622:	f004 febb 	bl	800d39c <free>
	free(right_packet);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	4618      	mov	r0, r3
 800862c:	f004 feb6 	bl	800d39c <free>

	// Instruction for reading encoder
	readPacketL[PKT_HEADER0] = 0xFF;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	22ff      	movs	r2, #255	; 0xff
 8008634:	741a      	strb	r2, [r3, #16]
	readPacketL[PKT_HEADER1] = 0xFF;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	22ff      	movs	r2, #255	; 0xff
 800863a:	745a      	strb	r2, [r3, #17]
	readPacketL[PKT_HEADER2] = 0xFD;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	22fd      	movs	r2, #253	; 0xfd
 8008640:	749a      	strb	r2, [r3, #18]
	readPacketL[PKT_RESERVED] = 0x00;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2200      	movs	r2, #0
 8008646:	74da      	strb	r2, [r3, #19]
	readPacketL[PKT_ID] = 1;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2201      	movs	r2, #1
 800864c:	751a      	strb	r2, [r3, #20]
	readPacketL[PKT_LENGTH_L] = DXL_LOBYTE(2 + 5);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2207      	movs	r2, #7
 8008652:	755a      	strb	r2, [r3, #21]
	readPacketL[PKT_LENGTH_H] = DXL_HIBYTE(2 + 5);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	759a      	strb	r2, [r3, #22]
	readPacketL[PKT_INSTRUCTION] = INST_READ;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2202      	movs	r2, #2
 800865e:	75da      	strb	r2, [r3, #23]
	readPacketL[PKT_PARAMETER0 + 0] = (uint8_t)DXL_LOBYTE(ADDR_X_PRESENT_POSITION);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2284      	movs	r2, #132	; 0x84
 8008664:	761a      	strb	r2, [r3, #24]
	readPacketL[PKT_PARAMETER0 + 1] = (uint8_t)DXL_HIBYTE(ADDR_X_PRESENT_POSITION);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	765a      	strb	r2, [r3, #25]
 800866c:	e002      	b.n	8008674 <_ZN11MotorDriver4initEP20__UART_HandleTypeDefS1_+0x2fc>
 800866e:	bf00      	nop
 8008670:	aaaaaaab 	.word	0xaaaaaaab
	readPacketL[PKT_PARAMETER0 + 2] = (uint8_t)DXL_LOBYTE(LEN_X_PRESENT_POSITION);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2204      	movs	r2, #4
 8008678:	769a      	strb	r2, [r3, #26]
	readPacketL[PKT_PARAMETER0 + 3] = (uint8_t)DXL_HIBYTE(LEN_X_PRESENT_POSITION);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	76da      	strb	r2, [r3, #27]

	readPacketR[PKT_HEADER0] = 0xFF;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	22ff      	movs	r2, #255	; 0xff
 8008684:	779a      	strb	r2, [r3, #30]
	readPacketR[PKT_HEADER1] = 0xFF;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	22ff      	movs	r2, #255	; 0xff
 800868a:	77da      	strb	r2, [r3, #31]
	readPacketR[PKT_HEADER2] = 0xFD;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	22fd      	movs	r2, #253	; 0xfd
 8008690:	f883 2020 	strb.w	r2, [r3, #32]
	readPacketR[PKT_RESERVED] = 0x00;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	readPacketR[PKT_ID] = 2;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2202      	movs	r2, #2
 80086a0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	readPacketR[PKT_LENGTH_L] = DXL_LOBYTE(2 + 5);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2207      	movs	r2, #7
 80086a8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	readPacketR[PKT_LENGTH_H] = DXL_HIBYTE(2 + 5);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	readPacketR[PKT_INSTRUCTION] = INST_READ;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2202      	movs	r2, #2
 80086b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	readPacketR[PKT_PARAMETER0 + 0] = (uint8_t)DXL_LOBYTE(ADDR_X_PRESENT_POSITION);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2284      	movs	r2, #132	; 0x84
 80086c0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	readPacketR[PKT_PARAMETER0 + 1] = (uint8_t)DXL_HIBYTE(ADDR_X_PRESENT_POSITION);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	readPacketR[PKT_PARAMETER0 + 2] = (uint8_t)DXL_LOBYTE(LEN_X_PRESENT_POSITION);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2204      	movs	r2, #4
 80086d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	readPacketR[PKT_PARAMETER0 + 3] = (uint8_t)DXL_HIBYTE(LEN_X_PRESENT_POSITION);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29


	addStuffing(readPacketL);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	3310      	adds	r3, #16
 80086e0:	4619      	mov	r1, r3
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f000 fb2c 	bl	8008d40 <_ZN11MotorDriver11addStuffingEPh>
	uint16_t crcL = updateCRC(0, readPacketL, 14 - 2); // 2: CRC16
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f103 0210 	add.w	r2, r3, #16
 80086ee:	230c      	movs	r3, #12
 80086f0:	2100      	movs	r1, #0
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f000 faf0 	bl	8008cd8 <_ZN11MotorDriver9updateCRCEtPht>
 80086f8:	4603      	mov	r3, r0
 80086fa:	82bb      	strh	r3, [r7, #20]
	readPacketL[15 - 2] = DXL_LOBYTE(crcL);
 80086fc:	8abb      	ldrh	r3, [r7, #20]
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	775a      	strb	r2, [r3, #29]
	readPacketL[15 - 1] = DXL_HIBYTE(crcL);
 8008704:	8abb      	ldrh	r3, [r7, #20]
 8008706:	0a1b      	lsrs	r3, r3, #8
 8008708:	b29b      	uxth	r3, r3
 800870a:	b2da      	uxtb	r2, r3
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	779a      	strb	r2, [r3, #30]
	addStuffing(readPacketR);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	331e      	adds	r3, #30
 8008714:	4619      	mov	r1, r3
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f000 fb12 	bl	8008d40 <_ZN11MotorDriver11addStuffingEPh>
	uint16_t crcR = updateCRC(0, readPacketR, 14 - 2); // 2: CRC16
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f103 021e 	add.w	r2, r3, #30
 8008722:	230c      	movs	r3, #12
 8008724:	2100      	movs	r1, #0
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f000 fad6 	bl	8008cd8 <_ZN11MotorDriver9updateCRCEtPht>
 800872c:	4603      	mov	r3, r0
 800872e:	827b      	strh	r3, [r7, #18]
	readPacketR[15 - 2] = DXL_LOBYTE(crcR);
 8008730:	8a7b      	ldrh	r3, [r7, #18]
 8008732:	b2da      	uxtb	r2, r3
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	readPacketR[15 - 1] = DXL_HIBYTE(crcR);
 800873a:	8a7b      	ldrh	r3, [r7, #18]
 800873c:	0a1b      	lsrs	r3, r3, #8
 800873e:	b29b      	uxth	r3, r3
 8008740:	b2da      	uxtb	r2, r3
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c


}
 8008748:	bf00      	nop
 800874a:	3718      	adds	r7, #24
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <_ZN11MotorDriver8makeDataEPhhhS0_tt>:

void MotorDriver::makeData(uint8_t* packet, uint8_t id, uint8_t op, uint8_t* data, uint16_t dataLength, uint16_t address){
 8008750:	b480      	push	{r7}
 8008752:	b087      	sub	sp, #28
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	4611      	mov	r1, r2
 800875c:	461a      	mov	r2, r3
 800875e:	460b      	mov	r3, r1
 8008760:	71fb      	strb	r3, [r7, #7]
 8008762:	4613      	mov	r3, r2
 8008764:	71bb      	strb	r3, [r7, #6]

	packet[PKT_ID] = id;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	3304      	adds	r3, #4
 800876a:	79fa      	ldrb	r2, [r7, #7]
 800876c:	701a      	strb	r2, [r3, #0]
	packet[PKT_LENGTH_L] = DXL_LOBYTE(dataLength + 5);
 800876e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008770:	b2da      	uxtb	r2, r3
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	3305      	adds	r3, #5
 8008776:	3205      	adds	r2, #5
 8008778:	b2d2      	uxtb	r2, r2
 800877a:	701a      	strb	r2, [r3, #0]
	packet[PKT_LENGTH_H] = DXL_HIBYTE(dataLength + 5);
 800877c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800877e:	3305      	adds	r3, #5
 8008780:	4618      	mov	r0, r3
 8008782:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8008786:	f04f 0200 	mov.w	r2, #0
 800878a:	f04f 0300 	mov.w	r3, #0
 800878e:	0a02      	lsrs	r2, r0, #8
 8008790:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008794:	0a0b      	lsrs	r3, r1, #8
 8008796:	68b9      	ldr	r1, [r7, #8]
 8008798:	3106      	adds	r1, #6
 800879a:	b2d3      	uxtb	r3, r2
 800879c:	700b      	strb	r3, [r1, #0]
	packet[PKT_INSTRUCTION] = op;
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	3307      	adds	r3, #7
 80087a2:	79ba      	ldrb	r2, [r7, #6]
 80087a4:	701a      	strb	r2, [r3, #0]
	packet[PKT_PARAMETER0 + 0] = (uint8_t)DXL_LOBYTE(address);
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	3308      	adds	r3, #8
 80087aa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80087ac:	b2d2      	uxtb	r2, r2
 80087ae:	701a      	strb	r2, [r3, #0]
	packet[PKT_PARAMETER0 + 1] = (uint8_t)DXL_HIBYTE(address);
 80087b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087b2:	0a1b      	lsrs	r3, r3, #8
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	3309      	adds	r3, #9
 80087ba:	b2d2      	uxtb	r2, r2
 80087bc:	701a      	strb	r2, [r3, #0]

	for (uint16_t s = 0; s < dataLength; s++)
 80087be:	2300      	movs	r3, #0
 80087c0:	82fb      	strh	r3, [r7, #22]
 80087c2:	8afa      	ldrh	r2, [r7, #22]
 80087c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d20d      	bcs.n	80087e6 <_ZN11MotorDriver8makeDataEPhhhS0_tt+0x96>
		packet[PKT_PARAMETER0 + 2 + s] = data[s];
 80087ca:	8afb      	ldrh	r3, [r7, #22]
 80087cc:	6a3a      	ldr	r2, [r7, #32]
 80087ce:	441a      	add	r2, r3
 80087d0:	8afb      	ldrh	r3, [r7, #22]
 80087d2:	330a      	adds	r3, #10
 80087d4:	4619      	mov	r1, r3
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	440b      	add	r3, r1
 80087da:	7812      	ldrb	r2, [r2, #0]
 80087dc:	701a      	strb	r2, [r3, #0]
	for (uint16_t s = 0; s < dataLength; s++)
 80087de:	8afb      	ldrh	r3, [r7, #22]
 80087e0:	3301      	adds	r3, #1
 80087e2:	82fb      	strh	r3, [r7, #22]
 80087e4:	e7ed      	b.n	80087c2 <_ZN11MotorDriver8makeDataEPhhhS0_tt+0x72>
}
 80087e6:	bf00      	nop
 80087e8:	371c      	adds	r7, #28
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <_ZN11MotorDriver11readEncoderERlS0_>:


bool MotorDriver::readEncoder(int32_t &left_value, int32_t &right_value){
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b08e      	sub	sp, #56	; 0x38
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	60f8      	str	r0, [r7, #12]
 80087fa:	60b9      	str	r1, [r7, #8]
 80087fc:	607a      	str	r2, [r7, #4]

  HAL_UART_Transmit(leftPort, readPacketL, 14, 10);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6818      	ldr	r0, [r3, #0]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f103 0110 	add.w	r1, r3, #16
 8008808:	230a      	movs	r3, #10
 800880a:	220e      	movs	r2, #14
 800880c:	f003 fa90 	bl	800bd30 <HAL_UART_Transmit>
  HAL_UART_Transmit(rightPort, readPacketR, 14, 10);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6858      	ldr	r0, [r3, #4]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f103 011e 	add.w	r1, r3, #30
 800881a:	230a      	movs	r3, #10
 800881c:	220e      	movs	r2, #14
 800881e:	f003 fa87 	bl	800bd30 <HAL_UART_Transmit>

  HAL_HalfDuplex_EnableReceiver(leftPort);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4618      	mov	r0, r3
 8008828:	f003 ff50 	bl	800c6cc <HAL_HalfDuplex_EnableReceiver>
  HAL_HalfDuplex_EnableReceiver(rightPort);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	4618      	mov	r0, r3
 8008832:	f003 ff4b 	bl	800c6cc <HAL_HalfDuplex_EnableReceiver>
  
  uint8_t rpacketL[15], rpacketR[15];
  HAL_UART_Receive(leftPort, rpacketL, 15, 10);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6818      	ldr	r0, [r3, #0]
 800883a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800883e:	230a      	movs	r3, #10
 8008840:	220f      	movs	r2, #15
 8008842:	f003 fb07 	bl	800be54 <HAL_UART_Receive>
  HAL_UART_Receive(rightPort, rpacketR, 15, 10);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6858      	ldr	r0, [r3, #4]
 800884a:	f107 0114 	add.w	r1, r7, #20
 800884e:	230a      	movs	r3, #10
 8008850:	220f      	movs	r2, #15
 8008852:	f003 faff 	bl	800be54 <HAL_UART_Receive>

  HAL_HalfDuplex_EnableTransmitter(leftPort);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4618      	mov	r0, r3
 800885c:	f003 ff02 	bl	800c664 <HAL_HalfDuplex_EnableTransmitter>
  HAL_HalfDuplex_EnableTransmitter(rightPort);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	4618      	mov	r0, r3
 8008866:	f003 fefd 	bl	800c664 <HAL_HalfDuplex_EnableTransmitter>

  // check CRC
  uint16_t crcL = DXL_MAKEWORD(rpacketL[15-2], rpacketL[15-1]);
 800886a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800886e:	b21a      	sxth	r2, r3
 8008870:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008874:	021b      	lsls	r3, r3, #8
 8008876:	b21b      	sxth	r3, r3
 8008878:	4313      	orrs	r3, r2
 800887a:	b21b      	sxth	r3, r3
 800887c:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t crcR = DXL_MAKEWORD(rpacketR[15-2], rpacketR[15-1]);
 800887e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008882:	b21a      	sxth	r2, r3
 8008884:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008888:	021b      	lsls	r3, r3, #8
 800888a:	b21b      	sxth	r3, r3
 800888c:	4313      	orrs	r3, r2
 800888e:	b21b      	sxth	r3, r3
 8008890:	86bb      	strh	r3, [r7, #52]	; 0x34

  if (updateCRC(0, rpacketL, 13) != crcL || updateCRC(0, rpacketR, 13) != crcR){
 8008892:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008896:	230d      	movs	r3, #13
 8008898:	2100      	movs	r1, #0
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f000 fa1c 	bl	8008cd8 <_ZN11MotorDriver9updateCRCEtPht>
 80088a0:	4603      	mov	r3, r0
 80088a2:	461a      	mov	r2, r3
 80088a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d10b      	bne.n	80088c2 <_ZN11MotorDriver11readEncoderERlS0_+0xd0>
 80088aa:	f107 0214 	add.w	r2, r7, #20
 80088ae:	230d      	movs	r3, #13
 80088b0:	2100      	movs	r1, #0
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f000 fa10 	bl	8008cd8 <_ZN11MotorDriver9updateCRCEtPht>
 80088b8:	4603      	mov	r3, r0
 80088ba:	461a      	mov	r2, r3
 80088bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80088be:	4293      	cmp	r3, r2
 80088c0:	d001      	beq.n	80088c6 <_ZN11MotorDriver11readEncoderERlS0_+0xd4>
 80088c2:	2301      	movs	r3, #1
 80088c4:	e000      	b.n	80088c8 <_ZN11MotorDriver11readEncoderERlS0_+0xd6>
 80088c6:	2300      	movs	r3, #0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d001      	beq.n	80088d0 <_ZN11MotorDriver11readEncoderERlS0_+0xde>
    return false;
 80088cc:	2300      	movs	r3, #0
 80088ce:	e03d      	b.n	800894c <_ZN11MotorDriver11readEncoderERlS0_+0x15a>
  }

  removeStuffing(rpacketL);
 80088d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088d4:	4619      	mov	r1, r3
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f000 faf6 	bl	8008ec8 <_ZN11MotorDriver14removeStuffingEPh>
  removeStuffing(rpacketR);
 80088dc:	f107 0314 	add.w	r3, r7, #20
 80088e0:	4619      	mov	r1, r3
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f000 faf0 	bl	8008ec8 <_ZN11MotorDriver14removeStuffingEPh>

  left_value = DXL_MAKEDWORD(DXL_MAKEWORD(rpacketL[9 + 0], rpacketL[9 + 1]),
 80088e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80088ec:	b21a      	sxth	r2, r3
 80088ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80088f2:	021b      	lsls	r3, r3, #8
 80088f4:	b21b      	sxth	r3, r3
 80088f6:	4313      	orrs	r3, r2
 80088f8:	b21b      	sxth	r3, r3
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	4619      	mov	r1, r3
 80088fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008902:	b21a      	sxth	r2, r3
 8008904:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008908:	021b      	lsls	r3, r3, #8
 800890a:	b21b      	sxth	r3, r3
 800890c:	4313      	orrs	r3, r2
 800890e:	b21b      	sxth	r3, r3
 8008910:	b29b      	uxth	r3, r3
 8008912:	041b      	lsls	r3, r3, #16
 8008914:	430b      	orrs	r3, r1
 8008916:	461a      	mov	r2, r3
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	601a      	str	r2, [r3, #0]
                 DXL_MAKEWORD(rpacketL[9 + 2], rpacketL[9 + 3]));
  right_value = DXL_MAKEDWORD(DXL_MAKEWORD(rpacketR[9 + 0], rpacketR[9 + 1]),
 800891c:	7f7b      	ldrb	r3, [r7, #29]
 800891e:	b21a      	sxth	r2, r3
 8008920:	7fbb      	ldrb	r3, [r7, #30]
 8008922:	021b      	lsls	r3, r3, #8
 8008924:	b21b      	sxth	r3, r3
 8008926:	4313      	orrs	r3, r2
 8008928:	b21b      	sxth	r3, r3
 800892a:	b29b      	uxth	r3, r3
 800892c:	4619      	mov	r1, r3
 800892e:	7ffb      	ldrb	r3, [r7, #31]
 8008930:	b21a      	sxth	r2, r3
 8008932:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008936:	021b      	lsls	r3, r3, #8
 8008938:	b21b      	sxth	r3, r3
 800893a:	4313      	orrs	r3, r2
 800893c:	b21b      	sxth	r3, r3
 800893e:	b29b      	uxth	r3, r3
 8008940:	041b      	lsls	r3, r3, #16
 8008942:	430b      	orrs	r3, r1
 8008944:	461a      	mov	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	601a      	str	r2, [r3, #0]
                 DXL_MAKEWORD(rpacketR[9 + 2], rpacketR[9 + 3]));

	return true;
 800894a:	2301      	movs	r3, #1
}
 800894c:	4618      	mov	r0, r3
 800894e:	3738      	adds	r7, #56	; 0x38
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <_ZN11MotorDriver13writeVelocityExx>:
bool MotorDriver::writeVelocity(int64_t left_value, int64_t right_value){
 8008954:	b580      	push	{r7, lr}
 8008956:	b08e      	sub	sp, #56	; 0x38
 8008958:	af04      	add	r7, sp, #16
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	e9c7 2300 	strd	r2, r3, [r7]
	uint16_t length = LEN_X_GOAL_VELOCITY;
 8008960:	2304      	movs	r3, #4
 8008962:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t left_data_byte[4] = {0};
 8008964:	2300      	movs	r3, #0
 8008966:	61bb      	str	r3, [r7, #24]
	uint8_t right_data_byte[4] = {0};
 8008968:	2300      	movs	r3, #0
 800896a:	617b      	str	r3, [r7, #20]
	uint8_t* left_vel_packet;
	uint8_t* right_vel_packet;

	left_data_byte[0] = DXL_LOBYTE(DXL_LOWORD(left_value));
 800896c:	783b      	ldrb	r3, [r7, #0]
 800896e:	763b      	strb	r3, [r7, #24]
	left_data_byte[1] = DXL_HIBYTE(DXL_LOWORD(left_value));
 8008970:	883b      	ldrh	r3, [r7, #0]
 8008972:	0a1b      	lsrs	r3, r3, #8
 8008974:	b29b      	uxth	r3, r3
 8008976:	b2db      	uxtb	r3, r3
 8008978:	767b      	strb	r3, [r7, #25]
	left_data_byte[2] = DXL_LOBYTE(DXL_HIWORD(left_value));
 800897a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800897e:	f04f 0200 	mov.w	r2, #0
 8008982:	f04f 0300 	mov.w	r3, #0
 8008986:	0c02      	lsrs	r2, r0, #16
 8008988:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800898c:	0c0b      	lsrs	r3, r1, #16
 800898e:	b2d3      	uxtb	r3, r2
 8008990:	76bb      	strb	r3, [r7, #26]
	left_data_byte[3] = DXL_HIBYTE(DXL_HIWORD(left_value));
 8008992:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008996:	f04f 0200 	mov.w	r2, #0
 800899a:	f04f 0300 	mov.w	r3, #0
 800899e:	0c02      	lsrs	r2, r0, #16
 80089a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80089a4:	0c0b      	lsrs	r3, r1, #16
 80089a6:	b293      	uxth	r3, r2
 80089a8:	0a1b      	lsrs	r3, r3, #8
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	76fb      	strb	r3, [r7, #27]

	right_data_byte[0] = DXL_LOBYTE(DXL_LOWORD(right_value));
 80089b0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80089b4:	753b      	strb	r3, [r7, #20]
	right_data_byte[1] = DXL_HIBYTE(DXL_LOWORD(right_value));
 80089b6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80089b8:	0a1b      	lsrs	r3, r3, #8
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	757b      	strb	r3, [r7, #21]
	right_data_byte[2] = DXL_LOBYTE(DXL_HIWORD(right_value));
 80089c0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80089c4:	f04f 0200 	mov.w	r2, #0
 80089c8:	f04f 0300 	mov.w	r3, #0
 80089cc:	0c02      	lsrs	r2, r0, #16
 80089ce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80089d2:	0c0b      	lsrs	r3, r1, #16
 80089d4:	b2d3      	uxtb	r3, r2
 80089d6:	75bb      	strb	r3, [r7, #22]
	right_data_byte[3] = DXL_HIBYTE(DXL_HIWORD(right_value));
 80089d8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80089dc:	f04f 0200 	mov.w	r2, #0
 80089e0:	f04f 0300 	mov.w	r3, #0
 80089e4:	0c02      	lsrs	r2, r0, #16
 80089e6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80089ea:	0c0b      	lsrs	r3, r1, #16
 80089ec:	b293      	uxth	r3, r2
 80089ee:	0a1b      	lsrs	r3, r3, #8
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	75fb      	strb	r3, [r7, #23]

	// Send Data
	left_vel_packet = (uint8_t *)malloc(length + 12 + (length / 3));
 80089f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80089f8:	330c      	adds	r3, #12
 80089fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80089fc:	4921      	ldr	r1, [pc, #132]	; (8008a84 <_ZN11MotorDriver13writeVelocityExx+0x130>)
 80089fe:	fba1 1202 	umull	r1, r2, r1, r2
 8008a02:	0852      	lsrs	r2, r2, #1
 8008a04:	b292      	uxth	r2, r2
 8008a06:	4413      	add	r3, r2
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f004 fcbf 	bl	800d38c <malloc>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	623b      	str	r3, [r7, #32]
	right_vel_packet = (uint8_t *)malloc(length + 12 + (length / 3));
 8008a12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a14:	330c      	adds	r3, #12
 8008a16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008a18:	491a      	ldr	r1, [pc, #104]	; (8008a84 <_ZN11MotorDriver13writeVelocityExx+0x130>)
 8008a1a:	fba1 1202 	umull	r1, r2, r1, r2
 8008a1e:	0852      	lsrs	r2, r2, #1
 8008a20:	b292      	uxth	r2, r2
 8008a22:	4413      	add	r3, r2
 8008a24:	4618      	mov	r0, r3
 8008a26:	f004 fcb1 	bl	800d38c <malloc>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	61fb      	str	r3, [r7, #28]

	makeData(left_vel_packet, LEFT_ID, INST_WRITE, left_data_byte, LEN_X_GOAL_VELOCITY, ADDR_X_GOAL_VELOCITY);
 8008a2e:	2368      	movs	r3, #104	; 0x68
 8008a30:	9302      	str	r3, [sp, #8]
 8008a32:	2304      	movs	r3, #4
 8008a34:	9301      	str	r3, [sp, #4]
 8008a36:	f107 0318 	add.w	r3, r7, #24
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	2201      	movs	r2, #1
 8008a40:	6a39      	ldr	r1, [r7, #32]
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	f7ff fe84 	bl	8008750 <_ZN11MotorDriver8makeDataEPhhhS0_tt>
	makeData(right_vel_packet, RIGHT_ID, INST_WRITE, right_data_byte, LEN_X_GOAL_VELOCITY, ADDR_X_GOAL_VELOCITY);
 8008a48:	2368      	movs	r3, #104	; 0x68
 8008a4a:	9302      	str	r3, [sp, #8]
 8008a4c:	2304      	movs	r3, #4
 8008a4e:	9301      	str	r3, [sp, #4]
 8008a50:	f107 0314 	add.w	r3, r7, #20
 8008a54:	9300      	str	r3, [sp, #0]
 8008a56:	2303      	movs	r3, #3
 8008a58:	2202      	movs	r2, #2
 8008a5a:	69f9      	ldr	r1, [r7, #28]
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f7ff fe77 	bl	8008750 <_ZN11MotorDriver8makeDataEPhhhS0_tt>
	txPacket(left_vel_packet, right_vel_packet);
 8008a62:	69fa      	ldr	r2, [r7, #28]
 8008a64:	6a39      	ldr	r1, [r7, #32]
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f000 fab4 	bl	8008fd4 <_ZN11MotorDriver8txPacketEPhS0_>
	free(left_vel_packet);
 8008a6c:	6a38      	ldr	r0, [r7, #32]
 8008a6e:	f004 fc95 	bl	800d39c <free>
	free(right_vel_packet);
 8008a72:	69f8      	ldr	r0, [r7, #28]
 8008a74:	f004 fc92 	bl	800d39c <free>
	return true;
 8008a78:	2301      	movs	r3, #1
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3728      	adds	r7, #40	; 0x28
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	aaaaaaab 	.word	0xaaaaaaab

08008a88 <_ZN11MotorDriver12controlMotorEffPf>:

bool MotorDriver::controlMotor(const float wheel_radius, const float wheel_separation, float* value){
 8008a88:	b5b0      	push	{r4, r5, r7, lr}
 8008a8a:	b08a      	sub	sp, #40	; 0x28
 8008a8c:	af02      	add	r7, sp, #8
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	ed87 0a02 	vstr	s0, [r7, #8]
 8008a94:	edc7 0a01 	vstr	s1, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
	float wheel_velocity_cmd[2];

	float lin_vel = value[LINEAR];
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	61fb      	str	r3, [r7, #28]
	float ang_vel = value[ANGULAR];
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	61bb      	str	r3, [r7, #24]

	wheel_velocity_cmd[LEFT]   = lin_vel - (ang_vel * wheel_separation / 2);
 8008aa6:	ed97 7a06 	vldr	s14, [r7, #24]
 8008aaa:	edd7 7a01 	vldr	s15, [r7, #4]
 8008aae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008ab2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008ab6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008aba:	ed97 7a07 	vldr	s14, [r7, #28]
 8008abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ac2:	edc7 7a04 	vstr	s15, [r7, #16]
	wheel_velocity_cmd[RIGHT]  = lin_vel + (ang_vel * wheel_separation / 2);
 8008ac6:	ed97 7a06 	vldr	s14, [r7, #24]
 8008aca:	edd7 7a01 	vldr	s15, [r7, #4]
 8008ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ad2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008ad6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008ada:	edd7 7a07 	vldr	s15, [r7, #28]
 8008ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ae2:	edc7 7a05 	vstr	s15, [r7, #20]

	// convert cmd_vel value to dynamixel Goal Velocity(44) value
	wheel_velocity_cmd[LEFT] = constrain(wheel_velocity_cmd[LEFT] * VELOCITY_CONSTANT_VALUE / wheel_radius, -DXL_LIMIT_MAX_VELOCITY, DXL_LIMIT_MAX_VELOCITY);
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7f7 fcf9 	bl	80004e0 <__aeabi_f2d>
 8008aee:	a372      	add	r3, pc, #456	; (adr r3, 8008cb8 <_ZN11MotorDriver12controlMotorEffPf+0x230>)
 8008af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af4:	f7f7 fd4c 	bl	8000590 <__aeabi_dmul>
 8008af8:	4602      	mov	r2, r0
 8008afa:	460b      	mov	r3, r1
 8008afc:	4614      	mov	r4, r2
 8008afe:	461d      	mov	r5, r3
 8008b00:	68b8      	ldr	r0, [r7, #8]
 8008b02:	f7f7 fced 	bl	80004e0 <__aeabi_f2d>
 8008b06:	4602      	mov	r2, r0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	4629      	mov	r1, r5
 8008b0e:	f7f7 fe69 	bl	80007e4 <__aeabi_ddiv>
 8008b12:	4602      	mov	r2, r0
 8008b14:	460b      	mov	r3, r1
 8008b16:	4610      	mov	r0, r2
 8008b18:	4619      	mov	r1, r3
 8008b1a:	a36b      	add	r3, pc, #428	; (adr r3, 8008cc8 <_ZN11MotorDriver12controlMotorEffPf+0x240>)
 8008b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b20:	f7f7 ffb2 	bl	8000a88 <__aeabi_dcmple>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d001      	beq.n	8008b2e <_ZN11MotorDriver12controlMotorEffPf+0xa6>
 8008b2a:	4b69      	ldr	r3, [pc, #420]	; (8008cd0 <_ZN11MotorDriver12controlMotorEffPf+0x248>)
 8008b2c:	e040      	b.n	8008bb0 <_ZN11MotorDriver12controlMotorEffPf+0x128>
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7f7 fcd5 	bl	80004e0 <__aeabi_f2d>
 8008b36:	a360      	add	r3, pc, #384	; (adr r3, 8008cb8 <_ZN11MotorDriver12controlMotorEffPf+0x230>)
 8008b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3c:	f7f7 fd28 	bl	8000590 <__aeabi_dmul>
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	4614      	mov	r4, r2
 8008b46:	461d      	mov	r5, r3
 8008b48:	68b8      	ldr	r0, [r7, #8]
 8008b4a:	f7f7 fcc9 	bl	80004e0 <__aeabi_f2d>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	4620      	mov	r0, r4
 8008b54:	4629      	mov	r1, r5
 8008b56:	f7f7 fe45 	bl	80007e4 <__aeabi_ddiv>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	4610      	mov	r0, r2
 8008b60:	4619      	mov	r1, r3
 8008b62:	a357      	add	r3, pc, #348	; (adr r3, 8008cc0 <_ZN11MotorDriver12controlMotorEffPf+0x238>)
 8008b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b68:	f7f7 ff98 	bl	8000a9c <__aeabi_dcmpge>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d001      	beq.n	8008b76 <_ZN11MotorDriver12controlMotorEffPf+0xee>
 8008b72:	4b58      	ldr	r3, [pc, #352]	; (8008cd4 <_ZN11MotorDriver12controlMotorEffPf+0x24c>)
 8008b74:	e01c      	b.n	8008bb0 <_ZN11MotorDriver12controlMotorEffPf+0x128>
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7f7 fcb1 	bl	80004e0 <__aeabi_f2d>
 8008b7e:	a34e      	add	r3, pc, #312	; (adr r3, 8008cb8 <_ZN11MotorDriver12controlMotorEffPf+0x230>)
 8008b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b84:	f7f7 fd04 	bl	8000590 <__aeabi_dmul>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	4614      	mov	r4, r2
 8008b8e:	461d      	mov	r5, r3
 8008b90:	68b8      	ldr	r0, [r7, #8]
 8008b92:	f7f7 fca5 	bl	80004e0 <__aeabi_f2d>
 8008b96:	4602      	mov	r2, r0
 8008b98:	460b      	mov	r3, r1
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	4629      	mov	r1, r5
 8008b9e:	f7f7 fe21 	bl	80007e4 <__aeabi_ddiv>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4610      	mov	r0, r2
 8008ba8:	4619      	mov	r1, r3
 8008baa:	f7f7 ff8b 	bl	8000ac4 <__aeabi_d2f>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	613b      	str	r3, [r7, #16]
	wheel_velocity_cmd[RIGHT] = constrain(wheel_velocity_cmd[RIGHT] * VELOCITY_CONSTANT_VALUE / wheel_radius, -DXL_LIMIT_MAX_VELOCITY, DXL_LIMIT_MAX_VELOCITY);
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7f7 fc93 	bl	80004e0 <__aeabi_f2d>
 8008bba:	a33f      	add	r3, pc, #252	; (adr r3, 8008cb8 <_ZN11MotorDriver12controlMotorEffPf+0x230>)
 8008bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc0:	f7f7 fce6 	bl	8000590 <__aeabi_dmul>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4614      	mov	r4, r2
 8008bca:	461d      	mov	r5, r3
 8008bcc:	68b8      	ldr	r0, [r7, #8]
 8008bce:	f7f7 fc87 	bl	80004e0 <__aeabi_f2d>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	4629      	mov	r1, r5
 8008bda:	f7f7 fe03 	bl	80007e4 <__aeabi_ddiv>
 8008bde:	4602      	mov	r2, r0
 8008be0:	460b      	mov	r3, r1
 8008be2:	4610      	mov	r0, r2
 8008be4:	4619      	mov	r1, r3
 8008be6:	a338      	add	r3, pc, #224	; (adr r3, 8008cc8 <_ZN11MotorDriver12controlMotorEffPf+0x240>)
 8008be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bec:	f7f7 ff4c 	bl	8000a88 <__aeabi_dcmple>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <_ZN11MotorDriver12controlMotorEffPf+0x172>
 8008bf6:	4b36      	ldr	r3, [pc, #216]	; (8008cd0 <_ZN11MotorDriver12controlMotorEffPf+0x248>)
 8008bf8:	e040      	b.n	8008c7c <_ZN11MotorDriver12controlMotorEffPf+0x1f4>
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7f7 fc6f 	bl	80004e0 <__aeabi_f2d>
 8008c02:	a32d      	add	r3, pc, #180	; (adr r3, 8008cb8 <_ZN11MotorDriver12controlMotorEffPf+0x230>)
 8008c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c08:	f7f7 fcc2 	bl	8000590 <__aeabi_dmul>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4614      	mov	r4, r2
 8008c12:	461d      	mov	r5, r3
 8008c14:	68b8      	ldr	r0, [r7, #8]
 8008c16:	f7f7 fc63 	bl	80004e0 <__aeabi_f2d>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	4620      	mov	r0, r4
 8008c20:	4629      	mov	r1, r5
 8008c22:	f7f7 fddf 	bl	80007e4 <__aeabi_ddiv>
 8008c26:	4602      	mov	r2, r0
 8008c28:	460b      	mov	r3, r1
 8008c2a:	4610      	mov	r0, r2
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	a324      	add	r3, pc, #144	; (adr r3, 8008cc0 <_ZN11MotorDriver12controlMotorEffPf+0x238>)
 8008c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c34:	f7f7 ff32 	bl	8000a9c <__aeabi_dcmpge>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d001      	beq.n	8008c42 <_ZN11MotorDriver12controlMotorEffPf+0x1ba>
 8008c3e:	4b25      	ldr	r3, [pc, #148]	; (8008cd4 <_ZN11MotorDriver12controlMotorEffPf+0x24c>)
 8008c40:	e01c      	b.n	8008c7c <_ZN11MotorDriver12controlMotorEffPf+0x1f4>
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7f7 fc4b 	bl	80004e0 <__aeabi_f2d>
 8008c4a:	a31b      	add	r3, pc, #108	; (adr r3, 8008cb8 <_ZN11MotorDriver12controlMotorEffPf+0x230>)
 8008c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c50:	f7f7 fc9e 	bl	8000590 <__aeabi_dmul>
 8008c54:	4602      	mov	r2, r0
 8008c56:	460b      	mov	r3, r1
 8008c58:	4614      	mov	r4, r2
 8008c5a:	461d      	mov	r5, r3
 8008c5c:	68b8      	ldr	r0, [r7, #8]
 8008c5e:	f7f7 fc3f 	bl	80004e0 <__aeabi_f2d>
 8008c62:	4602      	mov	r2, r0
 8008c64:	460b      	mov	r3, r1
 8008c66:	4620      	mov	r0, r4
 8008c68:	4629      	mov	r1, r5
 8008c6a:	f7f7 fdbb 	bl	80007e4 <__aeabi_ddiv>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	460b      	mov	r3, r1
 8008c72:	4610      	mov	r0, r2
 8008c74:	4619      	mov	r1, r3
 8008c76:	f7f7 ff25 	bl	8000ac4 <__aeabi_d2f>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	617b      	str	r3, [r7, #20]

	if (writeVelocity((int64_t)wheel_velocity_cmd[LEFT], (int64_t)wheel_velocity_cmd[RIGHT]))
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7f7 ff87 	bl	8000b94 <__aeabi_f2lz>
 8008c86:	4604      	mov	r4, r0
 8008c88:	460d      	mov	r5, r1
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7f7 ff81 	bl	8000b94 <__aeabi_f2lz>
 8008c92:	4602      	mov	r2, r0
 8008c94:	460b      	mov	r3, r1
 8008c96:	e9cd 2300 	strd	r2, r3, [sp]
 8008c9a:	4622      	mov	r2, r4
 8008c9c:	462b      	mov	r3, r5
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f7ff fe58 	bl	8008954 <_ZN11MotorDriver13writeVelocityExx>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d001      	beq.n	8008cae <_ZN11MotorDriver12controlMotorEffPf+0x226>
		return true;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e000      	b.n	8008cb0 <_ZN11MotorDriver12controlMotorEffPf+0x228>
	else
		return false;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3720      	adds	r7, #32
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8008cb8:	ea8d7d01 	.word	0xea8d7d01
 8008cbc:	4044d995 	.word	0x4044d995
 8008cc0:	00000000 	.word	0x00000000
 8008cc4:	40709000 	.word	0x40709000
 8008cc8:	00000000 	.word	0x00000000
 8008ccc:	c0709000 	.word	0xc0709000
 8008cd0:	c3848000 	.word	0xc3848000
 8008cd4:	43848000 	.word	0x43848000

08008cd8 <_ZN11MotorDriver9updateCRCEtPht>:

unsigned short MotorDriver::updateCRC(uint16_t crc_accum, uint8_t *data_blk_ptr, uint16_t data_blk_size)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b087      	sub	sp, #28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	607a      	str	r2, [r7, #4]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	817b      	strh	r3, [r7, #10]
 8008ce8:	4613      	mov	r3, r2
 8008cea:	813b      	strh	r3, [r7, #8]
  0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264,
  0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E,
  0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219, 0x0208,
  0x820D, 0x8207, 0x0202 };

  for (uint16_t j = 0; j < data_blk_size; j++)
 8008cec:	2300      	movs	r3, #0
 8008cee:	82fb      	strh	r3, [r7, #22]
 8008cf0:	8afa      	ldrh	r2, [r7, #22]
 8008cf2:	893b      	ldrh	r3, [r7, #8]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d21a      	bcs.n	8008d2e <_ZN11MotorDriver9updateCRCEtPht+0x56>
  {
    i = ((uint16_t)(crc_accum >> 8) ^ *data_blk_ptr++) & 0xFF;
 8008cf8:	897b      	ldrh	r3, [r7, #10]
 8008cfa:	121b      	asrs	r3, r3, #8
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	1c59      	adds	r1, r3, #1
 8008d02:	6079      	str	r1, [r7, #4]
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	4053      	eors	r3, r2
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	82bb      	strh	r3, [r7, #20]
    crc_accum = (crc_accum << 8) ^ crc_table[i];
 8008d10:	897b      	ldrh	r3, [r7, #10]
 8008d12:	021b      	lsls	r3, r3, #8
 8008d14:	b21a      	sxth	r2, r3
 8008d16:	8abb      	ldrh	r3, [r7, #20]
 8008d18:	4908      	ldr	r1, [pc, #32]	; (8008d3c <_ZN11MotorDriver9updateCRCEtPht+0x64>)
 8008d1a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8008d1e:	b21b      	sxth	r3, r3
 8008d20:	4053      	eors	r3, r2
 8008d22:	b21b      	sxth	r3, r3
 8008d24:	817b      	strh	r3, [r7, #10]
  for (uint16_t j = 0; j < data_blk_size; j++)
 8008d26:	8afb      	ldrh	r3, [r7, #22]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	82fb      	strh	r3, [r7, #22]
 8008d2c:	e7e0      	b.n	8008cf0 <_ZN11MotorDriver9updateCRCEtPht+0x18>
  }

  return crc_accum;
 8008d2e:	897b      	ldrh	r3, [r7, #10]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	371c      	adds	r7, #28
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr
 8008d3c:	0800dd60 	.word	0x0800dd60

08008d40 <_ZN11MotorDriver11addStuffingEPh>:

void MotorDriver::addStuffing(uint8_t *packet)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b089      	sub	sp, #36	; 0x24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  int packet_length_in = DXL_MAKEWORD(packet[PKT_LENGTH_L], packet[PKT_LENGTH_H]);
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	3305      	adds	r3, #5
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	b21a      	sxth	r2, r3
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	3306      	adds	r3, #6
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	021b      	lsls	r3, r3, #8
 8008d5a:	b21b      	sxth	r3, r3
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	b21b      	sxth	r3, r3
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	613b      	str	r3, [r7, #16]
  int packet_length_out = packet_length_in;
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	61fb      	str	r3, [r7, #28]

  if (packet_length_in < 8) // INSTRUCTION, ADDR_L, ADDR_H, CRC16_L, CRC16_H + FF FF FD
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	2b07      	cmp	r3, #7
 8008d6c:	f340 80a4 	ble.w	8008eb8 <_ZN11MotorDriver11addStuffingEPh+0x178>
    return;

  uint8_t *packet_ptr;
  uint16_t packet_length_before_crc = packet_length_in - 2;
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	3b02      	subs	r3, #2
 8008d76:	81fb      	strh	r3, [r7, #14]
  for (uint16_t i = 3; i < packet_length_before_crc; i++)
 8008d78:	2303      	movs	r3, #3
 8008d7a:	837b      	strh	r3, [r7, #26]
 8008d7c:	8b7a      	ldrh	r2, [r7, #26]
 8008d7e:	89fb      	ldrh	r3, [r7, #14]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d219      	bcs.n	8008db8 <_ZN11MotorDriver11addStuffingEPh+0x78>
  {
    packet_ptr = &packet[i+PKT_INSTRUCTION-2];
 8008d84:	8b7b      	ldrh	r3, [r7, #26]
 8008d86:	3305      	adds	r3, #5
 8008d88:	683a      	ldr	r2, [r7, #0]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	60bb      	str	r3, [r7, #8]
    if (packet_ptr[0] == 0xFF && packet_ptr[1] == 0xFF && packet_ptr[2] == 0xFD)
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	2bff      	cmp	r3, #255	; 0xff
 8008d94:	d10c      	bne.n	8008db0 <_ZN11MotorDriver11addStuffingEPh+0x70>
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	2bff      	cmp	r3, #255	; 0xff
 8008d9e:	d107      	bne.n	8008db0 <_ZN11MotorDriver11addStuffingEPh+0x70>
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	3302      	adds	r3, #2
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	2bfd      	cmp	r3, #253	; 0xfd
 8008da8:	d102      	bne.n	8008db0 <_ZN11MotorDriver11addStuffingEPh+0x70>
      packet_length_out++;
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	3301      	adds	r3, #1
 8008dae:	61fb      	str	r3, [r7, #28]
  for (uint16_t i = 3; i < packet_length_before_crc; i++)
 8008db0:	8b7b      	ldrh	r3, [r7, #26]
 8008db2:	3301      	adds	r3, #1
 8008db4:	837b      	strh	r3, [r7, #26]
 8008db6:	e7e1      	b.n	8008d7c <_ZN11MotorDriver11addStuffingEPh+0x3c>
  }

  if (packet_length_in == packet_length_out)  // no stuffing required
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d07d      	beq.n	8008ebc <_ZN11MotorDriver11addStuffingEPh+0x17c>
    return;

  uint16_t out_index  = packet_length_out + 6 - 2;  // last index before crc
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	3304      	adds	r3, #4
 8008dc6:	833b      	strh	r3, [r7, #24]
  uint16_t in_index   = packet_length_in + 6 - 2;   // last index before crc
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	3304      	adds	r3, #4
 8008dce:	82fb      	strh	r3, [r7, #22]
  while (out_index != in_index)
 8008dd0:	8b3a      	ldrh	r2, [r7, #24]
 8008dd2:	8afb      	ldrh	r3, [r7, #22]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d059      	beq.n	8008e8c <_ZN11MotorDriver11addStuffingEPh+0x14c>
  {
    if (packet[in_index] == 0xFD && packet[in_index-1] == 0xFF && packet[in_index-2] == 0xFF)
 8008dd8:	8afb      	ldrh	r3, [r7, #22]
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	4413      	add	r3, r2
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	2bfd      	cmp	r3, #253	; 0xfd
 8008de2:	d144      	bne.n	8008e6e <_ZN11MotorDriver11addStuffingEPh+0x12e>
 8008de4:	8afb      	ldrh	r3, [r7, #22]
 8008de6:	3b01      	subs	r3, #1
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	4413      	add	r3, r2
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	2bff      	cmp	r3, #255	; 0xff
 8008df0:	d13d      	bne.n	8008e6e <_ZN11MotorDriver11addStuffingEPh+0x12e>
 8008df2:	8afb      	ldrh	r3, [r7, #22]
 8008df4:	3b02      	subs	r3, #2
 8008df6:	683a      	ldr	r2, [r7, #0]
 8008df8:	4413      	add	r3, r2
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	2bff      	cmp	r3, #255	; 0xff
 8008dfe:	d136      	bne.n	8008e6e <_ZN11MotorDriver11addStuffingEPh+0x12e>
    {
      packet[out_index--] = 0xFD; // byte stuffing
 8008e00:	8b3b      	ldrh	r3, [r7, #24]
 8008e02:	1e5a      	subs	r2, r3, #1
 8008e04:	833a      	strh	r2, [r7, #24]
 8008e06:	461a      	mov	r2, r3
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	22fd      	movs	r2, #253	; 0xfd
 8008e0e:	701a      	strb	r2, [r3, #0]
      if (out_index != in_index)
 8008e10:	8b3a      	ldrh	r2, [r7, #24]
 8008e12:	8afb      	ldrh	r3, [r7, #22]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d038      	beq.n	8008e8a <_ZN11MotorDriver11addStuffingEPh+0x14a>
      {
        packet[out_index--] = packet[in_index--]; // FD
 8008e18:	8afb      	ldrh	r3, [r7, #22]
 8008e1a:	1e5a      	subs	r2, r3, #1
 8008e1c:	82fa      	strh	r2, [r7, #22]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	441a      	add	r2, r3
 8008e24:	8b3b      	ldrh	r3, [r7, #24]
 8008e26:	1e59      	subs	r1, r3, #1
 8008e28:	8339      	strh	r1, [r7, #24]
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	440b      	add	r3, r1
 8008e30:	7812      	ldrb	r2, [r2, #0]
 8008e32:	701a      	strb	r2, [r3, #0]
        packet[out_index--] = packet[in_index--]; // FF
 8008e34:	8afb      	ldrh	r3, [r7, #22]
 8008e36:	1e5a      	subs	r2, r3, #1
 8008e38:	82fa      	strh	r2, [r7, #22]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	441a      	add	r2, r3
 8008e40:	8b3b      	ldrh	r3, [r7, #24]
 8008e42:	1e59      	subs	r1, r3, #1
 8008e44:	8339      	strh	r1, [r7, #24]
 8008e46:	4619      	mov	r1, r3
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	440b      	add	r3, r1
 8008e4c:	7812      	ldrb	r2, [r2, #0]
 8008e4e:	701a      	strb	r2, [r3, #0]
        packet[out_index--] = packet[in_index--]; // FF
 8008e50:	8afb      	ldrh	r3, [r7, #22]
 8008e52:	1e5a      	subs	r2, r3, #1
 8008e54:	82fa      	strh	r2, [r7, #22]
 8008e56:	461a      	mov	r2, r3
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	441a      	add	r2, r3
 8008e5c:	8b3b      	ldrh	r3, [r7, #24]
 8008e5e:	1e59      	subs	r1, r3, #1
 8008e60:	8339      	strh	r1, [r7, #24]
 8008e62:	4619      	mov	r1, r3
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	440b      	add	r3, r1
 8008e68:	7812      	ldrb	r2, [r2, #0]
 8008e6a:	701a      	strb	r2, [r3, #0]
      if (out_index != in_index)
 8008e6c:	e00d      	b.n	8008e8a <_ZN11MotorDriver11addStuffingEPh+0x14a>
      }
    }
    else
    {
      packet[out_index--] = packet[in_index--];
 8008e6e:	8afb      	ldrh	r3, [r7, #22]
 8008e70:	1e5a      	subs	r2, r3, #1
 8008e72:	82fa      	strh	r2, [r7, #22]
 8008e74:	461a      	mov	r2, r3
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	441a      	add	r2, r3
 8008e7a:	8b3b      	ldrh	r3, [r7, #24]
 8008e7c:	1e59      	subs	r1, r3, #1
 8008e7e:	8339      	strh	r1, [r7, #24]
 8008e80:	4619      	mov	r1, r3
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	440b      	add	r3, r1
 8008e86:	7812      	ldrb	r2, [r2, #0]
 8008e88:	701a      	strb	r2, [r3, #0]
  while (out_index != in_index)
 8008e8a:	e7a1      	b.n	8008dd0 <_ZN11MotorDriver11addStuffingEPh+0x90>
    }
  }

  packet[PKT_LENGTH_L] = DXL_LOBYTE(packet_length_out);
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	3305      	adds	r3, #5
 8008e90:	69fa      	ldr	r2, [r7, #28]
 8008e92:	b2d2      	uxtb	r2, r2
 8008e94:	701a      	strb	r2, [r3, #0]
  packet[PKT_LENGTH_H] = DXL_HIBYTE(packet_length_out);
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8008e9e:	f04f 0200 	mov.w	r2, #0
 8008ea2:	f04f 0300 	mov.w	r3, #0
 8008ea6:	0a02      	lsrs	r2, r0, #8
 8008ea8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008eac:	0a0b      	lsrs	r3, r1, #8
 8008eae:	6839      	ldr	r1, [r7, #0]
 8008eb0:	3106      	adds	r1, #6
 8008eb2:	b2d3      	uxtb	r3, r2
 8008eb4:	700b      	strb	r3, [r1, #0]

  return;
 8008eb6:	e002      	b.n	8008ebe <_ZN11MotorDriver11addStuffingEPh+0x17e>
    return;
 8008eb8:	bf00      	nop
 8008eba:	e000      	b.n	8008ebe <_ZN11MotorDriver11addStuffingEPh+0x17e>
    return;
 8008ebc:	bf00      	nop
}
 8008ebe:	3724      	adds	r7, #36	; 0x24
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <_ZN11MotorDriver14removeStuffingEPh>:

void MotorDriver::removeStuffing(uint8_t *packet)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b087      	sub	sp, #28
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  int i = 0, index = 0;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	617b      	str	r3, [r7, #20]
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	613b      	str	r3, [r7, #16]
  int packet_length_in = DXL_MAKEWORD(packet[PKT_LENGTH_L], packet[PKT_LENGTH_H]);
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	3305      	adds	r3, #5
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	b21a      	sxth	r2, r3
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	3306      	adds	r3, #6
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	021b      	lsls	r3, r3, #8
 8008eea:	b21b      	sxth	r3, r3
 8008eec:	4313      	orrs	r3, r2
 8008eee:	b21b      	sxth	r3, r3
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	60bb      	str	r3, [r7, #8]
  int packet_length_out = packet_length_in;
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	60fb      	str	r3, [r7, #12]

  index = PKT_INSTRUCTION;
 8008ef8:	2307      	movs	r3, #7
 8008efa:	613b      	str	r3, [r7, #16]
  for (i = 0; i < packet_length_in - 2; i++)  // except CRC
 8008efc:	2300      	movs	r3, #0
 8008efe:	617b      	str	r3, [r7, #20]
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	3b02      	subs	r3, #2
 8008f04:	697a      	ldr	r2, [r7, #20]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	da31      	bge.n	8008f6e <_ZN11MotorDriver14removeStuffingEPh+0xa6>
  {
    if (packet[i+PKT_INSTRUCTION] == 0xFD && packet[i+PKT_INSTRUCTION+1] == 0xFD && packet[i+PKT_INSTRUCTION-1] == 0xFF && packet[i+PKT_INSTRUCTION-2] == 0xFF)
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	3307      	adds	r3, #7
 8008f0e:	683a      	ldr	r2, [r7, #0]
 8008f10:	4413      	add	r3, r2
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	2bfd      	cmp	r3, #253	; 0xfd
 8008f16:	d11a      	bne.n	8008f4e <_ZN11MotorDriver14removeStuffingEPh+0x86>
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	3308      	adds	r3, #8
 8008f1c:	683a      	ldr	r2, [r7, #0]
 8008f1e:	4413      	add	r3, r2
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	2bfd      	cmp	r3, #253	; 0xfd
 8008f24:	d113      	bne.n	8008f4e <_ZN11MotorDriver14removeStuffingEPh+0x86>
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	3306      	adds	r3, #6
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	2bff      	cmp	r3, #255	; 0xff
 8008f32:	d10c      	bne.n	8008f4e <_ZN11MotorDriver14removeStuffingEPh+0x86>
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	3305      	adds	r3, #5
 8008f38:	683a      	ldr	r2, [r7, #0]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	2bff      	cmp	r3, #255	; 0xff
 8008f40:	d105      	bne.n	8008f4e <_ZN11MotorDriver14removeStuffingEPh+0x86>
    {   // FF FF FD FD
      packet_length_out--;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	3b01      	subs	r3, #1
 8008f46:	60fb      	str	r3, [r7, #12]
      i++;
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	617b      	str	r3, [r7, #20]
    }
    packet[index++] = packet[i+PKT_INSTRUCTION];
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	3307      	adds	r3, #7
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	441a      	add	r2, r3
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	1c59      	adds	r1, r3, #1
 8008f5a:	6139      	str	r1, [r7, #16]
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	440b      	add	r3, r1
 8008f62:	7812      	ldrb	r2, [r2, #0]
 8008f64:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < packet_length_in - 2; i++)  // except CRC
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	617b      	str	r3, [r7, #20]
 8008f6c:	e7c8      	b.n	8008f00 <_ZN11MotorDriver14removeStuffingEPh+0x38>
  }
  packet[index++] = packet[PKT_INSTRUCTION+packet_length_in-2];
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	3305      	adds	r3, #5
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	441a      	add	r2, r3
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	1c59      	adds	r1, r3, #1
 8008f7a:	6139      	str	r1, [r7, #16]
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	440b      	add	r3, r1
 8008f82:	7812      	ldrb	r2, [r2, #0]
 8008f84:	701a      	strb	r2, [r3, #0]
  packet[index++] = packet[PKT_INSTRUCTION+packet_length_in-1];
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	3306      	adds	r3, #6
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	441a      	add	r2, r3
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	1c59      	adds	r1, r3, #1
 8008f92:	6139      	str	r1, [r7, #16]
 8008f94:	4619      	mov	r1, r3
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	440b      	add	r3, r1
 8008f9a:	7812      	ldrb	r2, [r2, #0]
 8008f9c:	701a      	strb	r2, [r3, #0]

  packet[PKT_LENGTH_L] = DXL_LOBYTE(packet_length_out);
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	3305      	adds	r3, #5
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	b2d2      	uxtb	r2, r2
 8008fa6:	701a      	strb	r2, [r3, #0]
  packet[PKT_LENGTH_H] = DXL_HIBYTE(packet_length_out);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	4618      	mov	r0, r3
 8008fac:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8008fb0:	f04f 0200 	mov.w	r2, #0
 8008fb4:	f04f 0300 	mov.w	r3, #0
 8008fb8:	0a02      	lsrs	r2, r0, #8
 8008fba:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008fbe:	0a0b      	lsrs	r3, r1, #8
 8008fc0:	6839      	ldr	r1, [r7, #0]
 8008fc2:	3106      	adds	r1, #6
 8008fc4:	b2d3      	uxtb	r3, r2
 8008fc6:	700b      	strb	r3, [r1, #0]
}
 8008fc8:	bf00      	nop
 8008fca:	371c      	adds	r7, #28
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <_ZN11MotorDriver8txPacketEPhS0_>:

int MotorDriver::txPacket(uint8_t *txpacketL, uint8_t *txpacketR)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b088      	sub	sp, #32
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]
  uint16_t total_packet_length   = 0;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	83fb      	strh	r3, [r7, #30]


  // byte stuffing for header
  addStuffing(txpacketL);
 8008fe4:	68b9      	ldr	r1, [r7, #8]
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f7ff feaa 	bl	8008d40 <_ZN11MotorDriver11addStuffingEPh>
  addStuffing(txpacketR);
 8008fec:	6879      	ldr	r1, [r7, #4]
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f7ff fea6 	bl	8008d40 <_ZN11MotorDriver11addStuffingEPh>

  // check max packet length
  uint16_t total_packet_length_left = DXL_MAKEWORD(txpacketL[PKT_LENGTH_L], txpacketL[PKT_LENGTH_H]) + 7;
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	3305      	adds	r3, #5
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	b21a      	sxth	r2, r3
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	3306      	adds	r3, #6
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	021b      	lsls	r3, r3, #8
 8009004:	b21b      	sxth	r3, r3
 8009006:	4313      	orrs	r3, r2
 8009008:	b21b      	sxth	r3, r3
 800900a:	b29b      	uxth	r3, r3
 800900c:	3307      	adds	r3, #7
 800900e:	83bb      	strh	r3, [r7, #28]
  uint16_t total_packet_length_right = DXL_MAKEWORD(txpacketR[PKT_LENGTH_L], txpacketR[PKT_LENGTH_H]) + 7;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	3305      	adds	r3, #5
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	b21a      	sxth	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	3306      	adds	r3, #6
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	021b      	lsls	r3, r3, #8
 8009020:	b21b      	sxth	r3, r3
 8009022:	4313      	orrs	r3, r2
 8009024:	b21b      	sxth	r3, r3
 8009026:	b29b      	uxth	r3, r3
 8009028:	3307      	adds	r3, #7
 800902a:	837b      	strh	r3, [r7, #26]
  // 7: HEADER0 HEADER1 HEADER2 RESERVED ID LENGTH_L LENGTH_H

  // make packet header for left motor
  txpacketL[PKT_HEADER0]   = 0xFF;
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	22ff      	movs	r2, #255	; 0xff
 8009030:	701a      	strb	r2, [r3, #0]
  txpacketL[PKT_HEADER1]   = 0xFF;
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	3301      	adds	r3, #1
 8009036:	22ff      	movs	r2, #255	; 0xff
 8009038:	701a      	strb	r2, [r3, #0]
  txpacketL[PKT_HEADER2]   = 0xFD;
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	3302      	adds	r3, #2
 800903e:	22fd      	movs	r2, #253	; 0xfd
 8009040:	701a      	strb	r2, [r3, #0]
  txpacketL[PKT_RESERVED]  = 0x00;
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	3303      	adds	r3, #3
 8009046:	2200      	movs	r2, #0
 8009048:	701a      	strb	r2, [r3, #0]

  // make packet header for right motor
  txpacketR[PKT_HEADER0]   = 0xFF;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	22ff      	movs	r2, #255	; 0xff
 800904e:	701a      	strb	r2, [r3, #0]
  txpacketR[PKT_HEADER1]   = 0xFF;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	3301      	adds	r3, #1
 8009054:	22ff      	movs	r2, #255	; 0xff
 8009056:	701a      	strb	r2, [r3, #0]
  txpacketR[PKT_HEADER2]   = 0xFD;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	3302      	adds	r3, #2
 800905c:	22fd      	movs	r2, #253	; 0xfd
 800905e:	701a      	strb	r2, [r3, #0]
  txpacketR[PKT_RESERVED]  = 0x00;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	3303      	adds	r3, #3
 8009064:	2200      	movs	r2, #0
 8009066:	701a      	strb	r2, [r3, #0]

  // add CRC16
  uint16_t crc_left = updateCRC(0, txpacketL, total_packet_length_left - 2);    // 2: CRC16
 8009068:	8bbb      	ldrh	r3, [r7, #28]
 800906a:	3b02      	subs	r3, #2
 800906c:	b29b      	uxth	r3, r3
 800906e:	68ba      	ldr	r2, [r7, #8]
 8009070:	2100      	movs	r1, #0
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f7ff fe30 	bl	8008cd8 <_ZN11MotorDriver9updateCRCEtPht>
 8009078:	4603      	mov	r3, r0
 800907a:	833b      	strh	r3, [r7, #24]
  uint16_t crc_right = updateCRC(0, txpacketR, total_packet_length_right - 2);    // 2: CRC16
 800907c:	8b7b      	ldrh	r3, [r7, #26]
 800907e:	3b02      	subs	r3, #2
 8009080:	b29b      	uxth	r3, r3
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	2100      	movs	r1, #0
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f7ff fe26 	bl	8008cd8 <_ZN11MotorDriver9updateCRCEtPht>
 800908c:	4603      	mov	r3, r0
 800908e:	82fb      	strh	r3, [r7, #22]
  txpacketL[total_packet_length_left - 2] = DXL_LOBYTE(crc_left);
 8009090:	8bbb      	ldrh	r3, [r7, #28]
 8009092:	3b02      	subs	r3, #2
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	4413      	add	r3, r2
 8009098:	8b3a      	ldrh	r2, [r7, #24]
 800909a:	b2d2      	uxtb	r2, r2
 800909c:	701a      	strb	r2, [r3, #0]
  txpacketL[total_packet_length_left - 1] = DXL_HIBYTE(crc_left);
 800909e:	8b3b      	ldrh	r3, [r7, #24]
 80090a0:	0a1b      	lsrs	r3, r3, #8
 80090a2:	b299      	uxth	r1, r3
 80090a4:	8bbb      	ldrh	r3, [r7, #28]
 80090a6:	3b01      	subs	r3, #1
 80090a8:	68ba      	ldr	r2, [r7, #8]
 80090aa:	4413      	add	r3, r2
 80090ac:	b2ca      	uxtb	r2, r1
 80090ae:	701a      	strb	r2, [r3, #0]
  txpacketR[total_packet_length_right - 2] = DXL_LOBYTE(crc_right);
 80090b0:	8b7b      	ldrh	r3, [r7, #26]
 80090b2:	3b02      	subs	r3, #2
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	4413      	add	r3, r2
 80090b8:	8afa      	ldrh	r2, [r7, #22]
 80090ba:	b2d2      	uxtb	r2, r2
 80090bc:	701a      	strb	r2, [r3, #0]
  txpacketR[total_packet_length_right - 1] = DXL_HIBYTE(crc_right);
 80090be:	8afb      	ldrh	r3, [r7, #22]
 80090c0:	0a1b      	lsrs	r3, r3, #8
 80090c2:	b299      	uxth	r1, r3
 80090c4:	8b7b      	ldrh	r3, [r7, #26]
 80090c6:	3b01      	subs	r3, #1
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	4413      	add	r3, r2
 80090cc:	b2ca      	uxtb	r2, r1
 80090ce:	701a      	strb	r2, [r3, #0]

  // tx packet
  // TODO
  // Enable tx, send, disable tx for uart1(right), uart6(left)
  HAL_UART_Transmit(leftPort, txpacketL, total_packet_length_left, 10);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6818      	ldr	r0, [r3, #0]
 80090d4:	8bba      	ldrh	r2, [r7, #28]
 80090d6:	230a      	movs	r3, #10
 80090d8:	68b9      	ldr	r1, [r7, #8]
 80090da:	f002 fe29 	bl	800bd30 <HAL_UART_Transmit>
  HAL_UART_Transmit(rightPort, txpacketR, total_packet_length_right, 10);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6858      	ldr	r0, [r3, #4]
 80090e2:	8b7a      	ldrh	r2, [r7, #26]
 80090e4:	230a      	movs	r3, #10
 80090e6:	6879      	ldr	r1, [r7, #4]
 80090e8:	f002 fe22 	bl	800bd30 <HAL_UART_Transmit>

  return COMM_SUCCESS;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3720      	adds	r7, #32
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
	...

080090f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80090fe:	2300      	movs	r3, #0
 8009100:	607b      	str	r3, [r7, #4]
 8009102:	4b10      	ldr	r3, [pc, #64]	; (8009144 <HAL_MspInit+0x4c>)
 8009104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009106:	4a0f      	ldr	r2, [pc, #60]	; (8009144 <HAL_MspInit+0x4c>)
 8009108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800910c:	6453      	str	r3, [r2, #68]	; 0x44
 800910e:	4b0d      	ldr	r3, [pc, #52]	; (8009144 <HAL_MspInit+0x4c>)
 8009110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009116:	607b      	str	r3, [r7, #4]
 8009118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800911a:	2300      	movs	r3, #0
 800911c:	603b      	str	r3, [r7, #0]
 800911e:	4b09      	ldr	r3, [pc, #36]	; (8009144 <HAL_MspInit+0x4c>)
 8009120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009122:	4a08      	ldr	r2, [pc, #32]	; (8009144 <HAL_MspInit+0x4c>)
 8009124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009128:	6413      	str	r3, [r2, #64]	; 0x40
 800912a:	4b06      	ldr	r3, [pc, #24]	; (8009144 <HAL_MspInit+0x4c>)
 800912c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009132:	603b      	str	r3, [r7, #0]
 8009134:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8009136:	2007      	movs	r0, #7
 8009138:	f000 fc3a 	bl	80099b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800913c:	bf00      	nop
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	40023800 	.word	0x40023800

08009148 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b08a      	sub	sp, #40	; 0x28
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009150:	f107 0314 	add.w	r3, r7, #20
 8009154:	2200      	movs	r2, #0
 8009156:	601a      	str	r2, [r3, #0]
 8009158:	605a      	str	r2, [r3, #4]
 800915a:	609a      	str	r2, [r3, #8]
 800915c:	60da      	str	r2, [r3, #12]
 800915e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a30      	ldr	r2, [pc, #192]	; (8009228 <HAL_SPI_MspInit+0xe0>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d15a      	bne.n	8009220 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800916a:	2300      	movs	r3, #0
 800916c:	613b      	str	r3, [r7, #16]
 800916e:	4b2f      	ldr	r3, [pc, #188]	; (800922c <HAL_SPI_MspInit+0xe4>)
 8009170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009172:	4a2e      	ldr	r2, [pc, #184]	; (800922c <HAL_SPI_MspInit+0xe4>)
 8009174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009178:	6413      	str	r3, [r2, #64]	; 0x40
 800917a:	4b2c      	ldr	r3, [pc, #176]	; (800922c <HAL_SPI_MspInit+0xe4>)
 800917c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009182:	613b      	str	r3, [r7, #16]
 8009184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009186:	2300      	movs	r3, #0
 8009188:	60fb      	str	r3, [r7, #12]
 800918a:	4b28      	ldr	r3, [pc, #160]	; (800922c <HAL_SPI_MspInit+0xe4>)
 800918c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918e:	4a27      	ldr	r2, [pc, #156]	; (800922c <HAL_SPI_MspInit+0xe4>)
 8009190:	f043 0304 	orr.w	r3, r3, #4
 8009194:	6313      	str	r3, [r2, #48]	; 0x30
 8009196:	4b25      	ldr	r3, [pc, #148]	; (800922c <HAL_SPI_MspInit+0xe4>)
 8009198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800919a:	f003 0304 	and.w	r3, r3, #4
 800919e:	60fb      	str	r3, [r7, #12]
 80091a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80091a2:	2300      	movs	r3, #0
 80091a4:	60bb      	str	r3, [r7, #8]
 80091a6:	4b21      	ldr	r3, [pc, #132]	; (800922c <HAL_SPI_MspInit+0xe4>)
 80091a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091aa:	4a20      	ldr	r2, [pc, #128]	; (800922c <HAL_SPI_MspInit+0xe4>)
 80091ac:	f043 0302 	orr.w	r3, r3, #2
 80091b0:	6313      	str	r3, [r2, #48]	; 0x30
 80091b2:	4b1e      	ldr	r3, [pc, #120]	; (800922c <HAL_SPI_MspInit+0xe4>)
 80091b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b6:	f003 0302 	and.w	r3, r3, #2
 80091ba:	60bb      	str	r3, [r7, #8]
 80091bc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80091be:	2302      	movs	r3, #2
 80091c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091c2:	2302      	movs	r3, #2
 80091c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091c6:	2300      	movs	r3, #0
 80091c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091ca:	2303      	movs	r3, #3
 80091cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80091ce:	2307      	movs	r3, #7
 80091d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80091d2:	f107 0314 	add.w	r3, r7, #20
 80091d6:	4619      	mov	r1, r3
 80091d8:	4815      	ldr	r0, [pc, #84]	; (8009230 <HAL_SPI_MspInit+0xe8>)
 80091da:	f001 f82d 	bl	800a238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80091de:	2304      	movs	r3, #4
 80091e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091e2:	2302      	movs	r3, #2
 80091e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091e6:	2300      	movs	r3, #0
 80091e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091ea:	2303      	movs	r3, #3
 80091ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80091ee:	2305      	movs	r3, #5
 80091f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80091f2:	f107 0314 	add.w	r3, r7, #20
 80091f6:	4619      	mov	r1, r3
 80091f8:	480d      	ldr	r0, [pc, #52]	; (8009230 <HAL_SPI_MspInit+0xe8>)
 80091fa:	f001 f81d 	bl	800a238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80091fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009204:	2302      	movs	r3, #2
 8009206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009208:	2300      	movs	r3, #0
 800920a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800920c:	2303      	movs	r3, #3
 800920e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009210:	2305      	movs	r3, #5
 8009212:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009214:	f107 0314 	add.w	r3, r7, #20
 8009218:	4619      	mov	r1, r3
 800921a:	4806      	ldr	r0, [pc, #24]	; (8009234 <HAL_SPI_MspInit+0xec>)
 800921c:	f001 f80c 	bl	800a238 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8009220:	bf00      	nop
 8009222:	3728      	adds	r7, #40	; 0x28
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	40003800 	.word	0x40003800
 800922c:	40023800 	.word	0x40023800
 8009230:	40020800 	.word	0x40020800
 8009234:	40020400 	.word	0x40020400

08009238 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b090      	sub	sp, #64	; 0x40
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009240:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009244:	2200      	movs	r2, #0
 8009246:	601a      	str	r2, [r3, #0]
 8009248:	605a      	str	r2, [r3, #4]
 800924a:	609a      	str	r2, [r3, #8]
 800924c:	60da      	str	r2, [r3, #12]
 800924e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4aa0      	ldr	r2, [pc, #640]	; (80094d8 <HAL_UART_MspInit+0x2a0>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d135      	bne.n	80092c6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800925a:	2300      	movs	r3, #0
 800925c:	62bb      	str	r3, [r7, #40]	; 0x28
 800925e:	4b9f      	ldr	r3, [pc, #636]	; (80094dc <HAL_UART_MspInit+0x2a4>)
 8009260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009262:	4a9e      	ldr	r2, [pc, #632]	; (80094dc <HAL_UART_MspInit+0x2a4>)
 8009264:	f043 0310 	orr.w	r3, r3, #16
 8009268:	6453      	str	r3, [r2, #68]	; 0x44
 800926a:	4b9c      	ldr	r3, [pc, #624]	; (80094dc <HAL_UART_MspInit+0x2a4>)
 800926c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800926e:	f003 0310 	and.w	r3, r3, #16
 8009272:	62bb      	str	r3, [r7, #40]	; 0x28
 8009274:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009276:	2300      	movs	r3, #0
 8009278:	627b      	str	r3, [r7, #36]	; 0x24
 800927a:	4b98      	ldr	r3, [pc, #608]	; (80094dc <HAL_UART_MspInit+0x2a4>)
 800927c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800927e:	4a97      	ldr	r2, [pc, #604]	; (80094dc <HAL_UART_MspInit+0x2a4>)
 8009280:	f043 0301 	orr.w	r3, r3, #1
 8009284:	6313      	str	r3, [r2, #48]	; 0x30
 8009286:	4b95      	ldr	r3, [pc, #596]	; (80094dc <HAL_UART_MspInit+0x2a4>)
 8009288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928a:	f003 0301 	and.w	r3, r3, #1
 800928e:	627b      	str	r3, [r7, #36]	; 0x24
 8009290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009292:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009296:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009298:	2312      	movs	r3, #18
 800929a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800929c:	2300      	movs	r3, #0
 800929e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092a0:	2303      	movs	r3, #3
 80092a2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80092a4:	2307      	movs	r3, #7
 80092a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80092ac:	4619      	mov	r1, r3
 80092ae:	488c      	ldr	r0, [pc, #560]	; (80094e0 <HAL_UART_MspInit+0x2a8>)
 80092b0:	f000 ffc2 	bl	800a238 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80092b4:	2200      	movs	r2, #0
 80092b6:	2100      	movs	r1, #0
 80092b8:	2025      	movs	r0, #37	; 0x25
 80092ba:	f000 fb84 	bl	80099c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80092be:	2025      	movs	r0, #37	; 0x25
 80092c0:	f000 fb9d 	bl	80099fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80092c4:	e103      	b.n	80094ce <HAL_UART_MspInit+0x296>
  else if(huart->Instance==USART2)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a86      	ldr	r2, [pc, #536]	; (80094e4 <HAL_UART_MspInit+0x2ac>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d12c      	bne.n	800932a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80092d0:	2300      	movs	r3, #0
 80092d2:	623b      	str	r3, [r7, #32]
 80092d4:	4b81      	ldr	r3, [pc, #516]	; (80094dc <HAL_UART_MspInit+0x2a4>)
 80092d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d8:	4a80      	ldr	r2, [pc, #512]	; (80094dc <HAL_UART_MspInit+0x2a4>)
 80092da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092de:	6413      	str	r3, [r2, #64]	; 0x40
 80092e0:	4b7e      	ldr	r3, [pc, #504]	; (80094dc <HAL_UART_MspInit+0x2a4>)
 80092e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092e8:	623b      	str	r3, [r7, #32]
 80092ea:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80092ec:	2300      	movs	r3, #0
 80092ee:	61fb      	str	r3, [r7, #28]
 80092f0:	4b7a      	ldr	r3, [pc, #488]	; (80094dc <HAL_UART_MspInit+0x2a4>)
 80092f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f4:	4a79      	ldr	r2, [pc, #484]	; (80094dc <HAL_UART_MspInit+0x2a4>)
 80092f6:	f043 0301 	orr.w	r3, r3, #1
 80092fa:	6313      	str	r3, [r2, #48]	; 0x30
 80092fc:	4b77      	ldr	r3, [pc, #476]	; (80094dc <HAL_UART_MspInit+0x2a4>)
 80092fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009300:	f003 0301 	and.w	r3, r3, #1
 8009304:	61fb      	str	r3, [r7, #28]
 8009306:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8009308:	230c      	movs	r3, #12
 800930a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800930c:	2302      	movs	r3, #2
 800930e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009310:	2300      	movs	r3, #0
 8009312:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009314:	2303      	movs	r3, #3
 8009316:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009318:	2307      	movs	r3, #7
 800931a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800931c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009320:	4619      	mov	r1, r3
 8009322:	486f      	ldr	r0, [pc, #444]	; (80094e0 <HAL_UART_MspInit+0x2a8>)
 8009324:	f000 ff88 	bl	800a238 <HAL_GPIO_Init>
}
 8009328:	e0d1      	b.n	80094ce <HAL_UART_MspInit+0x296>
  else if(huart->Instance==USART3)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a6e      	ldr	r2, [pc, #440]	; (80094e8 <HAL_UART_MspInit+0x2b0>)
 8009330:	4293      	cmp	r3, r2
 8009332:	f040 8093 	bne.w	800945c <HAL_UART_MspInit+0x224>
    __HAL_RCC_USART3_CLK_ENABLE();
 8009336:	2300      	movs	r3, #0
 8009338:	61bb      	str	r3, [r7, #24]
 800933a:	4b68      	ldr	r3, [pc, #416]	; (80094dc <HAL_UART_MspInit+0x2a4>)
 800933c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800933e:	4a67      	ldr	r2, [pc, #412]	; (80094dc <HAL_UART_MspInit+0x2a4>)
 8009340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009344:	6413      	str	r3, [r2, #64]	; 0x40
 8009346:	4b65      	ldr	r3, [pc, #404]	; (80094dc <HAL_UART_MspInit+0x2a4>)
 8009348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800934a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800934e:	61bb      	str	r3, [r7, #24]
 8009350:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009352:	2300      	movs	r3, #0
 8009354:	617b      	str	r3, [r7, #20]
 8009356:	4b61      	ldr	r3, [pc, #388]	; (80094dc <HAL_UART_MspInit+0x2a4>)
 8009358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800935a:	4a60      	ldr	r2, [pc, #384]	; (80094dc <HAL_UART_MspInit+0x2a4>)
 800935c:	f043 0304 	orr.w	r3, r3, #4
 8009360:	6313      	str	r3, [r2, #48]	; 0x30
 8009362:	4b5e      	ldr	r3, [pc, #376]	; (80094dc <HAL_UART_MspInit+0x2a4>)
 8009364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009366:	f003 0304 	and.w	r3, r3, #4
 800936a:	617b      	str	r3, [r7, #20]
 800936c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800936e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009372:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009374:	2302      	movs	r3, #2
 8009376:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009378:	2300      	movs	r3, #0
 800937a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800937c:	2303      	movs	r3, #3
 800937e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009380:	2307      	movs	r3, #7
 8009382:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009384:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009388:	4619      	mov	r1, r3
 800938a:	4858      	ldr	r0, [pc, #352]	; (80094ec <HAL_UART_MspInit+0x2b4>)
 800938c:	f000 ff54 	bl	800a238 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8009390:	4b57      	ldr	r3, [pc, #348]	; (80094f0 <HAL_UART_MspInit+0x2b8>)
 8009392:	4a58      	ldr	r2, [pc, #352]	; (80094f4 <HAL_UART_MspInit+0x2bc>)
 8009394:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8009396:	4b56      	ldr	r3, [pc, #344]	; (80094f0 <HAL_UART_MspInit+0x2b8>)
 8009398:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800939c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800939e:	4b54      	ldr	r3, [pc, #336]	; (80094f0 <HAL_UART_MspInit+0x2b8>)
 80093a0:	2200      	movs	r2, #0
 80093a2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80093a4:	4b52      	ldr	r3, [pc, #328]	; (80094f0 <HAL_UART_MspInit+0x2b8>)
 80093a6:	2200      	movs	r2, #0
 80093a8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80093aa:	4b51      	ldr	r3, [pc, #324]	; (80094f0 <HAL_UART_MspInit+0x2b8>)
 80093ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80093b0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80093b2:	4b4f      	ldr	r3, [pc, #316]	; (80094f0 <HAL_UART_MspInit+0x2b8>)
 80093b4:	2200      	movs	r2, #0
 80093b6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80093b8:	4b4d      	ldr	r3, [pc, #308]	; (80094f0 <HAL_UART_MspInit+0x2b8>)
 80093ba:	2200      	movs	r2, #0
 80093bc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80093be:	4b4c      	ldr	r3, [pc, #304]	; (80094f0 <HAL_UART_MspInit+0x2b8>)
 80093c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093c4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80093c6:	4b4a      	ldr	r3, [pc, #296]	; (80094f0 <HAL_UART_MspInit+0x2b8>)
 80093c8:	2200      	movs	r2, #0
 80093ca:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80093cc:	4b48      	ldr	r3, [pc, #288]	; (80094f0 <HAL_UART_MspInit+0x2b8>)
 80093ce:	2200      	movs	r2, #0
 80093d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80093d2:	4847      	ldr	r0, [pc, #284]	; (80094f0 <HAL_UART_MspInit+0x2b8>)
 80093d4:	f000 fb2e 	bl	8009a34 <HAL_DMA_Init>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d001      	beq.n	80093e2 <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 80093de:	f7f8 f9e7 	bl	80017b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4a42      	ldr	r2, [pc, #264]	; (80094f0 <HAL_UART_MspInit+0x2b8>)
 80093e6:	639a      	str	r2, [r3, #56]	; 0x38
 80093e8:	4a41      	ldr	r2, [pc, #260]	; (80094f0 <HAL_UART_MspInit+0x2b8>)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80093ee:	4b42      	ldr	r3, [pc, #264]	; (80094f8 <HAL_UART_MspInit+0x2c0>)
 80093f0:	4a42      	ldr	r2, [pc, #264]	; (80094fc <HAL_UART_MspInit+0x2c4>)
 80093f2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80093f4:	4b40      	ldr	r3, [pc, #256]	; (80094f8 <HAL_UART_MspInit+0x2c0>)
 80093f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80093fa:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80093fc:	4b3e      	ldr	r3, [pc, #248]	; (80094f8 <HAL_UART_MspInit+0x2c0>)
 80093fe:	2240      	movs	r2, #64	; 0x40
 8009400:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009402:	4b3d      	ldr	r3, [pc, #244]	; (80094f8 <HAL_UART_MspInit+0x2c0>)
 8009404:	2200      	movs	r2, #0
 8009406:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009408:	4b3b      	ldr	r3, [pc, #236]	; (80094f8 <HAL_UART_MspInit+0x2c0>)
 800940a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800940e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009410:	4b39      	ldr	r3, [pc, #228]	; (80094f8 <HAL_UART_MspInit+0x2c0>)
 8009412:	2200      	movs	r2, #0
 8009414:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009416:	4b38      	ldr	r3, [pc, #224]	; (80094f8 <HAL_UART_MspInit+0x2c0>)
 8009418:	2200      	movs	r2, #0
 800941a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800941c:	4b36      	ldr	r3, [pc, #216]	; (80094f8 <HAL_UART_MspInit+0x2c0>)
 800941e:	2200      	movs	r2, #0
 8009420:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009422:	4b35      	ldr	r3, [pc, #212]	; (80094f8 <HAL_UART_MspInit+0x2c0>)
 8009424:	2200      	movs	r2, #0
 8009426:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009428:	4b33      	ldr	r3, [pc, #204]	; (80094f8 <HAL_UART_MspInit+0x2c0>)
 800942a:	2200      	movs	r2, #0
 800942c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800942e:	4832      	ldr	r0, [pc, #200]	; (80094f8 <HAL_UART_MspInit+0x2c0>)
 8009430:	f000 fb00 	bl	8009a34 <HAL_DMA_Init>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d001      	beq.n	800943e <HAL_UART_MspInit+0x206>
      Error_Handler();
 800943a:	f7f8 f9b9 	bl	80017b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a2d      	ldr	r2, [pc, #180]	; (80094f8 <HAL_UART_MspInit+0x2c0>)
 8009442:	635a      	str	r2, [r3, #52]	; 0x34
 8009444:	4a2c      	ldr	r2, [pc, #176]	; (80094f8 <HAL_UART_MspInit+0x2c0>)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800944a:	2200      	movs	r2, #0
 800944c:	2100      	movs	r1, #0
 800944e:	2027      	movs	r0, #39	; 0x27
 8009450:	f000 fab9 	bl	80099c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8009454:	2027      	movs	r0, #39	; 0x27
 8009456:	f000 fad2 	bl	80099fe <HAL_NVIC_EnableIRQ>
}
 800945a:	e038      	b.n	80094ce <HAL_UART_MspInit+0x296>
  else if(huart->Instance==USART6)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a27      	ldr	r2, [pc, #156]	; (8009500 <HAL_UART_MspInit+0x2c8>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d133      	bne.n	80094ce <HAL_UART_MspInit+0x296>
    __HAL_RCC_USART6_CLK_ENABLE();
 8009466:	2300      	movs	r3, #0
 8009468:	613b      	str	r3, [r7, #16]
 800946a:	4b1c      	ldr	r3, [pc, #112]	; (80094dc <HAL_UART_MspInit+0x2a4>)
 800946c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800946e:	4a1b      	ldr	r2, [pc, #108]	; (80094dc <HAL_UART_MspInit+0x2a4>)
 8009470:	f043 0320 	orr.w	r3, r3, #32
 8009474:	6453      	str	r3, [r2, #68]	; 0x44
 8009476:	4b19      	ldr	r3, [pc, #100]	; (80094dc <HAL_UART_MspInit+0x2a4>)
 8009478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800947a:	f003 0320 	and.w	r3, r3, #32
 800947e:	613b      	str	r3, [r7, #16]
 8009480:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009482:	2300      	movs	r3, #0
 8009484:	60fb      	str	r3, [r7, #12]
 8009486:	4b15      	ldr	r3, [pc, #84]	; (80094dc <HAL_UART_MspInit+0x2a4>)
 8009488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800948a:	4a14      	ldr	r2, [pc, #80]	; (80094dc <HAL_UART_MspInit+0x2a4>)
 800948c:	f043 0304 	orr.w	r3, r3, #4
 8009490:	6313      	str	r3, [r2, #48]	; 0x30
 8009492:	4b12      	ldr	r3, [pc, #72]	; (80094dc <HAL_UART_MspInit+0x2a4>)
 8009494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009496:	f003 0304 	and.w	r3, r3, #4
 800949a:	60fb      	str	r3, [r7, #12]
 800949c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800949e:	2340      	movs	r3, #64	; 0x40
 80094a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80094a2:	2312      	movs	r3, #18
 80094a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094a6:	2300      	movs	r3, #0
 80094a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094aa:	2303      	movs	r3, #3
 80094ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80094ae:	2308      	movs	r3, #8
 80094b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80094b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80094b6:	4619      	mov	r1, r3
 80094b8:	480c      	ldr	r0, [pc, #48]	; (80094ec <HAL_UART_MspInit+0x2b4>)
 80094ba:	f000 febd 	bl	800a238 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80094be:	2200      	movs	r2, #0
 80094c0:	2100      	movs	r1, #0
 80094c2:	2047      	movs	r0, #71	; 0x47
 80094c4:	f000 fa7f 	bl	80099c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80094c8:	2047      	movs	r0, #71	; 0x47
 80094ca:	f000 fa98 	bl	80099fe <HAL_NVIC_EnableIRQ>
}
 80094ce:	bf00      	nop
 80094d0:	3740      	adds	r7, #64	; 0x40
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	40011000 	.word	0x40011000
 80094dc:	40023800 	.word	0x40023800
 80094e0:	40020000 	.word	0x40020000
 80094e4:	40004400 	.word	0x40004400
 80094e8:	40004800 	.word	0x40004800
 80094ec:	40020800 	.word	0x40020800
 80094f0:	20001184 	.word	0x20001184
 80094f4:	40026028 	.word	0x40026028
 80094f8:	20001228 	.word	0x20001228
 80094fc:	40026058 	.word	0x40026058
 8009500:	40011400 	.word	0x40011400

08009504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009504:	b480      	push	{r7}
 8009506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009508:	e7fe      	b.n	8009508 <NMI_Handler+0x4>

0800950a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800950a:	b480      	push	{r7}
 800950c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800950e:	e7fe      	b.n	800950e <HardFault_Handler+0x4>

08009510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009510:	b480      	push	{r7}
 8009512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009514:	e7fe      	b.n	8009514 <MemManage_Handler+0x4>

08009516 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009516:	b480      	push	{r7}
 8009518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800951a:	e7fe      	b.n	800951a <BusFault_Handler+0x4>

0800951c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800951c:	b480      	push	{r7}
 800951e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009520:	e7fe      	b.n	8009520 <UsageFault_Handler+0x4>

08009522 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009522:	b480      	push	{r7}
 8009524:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009526:	bf00      	nop
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009530:	b480      	push	{r7}
 8009532:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009534:	bf00      	nop
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr

0800953e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800953e:	b480      	push	{r7}
 8009540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009542:	bf00      	nop
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009550:	f000 f91a 	bl	8009788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009554:	bf00      	nop
 8009556:	bd80      	pop	{r7, pc}

08009558 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800955c:	4802      	ldr	r0, [pc, #8]	; (8009568 <DMA1_Stream1_IRQHandler+0x10>)
 800955e:	f000 fc01 	bl	8009d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8009562:	bf00      	nop
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	20001184 	.word	0x20001184

0800956c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8009570:	4802      	ldr	r0, [pc, #8]	; (800957c <DMA1_Stream3_IRQHandler+0x10>)
 8009572:	f000 fbf7 	bl	8009d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8009576:	bf00      	nop
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	20001228 	.word	0x20001228

08009580 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009584:	4802      	ldr	r0, [pc, #8]	; (8009590 <USART1_IRQHandler+0x10>)
 8009586:	f002 fdb5 	bl	800c0f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800958a:	bf00      	nop
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	20001288 	.word	0x20001288

08009594 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8009598:	4802      	ldr	r0, [pc, #8]	; (80095a4 <USART3_IRQHandler+0x10>)
 800959a:	f002 fdab 	bl	800c0f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800959e:	bf00      	nop
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	200011e4 	.word	0x200011e4

080095a8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80095ac:	4802      	ldr	r0, [pc, #8]	; (80095b8 <USART6_IRQHandler+0x10>)
 80095ae:	f002 fda1 	bl	800c0f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80095b2:	bf00      	nop
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	200012cc 	.word	0x200012cc

080095bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80095bc:	b480      	push	{r7}
 80095be:	af00      	add	r7, sp, #0
	return 1;
 80095c0:	2301      	movs	r3, #1
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <_kill>:

int _kill(int pid, int sig)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80095d6:	f003 feaf 	bl	800d338 <__errno>
 80095da:	4603      	mov	r3, r0
 80095dc:	2216      	movs	r2, #22
 80095de:	601a      	str	r2, [r3, #0]
	return -1;
 80095e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <_exit>:

void _exit (int status)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80095f4:	f04f 31ff 	mov.w	r1, #4294967295
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f7ff ffe7 	bl	80095cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80095fe:	e7fe      	b.n	80095fe <_exit+0x12>

08009600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b086      	sub	sp, #24
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009608:	4a14      	ldr	r2, [pc, #80]	; (800965c <_sbrk+0x5c>)
 800960a:	4b15      	ldr	r3, [pc, #84]	; (8009660 <_sbrk+0x60>)
 800960c:	1ad3      	subs	r3, r2, r3
 800960e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009614:	4b13      	ldr	r3, [pc, #76]	; (8009664 <_sbrk+0x64>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d102      	bne.n	8009622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800961c:	4b11      	ldr	r3, [pc, #68]	; (8009664 <_sbrk+0x64>)
 800961e:	4a12      	ldr	r2, [pc, #72]	; (8009668 <_sbrk+0x68>)
 8009620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009622:	4b10      	ldr	r3, [pc, #64]	; (8009664 <_sbrk+0x64>)
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4413      	add	r3, r2
 800962a:	693a      	ldr	r2, [r7, #16]
 800962c:	429a      	cmp	r2, r3
 800962e:	d207      	bcs.n	8009640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009630:	f003 fe82 	bl	800d338 <__errno>
 8009634:	4603      	mov	r3, r0
 8009636:	220c      	movs	r2, #12
 8009638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800963a:	f04f 33ff 	mov.w	r3, #4294967295
 800963e:	e009      	b.n	8009654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009640:	4b08      	ldr	r3, [pc, #32]	; (8009664 <_sbrk+0x64>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009646:	4b07      	ldr	r3, [pc, #28]	; (8009664 <_sbrk+0x64>)
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4413      	add	r3, r2
 800964e:	4a05      	ldr	r2, [pc, #20]	; (8009664 <_sbrk+0x64>)
 8009650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009652:	68fb      	ldr	r3, [r7, #12]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3718      	adds	r7, #24
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	20020000 	.word	0x20020000
 8009660:	00000400 	.word	0x00000400
 8009664:	20001120 	.word	0x20001120
 8009668:	20001368 	.word	0x20001368

0800966c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800966c:	b480      	push	{r7}
 800966e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009670:	4b06      	ldr	r3, [pc, #24]	; (800968c <SystemInit+0x20>)
 8009672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009676:	4a05      	ldr	r2, [pc, #20]	; (800968c <SystemInit+0x20>)
 8009678:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800967c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009680:	bf00      	nop
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	e000ed00 	.word	0xe000ed00

08009690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80096c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009694:	480d      	ldr	r0, [pc, #52]	; (80096cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8009696:	490e      	ldr	r1, [pc, #56]	; (80096d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8009698:	4a0e      	ldr	r2, [pc, #56]	; (80096d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800969a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800969c:	e002      	b.n	80096a4 <LoopCopyDataInit>

0800969e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800969e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80096a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80096a2:	3304      	adds	r3, #4

080096a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80096a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80096a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80096a8:	d3f9      	bcc.n	800969e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80096aa:	4a0b      	ldr	r2, [pc, #44]	; (80096d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80096ac:	4c0b      	ldr	r4, [pc, #44]	; (80096dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80096ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80096b0:	e001      	b.n	80096b6 <LoopFillZerobss>

080096b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80096b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80096b4:	3204      	adds	r2, #4

080096b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80096b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80096b8:	d3fb      	bcc.n	80096b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80096ba:	f7ff ffd7 	bl	800966c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80096be:	f003 fe41 	bl	800d344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80096c2:	f7f7 fe45 	bl	8001350 <main>
  bx  lr    
 80096c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80096c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80096cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80096d0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80096d4:	0800df98 	.word	0x0800df98
  ldr r2, =_sbss
 80096d8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80096dc:	20001368 	.word	0x20001368

080096e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80096e0:	e7fe      	b.n	80096e0 <ADC_IRQHandler>
	...

080096e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80096e8:	4b0e      	ldr	r3, [pc, #56]	; (8009724 <HAL_Init+0x40>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a0d      	ldr	r2, [pc, #52]	; (8009724 <HAL_Init+0x40>)
 80096ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80096f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80096f4:	4b0b      	ldr	r3, [pc, #44]	; (8009724 <HAL_Init+0x40>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a0a      	ldr	r2, [pc, #40]	; (8009724 <HAL_Init+0x40>)
 80096fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80096fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009700:	4b08      	ldr	r3, [pc, #32]	; (8009724 <HAL_Init+0x40>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a07      	ldr	r2, [pc, #28]	; (8009724 <HAL_Init+0x40>)
 8009706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800970a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800970c:	2003      	movs	r0, #3
 800970e:	f000 f94f 	bl	80099b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009712:	2000      	movs	r0, #0
 8009714:	f000 f808 	bl	8009728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009718:	f7ff fcee 	bl	80090f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	40023c00 	.word	0x40023c00

08009728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009730:	4b12      	ldr	r3, [pc, #72]	; (800977c <HAL_InitTick+0x54>)
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	4b12      	ldr	r3, [pc, #72]	; (8009780 <HAL_InitTick+0x58>)
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	4619      	mov	r1, r3
 800973a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800973e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009742:	fbb2 f3f3 	udiv	r3, r2, r3
 8009746:	4618      	mov	r0, r3
 8009748:	f000 f967 	bl	8009a1a <HAL_SYSTICK_Config>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d001      	beq.n	8009756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	e00e      	b.n	8009774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2b0f      	cmp	r3, #15
 800975a:	d80a      	bhi.n	8009772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800975c:	2200      	movs	r2, #0
 800975e:	6879      	ldr	r1, [r7, #4]
 8009760:	f04f 30ff 	mov.w	r0, #4294967295
 8009764:	f000 f92f 	bl	80099c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009768:	4a06      	ldr	r2, [pc, #24]	; (8009784 <HAL_InitTick+0x5c>)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	e000      	b.n	8009774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
}
 8009774:	4618      	mov	r0, r3
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}
 800977c:	2000001c 	.word	0x2000001c
 8009780:	20000024 	.word	0x20000024
 8009784:	20000020 	.word	0x20000020

08009788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009788:	b480      	push	{r7}
 800978a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800978c:	4b06      	ldr	r3, [pc, #24]	; (80097a8 <HAL_IncTick+0x20>)
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	461a      	mov	r2, r3
 8009792:	4b06      	ldr	r3, [pc, #24]	; (80097ac <HAL_IncTick+0x24>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4413      	add	r3, r2
 8009798:	4a04      	ldr	r2, [pc, #16]	; (80097ac <HAL_IncTick+0x24>)
 800979a:	6013      	str	r3, [r2, #0]
}
 800979c:	bf00      	nop
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	20000024 	.word	0x20000024
 80097ac:	20001354 	.word	0x20001354

080097b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80097b0:	b480      	push	{r7}
 80097b2:	af00      	add	r7, sp, #0
  return uwTick;
 80097b4:	4b03      	ldr	r3, [pc, #12]	; (80097c4 <HAL_GetTick+0x14>)
 80097b6:	681b      	ldr	r3, [r3, #0]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	20001354 	.word	0x20001354

080097c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80097d0:	f7ff ffee 	bl	80097b0 <HAL_GetTick>
 80097d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e0:	d005      	beq.n	80097ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80097e2:	4b0a      	ldr	r3, [pc, #40]	; (800980c <HAL_Delay+0x44>)
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	461a      	mov	r2, r3
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	4413      	add	r3, r2
 80097ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80097ee:	bf00      	nop
 80097f0:	f7ff ffde 	bl	80097b0 <HAL_GetTick>
 80097f4:	4602      	mov	r2, r0
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	1ad3      	subs	r3, r2, r3
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d8f7      	bhi.n	80097f0 <HAL_Delay+0x28>
  {
  }
}
 8009800:	bf00      	nop
 8009802:	bf00      	nop
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	20000024 	.word	0x20000024

08009810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009810:	b480      	push	{r7}
 8009812:	b085      	sub	sp, #20
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f003 0307 	and.w	r3, r3, #7
 800981e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009820:	4b0c      	ldr	r3, [pc, #48]	; (8009854 <__NVIC_SetPriorityGrouping+0x44>)
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800982c:	4013      	ands	r3, r2
 800982e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800983c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009842:	4a04      	ldr	r2, [pc, #16]	; (8009854 <__NVIC_SetPriorityGrouping+0x44>)
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	60d3      	str	r3, [r2, #12]
}
 8009848:	bf00      	nop
 800984a:	3714      	adds	r7, #20
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr
 8009854:	e000ed00 	.word	0xe000ed00

08009858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009858:	b480      	push	{r7}
 800985a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800985c:	4b04      	ldr	r3, [pc, #16]	; (8009870 <__NVIC_GetPriorityGrouping+0x18>)
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	0a1b      	lsrs	r3, r3, #8
 8009862:	f003 0307 	and.w	r3, r3, #7
}
 8009866:	4618      	mov	r0, r3
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr
 8009870:	e000ed00 	.word	0xe000ed00

08009874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	4603      	mov	r3, r0
 800987c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800987e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009882:	2b00      	cmp	r3, #0
 8009884:	db0b      	blt.n	800989e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009886:	79fb      	ldrb	r3, [r7, #7]
 8009888:	f003 021f 	and.w	r2, r3, #31
 800988c:	4907      	ldr	r1, [pc, #28]	; (80098ac <__NVIC_EnableIRQ+0x38>)
 800988e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009892:	095b      	lsrs	r3, r3, #5
 8009894:	2001      	movs	r0, #1
 8009896:	fa00 f202 	lsl.w	r2, r0, r2
 800989a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800989e:	bf00      	nop
 80098a0:	370c      	adds	r7, #12
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	e000e100 	.word	0xe000e100

080098b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	4603      	mov	r3, r0
 80098b8:	6039      	str	r1, [r7, #0]
 80098ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	db0a      	blt.n	80098da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	b2da      	uxtb	r2, r3
 80098c8:	490c      	ldr	r1, [pc, #48]	; (80098fc <__NVIC_SetPriority+0x4c>)
 80098ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098ce:	0112      	lsls	r2, r2, #4
 80098d0:	b2d2      	uxtb	r2, r2
 80098d2:	440b      	add	r3, r1
 80098d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80098d8:	e00a      	b.n	80098f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	b2da      	uxtb	r2, r3
 80098de:	4908      	ldr	r1, [pc, #32]	; (8009900 <__NVIC_SetPriority+0x50>)
 80098e0:	79fb      	ldrb	r3, [r7, #7]
 80098e2:	f003 030f 	and.w	r3, r3, #15
 80098e6:	3b04      	subs	r3, #4
 80098e8:	0112      	lsls	r2, r2, #4
 80098ea:	b2d2      	uxtb	r2, r2
 80098ec:	440b      	add	r3, r1
 80098ee:	761a      	strb	r2, [r3, #24]
}
 80098f0:	bf00      	nop
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr
 80098fc:	e000e100 	.word	0xe000e100
 8009900:	e000ed00 	.word	0xe000ed00

08009904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009904:	b480      	push	{r7}
 8009906:	b089      	sub	sp, #36	; 0x24
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f003 0307 	and.w	r3, r3, #7
 8009916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	f1c3 0307 	rsb	r3, r3, #7
 800991e:	2b04      	cmp	r3, #4
 8009920:	bf28      	it	cs
 8009922:	2304      	movcs	r3, #4
 8009924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009926:	69fb      	ldr	r3, [r7, #28]
 8009928:	3304      	adds	r3, #4
 800992a:	2b06      	cmp	r3, #6
 800992c:	d902      	bls.n	8009934 <NVIC_EncodePriority+0x30>
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	3b03      	subs	r3, #3
 8009932:	e000      	b.n	8009936 <NVIC_EncodePriority+0x32>
 8009934:	2300      	movs	r3, #0
 8009936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009938:	f04f 32ff 	mov.w	r2, #4294967295
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	fa02 f303 	lsl.w	r3, r2, r3
 8009942:	43da      	mvns	r2, r3
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	401a      	ands	r2, r3
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800994c:	f04f 31ff 	mov.w	r1, #4294967295
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	fa01 f303 	lsl.w	r3, r1, r3
 8009956:	43d9      	mvns	r1, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800995c:	4313      	orrs	r3, r2
         );
}
 800995e:	4618      	mov	r0, r3
 8009960:	3724      	adds	r7, #36	; 0x24
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr
	...

0800996c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	3b01      	subs	r3, #1
 8009978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800997c:	d301      	bcc.n	8009982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800997e:	2301      	movs	r3, #1
 8009980:	e00f      	b.n	80099a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009982:	4a0a      	ldr	r2, [pc, #40]	; (80099ac <SysTick_Config+0x40>)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	3b01      	subs	r3, #1
 8009988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800998a:	210f      	movs	r1, #15
 800998c:	f04f 30ff 	mov.w	r0, #4294967295
 8009990:	f7ff ff8e 	bl	80098b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009994:	4b05      	ldr	r3, [pc, #20]	; (80099ac <SysTick_Config+0x40>)
 8009996:	2200      	movs	r2, #0
 8009998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800999a:	4b04      	ldr	r3, [pc, #16]	; (80099ac <SysTick_Config+0x40>)
 800999c:	2207      	movs	r2, #7
 800999e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	e000e010 	.word	0xe000e010

080099b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f7ff ff29 	bl	8009810 <__NVIC_SetPriorityGrouping>
}
 80099be:	bf00      	nop
 80099c0:	3708      	adds	r7, #8
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}

080099c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b086      	sub	sp, #24
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	4603      	mov	r3, r0
 80099ce:	60b9      	str	r1, [r7, #8]
 80099d0:	607a      	str	r2, [r7, #4]
 80099d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80099d4:	2300      	movs	r3, #0
 80099d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80099d8:	f7ff ff3e 	bl	8009858 <__NVIC_GetPriorityGrouping>
 80099dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	68b9      	ldr	r1, [r7, #8]
 80099e2:	6978      	ldr	r0, [r7, #20]
 80099e4:	f7ff ff8e 	bl	8009904 <NVIC_EncodePriority>
 80099e8:	4602      	mov	r2, r0
 80099ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099ee:	4611      	mov	r1, r2
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7ff ff5d 	bl	80098b0 <__NVIC_SetPriority>
}
 80099f6:	bf00      	nop
 80099f8:	3718      	adds	r7, #24
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b082      	sub	sp, #8
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	4603      	mov	r3, r0
 8009a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7ff ff31 	bl	8009874 <__NVIC_EnableIRQ>
}
 8009a12:	bf00      	nop
 8009a14:	3708      	adds	r7, #8
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b082      	sub	sp, #8
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f7ff ffa2 	bl	800996c <SysTick_Config>
 8009a28:	4603      	mov	r3, r0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
	...

08009a34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009a40:	f7ff feb6 	bl	80097b0 <HAL_GetTick>
 8009a44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d101      	bne.n	8009a50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e099      	b.n	8009b84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2202      	movs	r2, #2
 8009a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f022 0201 	bic.w	r2, r2, #1
 8009a6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009a70:	e00f      	b.n	8009a92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009a72:	f7ff fe9d 	bl	80097b0 <HAL_GetTick>
 8009a76:	4602      	mov	r2, r0
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	1ad3      	subs	r3, r2, r3
 8009a7c:	2b05      	cmp	r3, #5
 8009a7e:	d908      	bls.n	8009a92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2220      	movs	r2, #32
 8009a84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2203      	movs	r2, #3
 8009a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009a8e:	2303      	movs	r3, #3
 8009a90:	e078      	b.n	8009b84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f003 0301 	and.w	r3, r3, #1
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1e8      	bne.n	8009a72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009aa8:	697a      	ldr	r2, [r7, #20]
 8009aaa:	4b38      	ldr	r3, [pc, #224]	; (8009b8c <HAL_DMA_Init+0x158>)
 8009aac:	4013      	ands	r3, r2
 8009aae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685a      	ldr	r2, [r3, #4]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009abe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009aca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	699b      	ldr	r3, [r3, #24]
 8009ad0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009ad6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6a1b      	ldr	r3, [r3, #32]
 8009adc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009ade:	697a      	ldr	r2, [r7, #20]
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae8:	2b04      	cmp	r3, #4
 8009aea:	d107      	bne.n	8009afc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af4:	4313      	orrs	r3, r2
 8009af6:	697a      	ldr	r2, [r7, #20]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	697a      	ldr	r2, [r7, #20]
 8009b02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	695b      	ldr	r3, [r3, #20]
 8009b0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	f023 0307 	bic.w	r3, r3, #7
 8009b12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b18:	697a      	ldr	r2, [r7, #20]
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b22:	2b04      	cmp	r3, #4
 8009b24:	d117      	bne.n	8009b56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b2a:	697a      	ldr	r2, [r7, #20]
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d00e      	beq.n	8009b56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 fb01 	bl	800a140 <DMA_CheckFifoParam>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d008      	beq.n	8009b56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2240      	movs	r2, #64	; 0x40
 8009b48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009b52:	2301      	movs	r3, #1
 8009b54:	e016      	b.n	8009b84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	697a      	ldr	r2, [r7, #20]
 8009b5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 fab8 	bl	800a0d4 <DMA_CalcBaseAndBitshift>
 8009b64:	4603      	mov	r3, r0
 8009b66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b6c:	223f      	movs	r2, #63	; 0x3f
 8009b6e:	409a      	lsls	r2, r3
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3718      	adds	r7, #24
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	f010803f 	.word	0xf010803f

08009b90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b086      	sub	sp, #24
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	607a      	str	r2, [r7, #4]
 8009b9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ba6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d101      	bne.n	8009bb6 <HAL_DMA_Start_IT+0x26>
 8009bb2:	2302      	movs	r3, #2
 8009bb4:	e040      	b.n	8009c38 <HAL_DMA_Start_IT+0xa8>
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d12f      	bne.n	8009c2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2202      	movs	r2, #2
 8009bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	68b9      	ldr	r1, [r7, #8]
 8009bde:	68f8      	ldr	r0, [r7, #12]
 8009be0:	f000 fa4a 	bl	800a078 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009be8:	223f      	movs	r2, #63	; 0x3f
 8009bea:	409a      	lsls	r2, r3
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f042 0216 	orr.w	r2, r2, #22
 8009bfe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d007      	beq.n	8009c18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f042 0208 	orr.w	r2, r2, #8
 8009c16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f042 0201 	orr.w	r2, r2, #1
 8009c26:	601a      	str	r2, [r3, #0]
 8009c28:	e005      	b.n	8009c36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009c32:	2302      	movs	r3, #2
 8009c34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3718      	adds	r7, #24
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009c4e:	f7ff fdaf 	bl	80097b0 <HAL_GetTick>
 8009c52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	d008      	beq.n	8009c72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2280      	movs	r2, #128	; 0x80
 8009c64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e052      	b.n	8009d18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f022 0216 	bic.w	r2, r2, #22
 8009c80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	695a      	ldr	r2, [r3, #20]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d103      	bne.n	8009ca2 <HAL_DMA_Abort+0x62>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d007      	beq.n	8009cb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f022 0208 	bic.w	r2, r2, #8
 8009cb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f022 0201 	bic.w	r2, r2, #1
 8009cc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009cc2:	e013      	b.n	8009cec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009cc4:	f7ff fd74 	bl	80097b0 <HAL_GetTick>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	1ad3      	subs	r3, r2, r3
 8009cce:	2b05      	cmp	r3, #5
 8009cd0:	d90c      	bls.n	8009cec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2220      	movs	r2, #32
 8009cd6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2203      	movs	r2, #3
 8009cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8009ce8:	2303      	movs	r3, #3
 8009cea:	e015      	b.n	8009d18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f003 0301 	and.w	r3, r3, #1
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1e4      	bne.n	8009cc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cfe:	223f      	movs	r2, #63	; 0x3f
 8009d00:	409a      	lsls	r2, r3
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8009d16:	2300      	movs	r3, #0
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3710      	adds	r7, #16
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	d004      	beq.n	8009d3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2280      	movs	r2, #128	; 0x80
 8009d38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e00c      	b.n	8009d58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2205      	movs	r2, #5
 8009d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f022 0201 	bic.w	r2, r2, #1
 8009d54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009d56:	2300      	movs	r3, #0
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b086      	sub	sp, #24
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009d70:	4b92      	ldr	r3, [pc, #584]	; (8009fbc <HAL_DMA_IRQHandler+0x258>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a92      	ldr	r2, [pc, #584]	; (8009fc0 <HAL_DMA_IRQHandler+0x25c>)
 8009d76:	fba2 2303 	umull	r2, r3, r2, r3
 8009d7a:	0a9b      	lsrs	r3, r3, #10
 8009d7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d8e:	2208      	movs	r2, #8
 8009d90:	409a      	lsls	r2, r3
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	4013      	ands	r3, r2
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d01a      	beq.n	8009dd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f003 0304 	and.w	r3, r3, #4
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d013      	beq.n	8009dd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f022 0204 	bic.w	r2, r2, #4
 8009db6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dbc:	2208      	movs	r2, #8
 8009dbe:	409a      	lsls	r2, r3
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dc8:	f043 0201 	orr.w	r2, r3, #1
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	409a      	lsls	r2, r3
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	4013      	ands	r3, r2
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d012      	beq.n	8009e06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	695b      	ldr	r3, [r3, #20]
 8009de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00b      	beq.n	8009e06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009df2:	2201      	movs	r2, #1
 8009df4:	409a      	lsls	r2, r3
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dfe:	f043 0202 	orr.w	r2, r3, #2
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e0a:	2204      	movs	r2, #4
 8009e0c:	409a      	lsls	r2, r3
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	4013      	ands	r3, r2
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d012      	beq.n	8009e3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f003 0302 	and.w	r3, r3, #2
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d00b      	beq.n	8009e3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e28:	2204      	movs	r2, #4
 8009e2a:	409a      	lsls	r2, r3
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e34:	f043 0204 	orr.w	r2, r3, #4
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e40:	2210      	movs	r2, #16
 8009e42:	409a      	lsls	r2, r3
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	4013      	ands	r3, r2
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d043      	beq.n	8009ed4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f003 0308 	and.w	r3, r3, #8
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d03c      	beq.n	8009ed4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e5e:	2210      	movs	r2, #16
 8009e60:	409a      	lsls	r2, r3
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d018      	beq.n	8009ea6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d108      	bne.n	8009e94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d024      	beq.n	8009ed4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	4798      	blx	r3
 8009e92:	e01f      	b.n	8009ed4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d01b      	beq.n	8009ed4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	4798      	blx	r3
 8009ea4:	e016      	b.n	8009ed4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d107      	bne.n	8009ec4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f022 0208 	bic.w	r2, r2, #8
 8009ec2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d003      	beq.n	8009ed4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ed8:	2220      	movs	r2, #32
 8009eda:	409a      	lsls	r2, r3
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	4013      	ands	r3, r2
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	f000 808e 	beq.w	800a002 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 0310 	and.w	r3, r3, #16
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	f000 8086 	beq.w	800a002 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009efa:	2220      	movs	r2, #32
 8009efc:	409a      	lsls	r2, r3
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	2b05      	cmp	r3, #5
 8009f0c:	d136      	bne.n	8009f7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f022 0216 	bic.w	r2, r2, #22
 8009f1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	695a      	ldr	r2, [r3, #20]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d103      	bne.n	8009f3e <HAL_DMA_IRQHandler+0x1da>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d007      	beq.n	8009f4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f022 0208 	bic.w	r2, r2, #8
 8009f4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f52:	223f      	movs	r2, #63	; 0x3f
 8009f54:	409a      	lsls	r2, r3
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d07d      	beq.n	800a06e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	4798      	blx	r3
        }
        return;
 8009f7a:	e078      	b.n	800a06e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d01c      	beq.n	8009fc4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d108      	bne.n	8009faa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d030      	beq.n	800a002 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	4798      	blx	r3
 8009fa8:	e02b      	b.n	800a002 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d027      	beq.n	800a002 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	4798      	blx	r3
 8009fba:	e022      	b.n	800a002 <HAL_DMA_IRQHandler+0x29e>
 8009fbc:	2000001c 	.word	0x2000001c
 8009fc0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d10f      	bne.n	8009ff2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f022 0210 	bic.w	r2, r2, #16
 8009fe0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d003      	beq.n	800a002 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a006:	2b00      	cmp	r3, #0
 800a008:	d032      	beq.n	800a070 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a00e:	f003 0301 	and.w	r3, r3, #1
 800a012:	2b00      	cmp	r3, #0
 800a014:	d022      	beq.n	800a05c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2205      	movs	r2, #5
 800a01a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	681a      	ldr	r2, [r3, #0]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f022 0201 	bic.w	r2, r2, #1
 800a02c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	3301      	adds	r3, #1
 800a032:	60bb      	str	r3, [r7, #8]
 800a034:	697a      	ldr	r2, [r7, #20]
 800a036:	429a      	cmp	r2, r3
 800a038:	d307      	bcc.n	800a04a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f003 0301 	and.w	r3, r3, #1
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1f2      	bne.n	800a02e <HAL_DMA_IRQHandler+0x2ca>
 800a048:	e000      	b.n	800a04c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a04a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2201      	movs	r2, #1
 800a050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a060:	2b00      	cmp	r3, #0
 800a062:	d005      	beq.n	800a070 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	4798      	blx	r3
 800a06c:	e000      	b.n	800a070 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a06e:	bf00      	nop
    }
  }
}
 800a070:	3718      	adds	r7, #24
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop

0800a078 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	607a      	str	r2, [r7, #4]
 800a084:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a094:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	683a      	ldr	r2, [r7, #0]
 800a09c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	2b40      	cmp	r3, #64	; 0x40
 800a0a4:	d108      	bne.n	800a0b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	68ba      	ldr	r2, [r7, #8]
 800a0b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a0b6:	e007      	b.n	800a0c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	68ba      	ldr	r2, [r7, #8]
 800a0be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	60da      	str	r2, [r3, #12]
}
 800a0c8:	bf00      	nop
 800a0ca:	3714      	adds	r7, #20
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b085      	sub	sp, #20
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	3b10      	subs	r3, #16
 800a0e4:	4a14      	ldr	r2, [pc, #80]	; (800a138 <DMA_CalcBaseAndBitshift+0x64>)
 800a0e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ea:	091b      	lsrs	r3, r3, #4
 800a0ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a0ee:	4a13      	ldr	r2, [pc, #76]	; (800a13c <DMA_CalcBaseAndBitshift+0x68>)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	4413      	add	r3, r2
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2b03      	cmp	r3, #3
 800a100:	d909      	bls.n	800a116 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a10a:	f023 0303 	bic.w	r3, r3, #3
 800a10e:	1d1a      	adds	r2, r3, #4
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	659a      	str	r2, [r3, #88]	; 0x58
 800a114:	e007      	b.n	800a126 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a11e:	f023 0303 	bic.w	r3, r3, #3
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3714      	adds	r7, #20
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop
 800a138:	aaaaaaab 	.word	0xaaaaaaab
 800a13c:	0800df78 	.word	0x0800df78

0800a140 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a140:	b480      	push	{r7}
 800a142:	b085      	sub	sp, #20
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a148:	2300      	movs	r3, #0
 800a14a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a150:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	699b      	ldr	r3, [r3, #24]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d11f      	bne.n	800a19a <DMA_CheckFifoParam+0x5a>
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	2b03      	cmp	r3, #3
 800a15e:	d856      	bhi.n	800a20e <DMA_CheckFifoParam+0xce>
 800a160:	a201      	add	r2, pc, #4	; (adr r2, 800a168 <DMA_CheckFifoParam+0x28>)
 800a162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a166:	bf00      	nop
 800a168:	0800a179 	.word	0x0800a179
 800a16c:	0800a18b 	.word	0x0800a18b
 800a170:	0800a179 	.word	0x0800a179
 800a174:	0800a20f 	.word	0x0800a20f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a180:	2b00      	cmp	r3, #0
 800a182:	d046      	beq.n	800a212 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a184:	2301      	movs	r3, #1
 800a186:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a188:	e043      	b.n	800a212 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a18e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a192:	d140      	bne.n	800a216 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a194:	2301      	movs	r3, #1
 800a196:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a198:	e03d      	b.n	800a216 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	699b      	ldr	r3, [r3, #24]
 800a19e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1a2:	d121      	bne.n	800a1e8 <DMA_CheckFifoParam+0xa8>
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	2b03      	cmp	r3, #3
 800a1a8:	d837      	bhi.n	800a21a <DMA_CheckFifoParam+0xda>
 800a1aa:	a201      	add	r2, pc, #4	; (adr r2, 800a1b0 <DMA_CheckFifoParam+0x70>)
 800a1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b0:	0800a1c1 	.word	0x0800a1c1
 800a1b4:	0800a1c7 	.word	0x0800a1c7
 800a1b8:	0800a1c1 	.word	0x0800a1c1
 800a1bc:	0800a1d9 	.word	0x0800a1d9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	73fb      	strb	r3, [r7, #15]
      break;
 800a1c4:	e030      	b.n	800a228 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d025      	beq.n	800a21e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a1d6:	e022      	b.n	800a21e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a1e0:	d11f      	bne.n	800a222 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a1e6:	e01c      	b.n	800a222 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	2b02      	cmp	r3, #2
 800a1ec:	d903      	bls.n	800a1f6 <DMA_CheckFifoParam+0xb6>
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	2b03      	cmp	r3, #3
 800a1f2:	d003      	beq.n	800a1fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a1f4:	e018      	b.n	800a228 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	73fb      	strb	r3, [r7, #15]
      break;
 800a1fa:	e015      	b.n	800a228 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00e      	beq.n	800a226 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a208:	2301      	movs	r3, #1
 800a20a:	73fb      	strb	r3, [r7, #15]
      break;
 800a20c:	e00b      	b.n	800a226 <DMA_CheckFifoParam+0xe6>
      break;
 800a20e:	bf00      	nop
 800a210:	e00a      	b.n	800a228 <DMA_CheckFifoParam+0xe8>
      break;
 800a212:	bf00      	nop
 800a214:	e008      	b.n	800a228 <DMA_CheckFifoParam+0xe8>
      break;
 800a216:	bf00      	nop
 800a218:	e006      	b.n	800a228 <DMA_CheckFifoParam+0xe8>
      break;
 800a21a:	bf00      	nop
 800a21c:	e004      	b.n	800a228 <DMA_CheckFifoParam+0xe8>
      break;
 800a21e:	bf00      	nop
 800a220:	e002      	b.n	800a228 <DMA_CheckFifoParam+0xe8>
      break;   
 800a222:	bf00      	nop
 800a224:	e000      	b.n	800a228 <DMA_CheckFifoParam+0xe8>
      break;
 800a226:	bf00      	nop
    }
  } 
  
  return status; 
 800a228:	7bfb      	ldrb	r3, [r7, #15]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3714      	adds	r7, #20
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr
 800a236:	bf00      	nop

0800a238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a238:	b480      	push	{r7}
 800a23a:	b089      	sub	sp, #36	; 0x24
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a242:	2300      	movs	r3, #0
 800a244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a246:	2300      	movs	r3, #0
 800a248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a24a:	2300      	movs	r3, #0
 800a24c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a24e:	2300      	movs	r3, #0
 800a250:	61fb      	str	r3, [r7, #28]
 800a252:	e165      	b.n	800a520 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a254:	2201      	movs	r2, #1
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	fa02 f303 	lsl.w	r3, r2, r3
 800a25c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	697a      	ldr	r2, [r7, #20]
 800a264:	4013      	ands	r3, r2
 800a266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a268:	693a      	ldr	r2, [r7, #16]
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	f040 8154 	bne.w	800a51a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	f003 0303 	and.w	r3, r3, #3
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d005      	beq.n	800a28a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a286:	2b02      	cmp	r3, #2
 800a288:	d130      	bne.n	800a2ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	005b      	lsls	r3, r3, #1
 800a294:	2203      	movs	r2, #3
 800a296:	fa02 f303 	lsl.w	r3, r2, r3
 800a29a:	43db      	mvns	r3, r3
 800a29c:	69ba      	ldr	r2, [r7, #24]
 800a29e:	4013      	ands	r3, r2
 800a2a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	68da      	ldr	r2, [r3, #12]
 800a2a6:	69fb      	ldr	r3, [r7, #28]
 800a2a8:	005b      	lsls	r3, r3, #1
 800a2aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ae:	69ba      	ldr	r2, [r7, #24]
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	69ba      	ldr	r2, [r7, #24]
 800a2b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	69fb      	ldr	r3, [r7, #28]
 800a2c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a2c8:	43db      	mvns	r3, r3
 800a2ca:	69ba      	ldr	r2, [r7, #24]
 800a2cc:	4013      	ands	r3, r2
 800a2ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	091b      	lsrs	r3, r3, #4
 800a2d6:	f003 0201 	and.w	r2, r3, #1
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e0:	69ba      	ldr	r2, [r7, #24]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	69ba      	ldr	r2, [r7, #24]
 800a2ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	f003 0303 	and.w	r3, r3, #3
 800a2f4:	2b03      	cmp	r3, #3
 800a2f6:	d017      	beq.n	800a328 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	005b      	lsls	r3, r3, #1
 800a302:	2203      	movs	r2, #3
 800a304:	fa02 f303 	lsl.w	r3, r2, r3
 800a308:	43db      	mvns	r3, r3
 800a30a:	69ba      	ldr	r2, [r7, #24]
 800a30c:	4013      	ands	r3, r2
 800a30e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	689a      	ldr	r2, [r3, #8]
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	005b      	lsls	r3, r3, #1
 800a318:	fa02 f303 	lsl.w	r3, r2, r3
 800a31c:	69ba      	ldr	r2, [r7, #24]
 800a31e:	4313      	orrs	r3, r2
 800a320:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	69ba      	ldr	r2, [r7, #24]
 800a326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	f003 0303 	and.w	r3, r3, #3
 800a330:	2b02      	cmp	r3, #2
 800a332:	d123      	bne.n	800a37c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	08da      	lsrs	r2, r3, #3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	3208      	adds	r2, #8
 800a33c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a340:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	f003 0307 	and.w	r3, r3, #7
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	220f      	movs	r2, #15
 800a34c:	fa02 f303 	lsl.w	r3, r2, r3
 800a350:	43db      	mvns	r3, r3
 800a352:	69ba      	ldr	r2, [r7, #24]
 800a354:	4013      	ands	r3, r2
 800a356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	691a      	ldr	r2, [r3, #16]
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	f003 0307 	and.w	r3, r3, #7
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	fa02 f303 	lsl.w	r3, r2, r3
 800a368:	69ba      	ldr	r2, [r7, #24]
 800a36a:	4313      	orrs	r3, r2
 800a36c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a36e:	69fb      	ldr	r3, [r7, #28]
 800a370:	08da      	lsrs	r2, r3, #3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	3208      	adds	r2, #8
 800a376:	69b9      	ldr	r1, [r7, #24]
 800a378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a382:	69fb      	ldr	r3, [r7, #28]
 800a384:	005b      	lsls	r3, r3, #1
 800a386:	2203      	movs	r2, #3
 800a388:	fa02 f303 	lsl.w	r3, r2, r3
 800a38c:	43db      	mvns	r3, r3
 800a38e:	69ba      	ldr	r2, [r7, #24]
 800a390:	4013      	ands	r3, r2
 800a392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	f003 0203 	and.w	r2, r3, #3
 800a39c:	69fb      	ldr	r3, [r7, #28]
 800a39e:	005b      	lsls	r3, r3, #1
 800a3a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3a4:	69ba      	ldr	r2, [r7, #24]
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	69ba      	ldr	r2, [r7, #24]
 800a3ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	f000 80ae 	beq.w	800a51a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a3be:	2300      	movs	r3, #0
 800a3c0:	60fb      	str	r3, [r7, #12]
 800a3c2:	4b5d      	ldr	r3, [pc, #372]	; (800a538 <HAL_GPIO_Init+0x300>)
 800a3c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3c6:	4a5c      	ldr	r2, [pc, #368]	; (800a538 <HAL_GPIO_Init+0x300>)
 800a3c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a3cc:	6453      	str	r3, [r2, #68]	; 0x44
 800a3ce:	4b5a      	ldr	r3, [pc, #360]	; (800a538 <HAL_GPIO_Init+0x300>)
 800a3d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3d6:	60fb      	str	r3, [r7, #12]
 800a3d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a3da:	4a58      	ldr	r2, [pc, #352]	; (800a53c <HAL_GPIO_Init+0x304>)
 800a3dc:	69fb      	ldr	r3, [r7, #28]
 800a3de:	089b      	lsrs	r3, r3, #2
 800a3e0:	3302      	adds	r3, #2
 800a3e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	f003 0303 	and.w	r3, r3, #3
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	220f      	movs	r2, #15
 800a3f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f6:	43db      	mvns	r3, r3
 800a3f8:	69ba      	ldr	r2, [r7, #24]
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a4f      	ldr	r2, [pc, #316]	; (800a540 <HAL_GPIO_Init+0x308>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d025      	beq.n	800a452 <HAL_GPIO_Init+0x21a>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a4e      	ldr	r2, [pc, #312]	; (800a544 <HAL_GPIO_Init+0x30c>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d01f      	beq.n	800a44e <HAL_GPIO_Init+0x216>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a4d      	ldr	r2, [pc, #308]	; (800a548 <HAL_GPIO_Init+0x310>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d019      	beq.n	800a44a <HAL_GPIO_Init+0x212>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a4c      	ldr	r2, [pc, #304]	; (800a54c <HAL_GPIO_Init+0x314>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d013      	beq.n	800a446 <HAL_GPIO_Init+0x20e>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a4b      	ldr	r2, [pc, #300]	; (800a550 <HAL_GPIO_Init+0x318>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d00d      	beq.n	800a442 <HAL_GPIO_Init+0x20a>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a4a      	ldr	r2, [pc, #296]	; (800a554 <HAL_GPIO_Init+0x31c>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d007      	beq.n	800a43e <HAL_GPIO_Init+0x206>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a49      	ldr	r2, [pc, #292]	; (800a558 <HAL_GPIO_Init+0x320>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d101      	bne.n	800a43a <HAL_GPIO_Init+0x202>
 800a436:	2306      	movs	r3, #6
 800a438:	e00c      	b.n	800a454 <HAL_GPIO_Init+0x21c>
 800a43a:	2307      	movs	r3, #7
 800a43c:	e00a      	b.n	800a454 <HAL_GPIO_Init+0x21c>
 800a43e:	2305      	movs	r3, #5
 800a440:	e008      	b.n	800a454 <HAL_GPIO_Init+0x21c>
 800a442:	2304      	movs	r3, #4
 800a444:	e006      	b.n	800a454 <HAL_GPIO_Init+0x21c>
 800a446:	2303      	movs	r3, #3
 800a448:	e004      	b.n	800a454 <HAL_GPIO_Init+0x21c>
 800a44a:	2302      	movs	r3, #2
 800a44c:	e002      	b.n	800a454 <HAL_GPIO_Init+0x21c>
 800a44e:	2301      	movs	r3, #1
 800a450:	e000      	b.n	800a454 <HAL_GPIO_Init+0x21c>
 800a452:	2300      	movs	r3, #0
 800a454:	69fa      	ldr	r2, [r7, #28]
 800a456:	f002 0203 	and.w	r2, r2, #3
 800a45a:	0092      	lsls	r2, r2, #2
 800a45c:	4093      	lsls	r3, r2
 800a45e:	69ba      	ldr	r2, [r7, #24]
 800a460:	4313      	orrs	r3, r2
 800a462:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a464:	4935      	ldr	r1, [pc, #212]	; (800a53c <HAL_GPIO_Init+0x304>)
 800a466:	69fb      	ldr	r3, [r7, #28]
 800a468:	089b      	lsrs	r3, r3, #2
 800a46a:	3302      	adds	r3, #2
 800a46c:	69ba      	ldr	r2, [r7, #24]
 800a46e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a472:	4b3a      	ldr	r3, [pc, #232]	; (800a55c <HAL_GPIO_Init+0x324>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	43db      	mvns	r3, r3
 800a47c:	69ba      	ldr	r2, [r7, #24]
 800a47e:	4013      	ands	r3, r2
 800a480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d003      	beq.n	800a496 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800a48e:	69ba      	ldr	r2, [r7, #24]
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	4313      	orrs	r3, r2
 800a494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a496:	4a31      	ldr	r2, [pc, #196]	; (800a55c <HAL_GPIO_Init+0x324>)
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a49c:	4b2f      	ldr	r3, [pc, #188]	; (800a55c <HAL_GPIO_Init+0x324>)
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	43db      	mvns	r3, r3
 800a4a6:	69ba      	ldr	r2, [r7, #24]
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d003      	beq.n	800a4c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800a4b8:	69ba      	ldr	r2, [r7, #24]
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a4c0:	4a26      	ldr	r2, [pc, #152]	; (800a55c <HAL_GPIO_Init+0x324>)
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a4c6:	4b25      	ldr	r3, [pc, #148]	; (800a55c <HAL_GPIO_Init+0x324>)
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	43db      	mvns	r3, r3
 800a4d0:	69ba      	ldr	r2, [r7, #24]
 800a4d2:	4013      	ands	r3, r2
 800a4d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d003      	beq.n	800a4ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800a4e2:	69ba      	ldr	r2, [r7, #24]
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a4ea:	4a1c      	ldr	r2, [pc, #112]	; (800a55c <HAL_GPIO_Init+0x324>)
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a4f0:	4b1a      	ldr	r3, [pc, #104]	; (800a55c <HAL_GPIO_Init+0x324>)
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	43db      	mvns	r3, r3
 800a4fa:	69ba      	ldr	r2, [r7, #24]
 800a4fc:	4013      	ands	r3, r2
 800a4fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d003      	beq.n	800a514 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a50c:	69ba      	ldr	r2, [r7, #24]
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	4313      	orrs	r3, r2
 800a512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a514:	4a11      	ldr	r2, [pc, #68]	; (800a55c <HAL_GPIO_Init+0x324>)
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a51a:	69fb      	ldr	r3, [r7, #28]
 800a51c:	3301      	adds	r3, #1
 800a51e:	61fb      	str	r3, [r7, #28]
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	2b0f      	cmp	r3, #15
 800a524:	f67f ae96 	bls.w	800a254 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a528:	bf00      	nop
 800a52a:	bf00      	nop
 800a52c:	3724      	adds	r7, #36	; 0x24
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr
 800a536:	bf00      	nop
 800a538:	40023800 	.word	0x40023800
 800a53c:	40013800 	.word	0x40013800
 800a540:	40020000 	.word	0x40020000
 800a544:	40020400 	.word	0x40020400
 800a548:	40020800 	.word	0x40020800
 800a54c:	40020c00 	.word	0x40020c00
 800a550:	40021000 	.word	0x40021000
 800a554:	40021400 	.word	0x40021400
 800a558:	40021800 	.word	0x40021800
 800a55c:	40013c00 	.word	0x40013c00

0800a560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a560:	b480      	push	{r7}
 800a562:	b083      	sub	sp, #12
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	460b      	mov	r3, r1
 800a56a:	807b      	strh	r3, [r7, #2]
 800a56c:	4613      	mov	r3, r2
 800a56e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a570:	787b      	ldrb	r3, [r7, #1]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d003      	beq.n	800a57e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a576:	887a      	ldrh	r2, [r7, #2]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a57c:	e003      	b.n	800a586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a57e:	887b      	ldrh	r3, [r7, #2]
 800a580:	041a      	lsls	r2, r3, #16
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	619a      	str	r2, [r3, #24]
}
 800a586:	bf00      	nop
 800a588:	370c      	adds	r7, #12
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr

0800a592 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a592:	b480      	push	{r7}
 800a594:	b085      	sub	sp, #20
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
 800a59a:	460b      	mov	r3, r1
 800a59c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	695b      	ldr	r3, [r3, #20]
 800a5a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a5a4:	887a      	ldrh	r2, [r7, #2]
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	041a      	lsls	r2, r3, #16
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	43d9      	mvns	r1, r3
 800a5b0:	887b      	ldrh	r3, [r7, #2]
 800a5b2:	400b      	ands	r3, r1
 800a5b4:	431a      	orrs	r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	619a      	str	r2, [r3, #24]
}
 800a5ba:	bf00      	nop
 800a5bc:	3714      	adds	r7, #20
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr
	...

0800a5c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d101      	bne.n	800a5dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e0cc      	b.n	800a776 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a5dc:	4b68      	ldr	r3, [pc, #416]	; (800a780 <HAL_RCC_ClockConfig+0x1b8>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f003 030f 	and.w	r3, r3, #15
 800a5e4:	683a      	ldr	r2, [r7, #0]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d90c      	bls.n	800a604 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5ea:	4b65      	ldr	r3, [pc, #404]	; (800a780 <HAL_RCC_ClockConfig+0x1b8>)
 800a5ec:	683a      	ldr	r2, [r7, #0]
 800a5ee:	b2d2      	uxtb	r2, r2
 800a5f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5f2:	4b63      	ldr	r3, [pc, #396]	; (800a780 <HAL_RCC_ClockConfig+0x1b8>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f003 030f 	and.w	r3, r3, #15
 800a5fa:	683a      	ldr	r2, [r7, #0]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d001      	beq.n	800a604 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	e0b8      	b.n	800a776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f003 0302 	and.w	r3, r3, #2
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d020      	beq.n	800a652 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f003 0304 	and.w	r3, r3, #4
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d005      	beq.n	800a628 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a61c:	4b59      	ldr	r3, [pc, #356]	; (800a784 <HAL_RCC_ClockConfig+0x1bc>)
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	4a58      	ldr	r2, [pc, #352]	; (800a784 <HAL_RCC_ClockConfig+0x1bc>)
 800a622:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a626:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f003 0308 	and.w	r3, r3, #8
 800a630:	2b00      	cmp	r3, #0
 800a632:	d005      	beq.n	800a640 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a634:	4b53      	ldr	r3, [pc, #332]	; (800a784 <HAL_RCC_ClockConfig+0x1bc>)
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	4a52      	ldr	r2, [pc, #328]	; (800a784 <HAL_RCC_ClockConfig+0x1bc>)
 800a63a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a63e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a640:	4b50      	ldr	r3, [pc, #320]	; (800a784 <HAL_RCC_ClockConfig+0x1bc>)
 800a642:	689b      	ldr	r3, [r3, #8]
 800a644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	494d      	ldr	r1, [pc, #308]	; (800a784 <HAL_RCC_ClockConfig+0x1bc>)
 800a64e:	4313      	orrs	r3, r2
 800a650:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f003 0301 	and.w	r3, r3, #1
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d044      	beq.n	800a6e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	2b01      	cmp	r3, #1
 800a664:	d107      	bne.n	800a676 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a666:	4b47      	ldr	r3, [pc, #284]	; (800a784 <HAL_RCC_ClockConfig+0x1bc>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d119      	bne.n	800a6a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a672:	2301      	movs	r3, #1
 800a674:	e07f      	b.n	800a776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	2b02      	cmp	r3, #2
 800a67c:	d003      	beq.n	800a686 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a682:	2b03      	cmp	r3, #3
 800a684:	d107      	bne.n	800a696 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a686:	4b3f      	ldr	r3, [pc, #252]	; (800a784 <HAL_RCC_ClockConfig+0x1bc>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d109      	bne.n	800a6a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a692:	2301      	movs	r3, #1
 800a694:	e06f      	b.n	800a776 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a696:	4b3b      	ldr	r3, [pc, #236]	; (800a784 <HAL_RCC_ClockConfig+0x1bc>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f003 0302 	and.w	r3, r3, #2
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d101      	bne.n	800a6a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e067      	b.n	800a776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a6a6:	4b37      	ldr	r3, [pc, #220]	; (800a784 <HAL_RCC_ClockConfig+0x1bc>)
 800a6a8:	689b      	ldr	r3, [r3, #8]
 800a6aa:	f023 0203 	bic.w	r2, r3, #3
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	4934      	ldr	r1, [pc, #208]	; (800a784 <HAL_RCC_ClockConfig+0x1bc>)
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a6b8:	f7ff f87a 	bl	80097b0 <HAL_GetTick>
 800a6bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6be:	e00a      	b.n	800a6d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6c0:	f7ff f876 	bl	80097b0 <HAL_GetTick>
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	1ad3      	subs	r3, r2, r3
 800a6ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d901      	bls.n	800a6d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	e04f      	b.n	800a776 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6d6:	4b2b      	ldr	r3, [pc, #172]	; (800a784 <HAL_RCC_ClockConfig+0x1bc>)
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	f003 020c 	and.w	r2, r3, #12
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d1eb      	bne.n	800a6c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a6e8:	4b25      	ldr	r3, [pc, #148]	; (800a780 <HAL_RCC_ClockConfig+0x1b8>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f003 030f 	and.w	r3, r3, #15
 800a6f0:	683a      	ldr	r2, [r7, #0]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d20c      	bcs.n	800a710 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6f6:	4b22      	ldr	r3, [pc, #136]	; (800a780 <HAL_RCC_ClockConfig+0x1b8>)
 800a6f8:	683a      	ldr	r2, [r7, #0]
 800a6fa:	b2d2      	uxtb	r2, r2
 800a6fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6fe:	4b20      	ldr	r3, [pc, #128]	; (800a780 <HAL_RCC_ClockConfig+0x1b8>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f003 030f 	and.w	r3, r3, #15
 800a706:	683a      	ldr	r2, [r7, #0]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d001      	beq.n	800a710 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	e032      	b.n	800a776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 0304 	and.w	r3, r3, #4
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d008      	beq.n	800a72e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a71c:	4b19      	ldr	r3, [pc, #100]	; (800a784 <HAL_RCC_ClockConfig+0x1bc>)
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	4916      	ldr	r1, [pc, #88]	; (800a784 <HAL_RCC_ClockConfig+0x1bc>)
 800a72a:	4313      	orrs	r3, r2
 800a72c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f003 0308 	and.w	r3, r3, #8
 800a736:	2b00      	cmp	r3, #0
 800a738:	d009      	beq.n	800a74e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a73a:	4b12      	ldr	r3, [pc, #72]	; (800a784 <HAL_RCC_ClockConfig+0x1bc>)
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	691b      	ldr	r3, [r3, #16]
 800a746:	00db      	lsls	r3, r3, #3
 800a748:	490e      	ldr	r1, [pc, #56]	; (800a784 <HAL_RCC_ClockConfig+0x1bc>)
 800a74a:	4313      	orrs	r3, r2
 800a74c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a74e:	f000 f855 	bl	800a7fc <HAL_RCC_GetSysClockFreq>
 800a752:	4602      	mov	r2, r0
 800a754:	4b0b      	ldr	r3, [pc, #44]	; (800a784 <HAL_RCC_ClockConfig+0x1bc>)
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	091b      	lsrs	r3, r3, #4
 800a75a:	f003 030f 	and.w	r3, r3, #15
 800a75e:	490a      	ldr	r1, [pc, #40]	; (800a788 <HAL_RCC_ClockConfig+0x1c0>)
 800a760:	5ccb      	ldrb	r3, [r1, r3]
 800a762:	fa22 f303 	lsr.w	r3, r2, r3
 800a766:	4a09      	ldr	r2, [pc, #36]	; (800a78c <HAL_RCC_ClockConfig+0x1c4>)
 800a768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a76a:	4b09      	ldr	r3, [pc, #36]	; (800a790 <HAL_RCC_ClockConfig+0x1c8>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4618      	mov	r0, r3
 800a770:	f7fe ffda 	bl	8009728 <HAL_InitTick>

  return HAL_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	40023c00 	.word	0x40023c00
 800a784:	40023800 	.word	0x40023800
 800a788:	0800df60 	.word	0x0800df60
 800a78c:	2000001c 	.word	0x2000001c
 800a790:	20000020 	.word	0x20000020

0800a794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a794:	b480      	push	{r7}
 800a796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a798:	4b03      	ldr	r3, [pc, #12]	; (800a7a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800a79a:	681b      	ldr	r3, [r3, #0]
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr
 800a7a6:	bf00      	nop
 800a7a8:	2000001c 	.word	0x2000001c

0800a7ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a7b0:	f7ff fff0 	bl	800a794 <HAL_RCC_GetHCLKFreq>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	4b05      	ldr	r3, [pc, #20]	; (800a7cc <HAL_RCC_GetPCLK1Freq+0x20>)
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	0a9b      	lsrs	r3, r3, #10
 800a7bc:	f003 0307 	and.w	r3, r3, #7
 800a7c0:	4903      	ldr	r1, [pc, #12]	; (800a7d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a7c2:	5ccb      	ldrb	r3, [r1, r3]
 800a7c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	40023800 	.word	0x40023800
 800a7d0:	0800df70 	.word	0x0800df70

0800a7d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a7d8:	f7ff ffdc 	bl	800a794 <HAL_RCC_GetHCLKFreq>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	4b05      	ldr	r3, [pc, #20]	; (800a7f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	0b5b      	lsrs	r3, r3, #13
 800a7e4:	f003 0307 	and.w	r3, r3, #7
 800a7e8:	4903      	ldr	r1, [pc, #12]	; (800a7f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a7ea:	5ccb      	ldrb	r3, [r1, r3]
 800a7ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	40023800 	.word	0x40023800
 800a7f8:	0800df70 	.word	0x0800df70

0800a7fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a7fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a800:	b088      	sub	sp, #32
 800a802:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a804:	2300      	movs	r3, #0
 800a806:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800a808:	2300      	movs	r3, #0
 800a80a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800a80c:	2300      	movs	r3, #0
 800a80e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800a810:	2300      	movs	r3, #0
 800a812:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800a814:	2300      	movs	r3, #0
 800a816:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a818:	4bce      	ldr	r3, [pc, #824]	; (800ab54 <HAL_RCC_GetSysClockFreq+0x358>)
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	f003 030c 	and.w	r3, r3, #12
 800a820:	2b0c      	cmp	r3, #12
 800a822:	f200 818d 	bhi.w	800ab40 <HAL_RCC_GetSysClockFreq+0x344>
 800a826:	a201      	add	r2, pc, #4	; (adr r2, 800a82c <HAL_RCC_GetSysClockFreq+0x30>)
 800a828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a82c:	0800a861 	.word	0x0800a861
 800a830:	0800ab41 	.word	0x0800ab41
 800a834:	0800ab41 	.word	0x0800ab41
 800a838:	0800ab41 	.word	0x0800ab41
 800a83c:	0800a867 	.word	0x0800a867
 800a840:	0800ab41 	.word	0x0800ab41
 800a844:	0800ab41 	.word	0x0800ab41
 800a848:	0800ab41 	.word	0x0800ab41
 800a84c:	0800a86d 	.word	0x0800a86d
 800a850:	0800ab41 	.word	0x0800ab41
 800a854:	0800ab41 	.word	0x0800ab41
 800a858:	0800ab41 	.word	0x0800ab41
 800a85c:	0800a9e1 	.word	0x0800a9e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a860:	4bbd      	ldr	r3, [pc, #756]	; (800ab58 <HAL_RCC_GetSysClockFreq+0x35c>)
 800a862:	61bb      	str	r3, [r7, #24]
       break;
 800a864:	e16f      	b.n	800ab46 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a866:	4bbd      	ldr	r3, [pc, #756]	; (800ab5c <HAL_RCC_GetSysClockFreq+0x360>)
 800a868:	61bb      	str	r3, [r7, #24]
      break;
 800a86a:	e16c      	b.n	800ab46 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a86c:	4bb9      	ldr	r3, [pc, #740]	; (800ab54 <HAL_RCC_GetSysClockFreq+0x358>)
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a874:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a876:	4bb7      	ldr	r3, [pc, #732]	; (800ab54 <HAL_RCC_GetSysClockFreq+0x358>)
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d053      	beq.n	800a92a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a882:	4bb4      	ldr	r3, [pc, #720]	; (800ab54 <HAL_RCC_GetSysClockFreq+0x358>)
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	099b      	lsrs	r3, r3, #6
 800a888:	461a      	mov	r2, r3
 800a88a:	f04f 0300 	mov.w	r3, #0
 800a88e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a892:	f04f 0100 	mov.w	r1, #0
 800a896:	ea02 0400 	and.w	r4, r2, r0
 800a89a:	603c      	str	r4, [r7, #0]
 800a89c:	400b      	ands	r3, r1
 800a89e:	607b      	str	r3, [r7, #4]
 800a8a0:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	f04f 0200 	mov.w	r2, #0
 800a8ac:	f04f 0300 	mov.w	r3, #0
 800a8b0:	014b      	lsls	r3, r1, #5
 800a8b2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a8b6:	0142      	lsls	r2, r0, #5
 800a8b8:	4610      	mov	r0, r2
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	4623      	mov	r3, r4
 800a8be:	1ac0      	subs	r0, r0, r3
 800a8c0:	462b      	mov	r3, r5
 800a8c2:	eb61 0103 	sbc.w	r1, r1, r3
 800a8c6:	f04f 0200 	mov.w	r2, #0
 800a8ca:	f04f 0300 	mov.w	r3, #0
 800a8ce:	018b      	lsls	r3, r1, #6
 800a8d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a8d4:	0182      	lsls	r2, r0, #6
 800a8d6:	1a12      	subs	r2, r2, r0
 800a8d8:	eb63 0301 	sbc.w	r3, r3, r1
 800a8dc:	f04f 0000 	mov.w	r0, #0
 800a8e0:	f04f 0100 	mov.w	r1, #0
 800a8e4:	00d9      	lsls	r1, r3, #3
 800a8e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a8ea:	00d0      	lsls	r0, r2, #3
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	4621      	mov	r1, r4
 800a8f2:	1852      	adds	r2, r2, r1
 800a8f4:	4629      	mov	r1, r5
 800a8f6:	eb43 0101 	adc.w	r1, r3, r1
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	f04f 0000 	mov.w	r0, #0
 800a900:	f04f 0100 	mov.w	r1, #0
 800a904:	0259      	lsls	r1, r3, #9
 800a906:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800a90a:	0250      	lsls	r0, r2, #9
 800a90c:	4602      	mov	r2, r0
 800a90e:	460b      	mov	r3, r1
 800a910:	4610      	mov	r0, r2
 800a912:	4619      	mov	r1, r3
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	461a      	mov	r2, r3
 800a918:	f04f 0300 	mov.w	r3, #0
 800a91c:	f7f6 f922 	bl	8000b64 <__aeabi_uldivmod>
 800a920:	4602      	mov	r2, r0
 800a922:	460b      	mov	r3, r1
 800a924:	4613      	mov	r3, r2
 800a926:	61fb      	str	r3, [r7, #28]
 800a928:	e04c      	b.n	800a9c4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a92a:	4b8a      	ldr	r3, [pc, #552]	; (800ab54 <HAL_RCC_GetSysClockFreq+0x358>)
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	099b      	lsrs	r3, r3, #6
 800a930:	461a      	mov	r2, r3
 800a932:	f04f 0300 	mov.w	r3, #0
 800a936:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a93a:	f04f 0100 	mov.w	r1, #0
 800a93e:	ea02 0a00 	and.w	sl, r2, r0
 800a942:	ea03 0b01 	and.w	fp, r3, r1
 800a946:	4650      	mov	r0, sl
 800a948:	4659      	mov	r1, fp
 800a94a:	f04f 0200 	mov.w	r2, #0
 800a94e:	f04f 0300 	mov.w	r3, #0
 800a952:	014b      	lsls	r3, r1, #5
 800a954:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a958:	0142      	lsls	r2, r0, #5
 800a95a:	4610      	mov	r0, r2
 800a95c:	4619      	mov	r1, r3
 800a95e:	ebb0 000a 	subs.w	r0, r0, sl
 800a962:	eb61 010b 	sbc.w	r1, r1, fp
 800a966:	f04f 0200 	mov.w	r2, #0
 800a96a:	f04f 0300 	mov.w	r3, #0
 800a96e:	018b      	lsls	r3, r1, #6
 800a970:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a974:	0182      	lsls	r2, r0, #6
 800a976:	1a12      	subs	r2, r2, r0
 800a978:	eb63 0301 	sbc.w	r3, r3, r1
 800a97c:	f04f 0000 	mov.w	r0, #0
 800a980:	f04f 0100 	mov.w	r1, #0
 800a984:	00d9      	lsls	r1, r3, #3
 800a986:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a98a:	00d0      	lsls	r0, r2, #3
 800a98c:	4602      	mov	r2, r0
 800a98e:	460b      	mov	r3, r1
 800a990:	eb12 020a 	adds.w	r2, r2, sl
 800a994:	eb43 030b 	adc.w	r3, r3, fp
 800a998:	f04f 0000 	mov.w	r0, #0
 800a99c:	f04f 0100 	mov.w	r1, #0
 800a9a0:	0299      	lsls	r1, r3, #10
 800a9a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a9a6:	0290      	lsls	r0, r2, #10
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	4610      	mov	r0, r2
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	f04f 0300 	mov.w	r3, #0
 800a9b8:	f7f6 f8d4 	bl	8000b64 <__aeabi_uldivmod>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	460b      	mov	r3, r1
 800a9c0:	4613      	mov	r3, r2
 800a9c2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a9c4:	4b63      	ldr	r3, [pc, #396]	; (800ab54 <HAL_RCC_GetSysClockFreq+0x358>)
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	0c1b      	lsrs	r3, r3, #16
 800a9ca:	f003 0303 	and.w	r3, r3, #3
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	005b      	lsls	r3, r3, #1
 800a9d2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800a9d4:	69fa      	ldr	r2, [r7, #28]
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9dc:	61bb      	str	r3, [r7, #24]
      break;
 800a9de:	e0b2      	b.n	800ab46 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a9e0:	4b5c      	ldr	r3, [pc, #368]	; (800ab54 <HAL_RCC_GetSysClockFreq+0x358>)
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9e8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a9ea:	4b5a      	ldr	r3, [pc, #360]	; (800ab54 <HAL_RCC_GetSysClockFreq+0x358>)
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d04d      	beq.n	800aa92 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a9f6:	4b57      	ldr	r3, [pc, #348]	; (800ab54 <HAL_RCC_GetSysClockFreq+0x358>)
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	099b      	lsrs	r3, r3, #6
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	f04f 0300 	mov.w	r3, #0
 800aa02:	f240 10ff 	movw	r0, #511	; 0x1ff
 800aa06:	f04f 0100 	mov.w	r1, #0
 800aa0a:	ea02 0800 	and.w	r8, r2, r0
 800aa0e:	ea03 0901 	and.w	r9, r3, r1
 800aa12:	4640      	mov	r0, r8
 800aa14:	4649      	mov	r1, r9
 800aa16:	f04f 0200 	mov.w	r2, #0
 800aa1a:	f04f 0300 	mov.w	r3, #0
 800aa1e:	014b      	lsls	r3, r1, #5
 800aa20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800aa24:	0142      	lsls	r2, r0, #5
 800aa26:	4610      	mov	r0, r2
 800aa28:	4619      	mov	r1, r3
 800aa2a:	ebb0 0008 	subs.w	r0, r0, r8
 800aa2e:	eb61 0109 	sbc.w	r1, r1, r9
 800aa32:	f04f 0200 	mov.w	r2, #0
 800aa36:	f04f 0300 	mov.w	r3, #0
 800aa3a:	018b      	lsls	r3, r1, #6
 800aa3c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800aa40:	0182      	lsls	r2, r0, #6
 800aa42:	1a12      	subs	r2, r2, r0
 800aa44:	eb63 0301 	sbc.w	r3, r3, r1
 800aa48:	f04f 0000 	mov.w	r0, #0
 800aa4c:	f04f 0100 	mov.w	r1, #0
 800aa50:	00d9      	lsls	r1, r3, #3
 800aa52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800aa56:	00d0      	lsls	r0, r2, #3
 800aa58:	4602      	mov	r2, r0
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	eb12 0208 	adds.w	r2, r2, r8
 800aa60:	eb43 0309 	adc.w	r3, r3, r9
 800aa64:	f04f 0000 	mov.w	r0, #0
 800aa68:	f04f 0100 	mov.w	r1, #0
 800aa6c:	0259      	lsls	r1, r3, #9
 800aa6e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800aa72:	0250      	lsls	r0, r2, #9
 800aa74:	4602      	mov	r2, r0
 800aa76:	460b      	mov	r3, r1
 800aa78:	4610      	mov	r0, r2
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	461a      	mov	r2, r3
 800aa80:	f04f 0300 	mov.w	r3, #0
 800aa84:	f7f6 f86e 	bl	8000b64 <__aeabi_uldivmod>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	4613      	mov	r3, r2
 800aa8e:	61fb      	str	r3, [r7, #28]
 800aa90:	e04a      	b.n	800ab28 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aa92:	4b30      	ldr	r3, [pc, #192]	; (800ab54 <HAL_RCC_GetSysClockFreq+0x358>)
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	099b      	lsrs	r3, r3, #6
 800aa98:	461a      	mov	r2, r3
 800aa9a:	f04f 0300 	mov.w	r3, #0
 800aa9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800aaa2:	f04f 0100 	mov.w	r1, #0
 800aaa6:	ea02 0400 	and.w	r4, r2, r0
 800aaaa:	ea03 0501 	and.w	r5, r3, r1
 800aaae:	4620      	mov	r0, r4
 800aab0:	4629      	mov	r1, r5
 800aab2:	f04f 0200 	mov.w	r2, #0
 800aab6:	f04f 0300 	mov.w	r3, #0
 800aaba:	014b      	lsls	r3, r1, #5
 800aabc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800aac0:	0142      	lsls	r2, r0, #5
 800aac2:	4610      	mov	r0, r2
 800aac4:	4619      	mov	r1, r3
 800aac6:	1b00      	subs	r0, r0, r4
 800aac8:	eb61 0105 	sbc.w	r1, r1, r5
 800aacc:	f04f 0200 	mov.w	r2, #0
 800aad0:	f04f 0300 	mov.w	r3, #0
 800aad4:	018b      	lsls	r3, r1, #6
 800aad6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800aada:	0182      	lsls	r2, r0, #6
 800aadc:	1a12      	subs	r2, r2, r0
 800aade:	eb63 0301 	sbc.w	r3, r3, r1
 800aae2:	f04f 0000 	mov.w	r0, #0
 800aae6:	f04f 0100 	mov.w	r1, #0
 800aaea:	00d9      	lsls	r1, r3, #3
 800aaec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800aaf0:	00d0      	lsls	r0, r2, #3
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	1912      	adds	r2, r2, r4
 800aaf8:	eb45 0303 	adc.w	r3, r5, r3
 800aafc:	f04f 0000 	mov.w	r0, #0
 800ab00:	f04f 0100 	mov.w	r1, #0
 800ab04:	0299      	lsls	r1, r3, #10
 800ab06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ab0a:	0290      	lsls	r0, r2, #10
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	460b      	mov	r3, r1
 800ab10:	4610      	mov	r0, r2
 800ab12:	4619      	mov	r1, r3
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	461a      	mov	r2, r3
 800ab18:	f04f 0300 	mov.w	r3, #0
 800ab1c:	f7f6 f822 	bl	8000b64 <__aeabi_uldivmod>
 800ab20:	4602      	mov	r2, r0
 800ab22:	460b      	mov	r3, r1
 800ab24:	4613      	mov	r3, r2
 800ab26:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800ab28:	4b0a      	ldr	r3, [pc, #40]	; (800ab54 <HAL_RCC_GetSysClockFreq+0x358>)
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	0f1b      	lsrs	r3, r3, #28
 800ab2e:	f003 0307 	and.w	r3, r3, #7
 800ab32:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800ab34:	69fa      	ldr	r2, [r7, #28]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab3c:	61bb      	str	r3, [r7, #24]
      break;
 800ab3e:	e002      	b.n	800ab46 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ab40:	4b05      	ldr	r3, [pc, #20]	; (800ab58 <HAL_RCC_GetSysClockFreq+0x35c>)
 800ab42:	61bb      	str	r3, [r7, #24]
      break;
 800ab44:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ab46:	69bb      	ldr	r3, [r7, #24]
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3720      	adds	r7, #32
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab52:	bf00      	nop
 800ab54:	40023800 	.word	0x40023800
 800ab58:	00f42400 	.word	0x00f42400
 800ab5c:	007a1200 	.word	0x007a1200

0800ab60 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b086      	sub	sp, #24
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d101      	bne.n	800ab72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e28d      	b.n	800b08e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f003 0301 	and.w	r3, r3, #1
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	f000 8083 	beq.w	800ac86 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ab80:	4b94      	ldr	r3, [pc, #592]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800ab82:	689b      	ldr	r3, [r3, #8]
 800ab84:	f003 030c 	and.w	r3, r3, #12
 800ab88:	2b04      	cmp	r3, #4
 800ab8a:	d019      	beq.n	800abc0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800ab8c:	4b91      	ldr	r3, [pc, #580]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ab94:	2b08      	cmp	r3, #8
 800ab96:	d106      	bne.n	800aba6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800ab98:	4b8e      	ldr	r3, [pc, #568]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aba4:	d00c      	beq.n	800abc0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aba6:	4b8b      	ldr	r3, [pc, #556]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800abae:	2b0c      	cmp	r3, #12
 800abb0:	d112      	bne.n	800abd8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800abb2:	4b88      	ldr	r3, [pc, #544]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800abbe:	d10b      	bne.n	800abd8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800abc0:	4b84      	ldr	r3, [pc, #528]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d05b      	beq.n	800ac84 <HAL_RCC_OscConfig+0x124>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d157      	bne.n	800ac84 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800abd4:	2301      	movs	r3, #1
 800abd6:	e25a      	b.n	800b08e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abe0:	d106      	bne.n	800abf0 <HAL_RCC_OscConfig+0x90>
 800abe2:	4b7c      	ldr	r3, [pc, #496]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a7b      	ldr	r2, [pc, #492]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800abe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abec:	6013      	str	r3, [r2, #0]
 800abee:	e01d      	b.n	800ac2c <HAL_RCC_OscConfig+0xcc>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800abf8:	d10c      	bne.n	800ac14 <HAL_RCC_OscConfig+0xb4>
 800abfa:	4b76      	ldr	r3, [pc, #472]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4a75      	ldr	r2, [pc, #468]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800ac00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ac04:	6013      	str	r3, [r2, #0]
 800ac06:	4b73      	ldr	r3, [pc, #460]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a72      	ldr	r2, [pc, #456]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800ac0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac10:	6013      	str	r3, [r2, #0]
 800ac12:	e00b      	b.n	800ac2c <HAL_RCC_OscConfig+0xcc>
 800ac14:	4b6f      	ldr	r3, [pc, #444]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a6e      	ldr	r2, [pc, #440]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800ac1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac1e:	6013      	str	r3, [r2, #0]
 800ac20:	4b6c      	ldr	r3, [pc, #432]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a6b      	ldr	r2, [pc, #428]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800ac26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ac2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d013      	beq.n	800ac5c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac34:	f7fe fdbc 	bl	80097b0 <HAL_GetTick>
 800ac38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac3a:	e008      	b.n	800ac4e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ac3c:	f7fe fdb8 	bl	80097b0 <HAL_GetTick>
 800ac40:	4602      	mov	r2, r0
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	1ad3      	subs	r3, r2, r3
 800ac46:	2b64      	cmp	r3, #100	; 0x64
 800ac48:	d901      	bls.n	800ac4e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800ac4a:	2303      	movs	r3, #3
 800ac4c:	e21f      	b.n	800b08e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac4e:	4b61      	ldr	r3, [pc, #388]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d0f0      	beq.n	800ac3c <HAL_RCC_OscConfig+0xdc>
 800ac5a:	e014      	b.n	800ac86 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac5c:	f7fe fda8 	bl	80097b0 <HAL_GetTick>
 800ac60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ac62:	e008      	b.n	800ac76 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ac64:	f7fe fda4 	bl	80097b0 <HAL_GetTick>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	1ad3      	subs	r3, r2, r3
 800ac6e:	2b64      	cmp	r3, #100	; 0x64
 800ac70:	d901      	bls.n	800ac76 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800ac72:	2303      	movs	r3, #3
 800ac74:	e20b      	b.n	800b08e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ac76:	4b57      	ldr	r3, [pc, #348]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d1f0      	bne.n	800ac64 <HAL_RCC_OscConfig+0x104>
 800ac82:	e000      	b.n	800ac86 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f003 0302 	and.w	r3, r3, #2
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d06f      	beq.n	800ad72 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ac92:	4b50      	ldr	r3, [pc, #320]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	f003 030c 	and.w	r3, r3, #12
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d017      	beq.n	800acce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800ac9e:	4b4d      	ldr	r3, [pc, #308]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800aca6:	2b08      	cmp	r3, #8
 800aca8:	d105      	bne.n	800acb6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800acaa:	4b4a      	ldr	r3, [pc, #296]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d00b      	beq.n	800acce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800acb6:	4b47      	ldr	r3, [pc, #284]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800acbe:	2b0c      	cmp	r3, #12
 800acc0:	d11c      	bne.n	800acfc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800acc2:	4b44      	ldr	r3, [pc, #272]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800acca:	2b00      	cmp	r3, #0
 800accc:	d116      	bne.n	800acfc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800acce:	4b41      	ldr	r3, [pc, #260]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 0302 	and.w	r3, r3, #2
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d005      	beq.n	800ace6 <HAL_RCC_OscConfig+0x186>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	68db      	ldr	r3, [r3, #12]
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d001      	beq.n	800ace6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	e1d3      	b.n	800b08e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ace6:	4b3b      	ldr	r3, [pc, #236]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	691b      	ldr	r3, [r3, #16]
 800acf2:	00db      	lsls	r3, r3, #3
 800acf4:	4937      	ldr	r1, [pc, #220]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800acf6:	4313      	orrs	r3, r2
 800acf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800acfa:	e03a      	b.n	800ad72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d020      	beq.n	800ad46 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ad04:	4b34      	ldr	r3, [pc, #208]	; (800add8 <HAL_RCC_OscConfig+0x278>)
 800ad06:	2201      	movs	r2, #1
 800ad08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad0a:	f7fe fd51 	bl	80097b0 <HAL_GetTick>
 800ad0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad10:	e008      	b.n	800ad24 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ad12:	f7fe fd4d 	bl	80097b0 <HAL_GetTick>
 800ad16:	4602      	mov	r2, r0
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	1ad3      	subs	r3, r2, r3
 800ad1c:	2b02      	cmp	r3, #2
 800ad1e:	d901      	bls.n	800ad24 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800ad20:	2303      	movs	r3, #3
 800ad22:	e1b4      	b.n	800b08e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad24:	4b2b      	ldr	r3, [pc, #172]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f003 0302 	and.w	r3, r3, #2
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d0f0      	beq.n	800ad12 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad30:	4b28      	ldr	r3, [pc, #160]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	00db      	lsls	r3, r3, #3
 800ad3e:	4925      	ldr	r1, [pc, #148]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800ad40:	4313      	orrs	r3, r2
 800ad42:	600b      	str	r3, [r1, #0]
 800ad44:	e015      	b.n	800ad72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ad46:	4b24      	ldr	r3, [pc, #144]	; (800add8 <HAL_RCC_OscConfig+0x278>)
 800ad48:	2200      	movs	r2, #0
 800ad4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad4c:	f7fe fd30 	bl	80097b0 <HAL_GetTick>
 800ad50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ad52:	e008      	b.n	800ad66 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ad54:	f7fe fd2c 	bl	80097b0 <HAL_GetTick>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	1ad3      	subs	r3, r2, r3
 800ad5e:	2b02      	cmp	r3, #2
 800ad60:	d901      	bls.n	800ad66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800ad62:	2303      	movs	r3, #3
 800ad64:	e193      	b.n	800b08e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ad66:	4b1b      	ldr	r3, [pc, #108]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f003 0302 	and.w	r3, r3, #2
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d1f0      	bne.n	800ad54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f003 0308 	and.w	r3, r3, #8
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d036      	beq.n	800adec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	695b      	ldr	r3, [r3, #20]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d016      	beq.n	800adb4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ad86:	4b15      	ldr	r3, [pc, #84]	; (800addc <HAL_RCC_OscConfig+0x27c>)
 800ad88:	2201      	movs	r2, #1
 800ad8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad8c:	f7fe fd10 	bl	80097b0 <HAL_GetTick>
 800ad90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ad92:	e008      	b.n	800ada6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ad94:	f7fe fd0c 	bl	80097b0 <HAL_GetTick>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	1ad3      	subs	r3, r2, r3
 800ad9e:	2b02      	cmp	r3, #2
 800ada0:	d901      	bls.n	800ada6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800ada2:	2303      	movs	r3, #3
 800ada4:	e173      	b.n	800b08e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ada6:	4b0b      	ldr	r3, [pc, #44]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800ada8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adaa:	f003 0302 	and.w	r3, r3, #2
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d0f0      	beq.n	800ad94 <HAL_RCC_OscConfig+0x234>
 800adb2:	e01b      	b.n	800adec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800adb4:	4b09      	ldr	r3, [pc, #36]	; (800addc <HAL_RCC_OscConfig+0x27c>)
 800adb6:	2200      	movs	r2, #0
 800adb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adba:	f7fe fcf9 	bl	80097b0 <HAL_GetTick>
 800adbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800adc0:	e00e      	b.n	800ade0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800adc2:	f7fe fcf5 	bl	80097b0 <HAL_GetTick>
 800adc6:	4602      	mov	r2, r0
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	1ad3      	subs	r3, r2, r3
 800adcc:	2b02      	cmp	r3, #2
 800adce:	d907      	bls.n	800ade0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800add0:	2303      	movs	r3, #3
 800add2:	e15c      	b.n	800b08e <HAL_RCC_OscConfig+0x52e>
 800add4:	40023800 	.word	0x40023800
 800add8:	42470000 	.word	0x42470000
 800addc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ade0:	4b8a      	ldr	r3, [pc, #552]	; (800b00c <HAL_RCC_OscConfig+0x4ac>)
 800ade2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ade4:	f003 0302 	and.w	r3, r3, #2
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d1ea      	bne.n	800adc2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f003 0304 	and.w	r3, r3, #4
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	f000 8097 	beq.w	800af28 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800adfa:	2300      	movs	r3, #0
 800adfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800adfe:	4b83      	ldr	r3, [pc, #524]	; (800b00c <HAL_RCC_OscConfig+0x4ac>)
 800ae00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d10f      	bne.n	800ae2a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	60bb      	str	r3, [r7, #8]
 800ae0e:	4b7f      	ldr	r3, [pc, #508]	; (800b00c <HAL_RCC_OscConfig+0x4ac>)
 800ae10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae12:	4a7e      	ldr	r2, [pc, #504]	; (800b00c <HAL_RCC_OscConfig+0x4ac>)
 800ae14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae18:	6413      	str	r3, [r2, #64]	; 0x40
 800ae1a:	4b7c      	ldr	r3, [pc, #496]	; (800b00c <HAL_RCC_OscConfig+0x4ac>)
 800ae1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae22:	60bb      	str	r3, [r7, #8]
 800ae24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ae26:	2301      	movs	r3, #1
 800ae28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae2a:	4b79      	ldr	r3, [pc, #484]	; (800b010 <HAL_RCC_OscConfig+0x4b0>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d118      	bne.n	800ae68 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ae36:	4b76      	ldr	r3, [pc, #472]	; (800b010 <HAL_RCC_OscConfig+0x4b0>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a75      	ldr	r2, [pc, #468]	; (800b010 <HAL_RCC_OscConfig+0x4b0>)
 800ae3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ae42:	f7fe fcb5 	bl	80097b0 <HAL_GetTick>
 800ae46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae48:	e008      	b.n	800ae5c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae4a:	f7fe fcb1 	bl	80097b0 <HAL_GetTick>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	1ad3      	subs	r3, r2, r3
 800ae54:	2b02      	cmp	r3, #2
 800ae56:	d901      	bls.n	800ae5c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800ae58:	2303      	movs	r3, #3
 800ae5a:	e118      	b.n	800b08e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae5c:	4b6c      	ldr	r3, [pc, #432]	; (800b010 <HAL_RCC_OscConfig+0x4b0>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d0f0      	beq.n	800ae4a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d106      	bne.n	800ae7e <HAL_RCC_OscConfig+0x31e>
 800ae70:	4b66      	ldr	r3, [pc, #408]	; (800b00c <HAL_RCC_OscConfig+0x4ac>)
 800ae72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae74:	4a65      	ldr	r2, [pc, #404]	; (800b00c <HAL_RCC_OscConfig+0x4ac>)
 800ae76:	f043 0301 	orr.w	r3, r3, #1
 800ae7a:	6713      	str	r3, [r2, #112]	; 0x70
 800ae7c:	e01c      	b.n	800aeb8 <HAL_RCC_OscConfig+0x358>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	2b05      	cmp	r3, #5
 800ae84:	d10c      	bne.n	800aea0 <HAL_RCC_OscConfig+0x340>
 800ae86:	4b61      	ldr	r3, [pc, #388]	; (800b00c <HAL_RCC_OscConfig+0x4ac>)
 800ae88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae8a:	4a60      	ldr	r2, [pc, #384]	; (800b00c <HAL_RCC_OscConfig+0x4ac>)
 800ae8c:	f043 0304 	orr.w	r3, r3, #4
 800ae90:	6713      	str	r3, [r2, #112]	; 0x70
 800ae92:	4b5e      	ldr	r3, [pc, #376]	; (800b00c <HAL_RCC_OscConfig+0x4ac>)
 800ae94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae96:	4a5d      	ldr	r2, [pc, #372]	; (800b00c <HAL_RCC_OscConfig+0x4ac>)
 800ae98:	f043 0301 	orr.w	r3, r3, #1
 800ae9c:	6713      	str	r3, [r2, #112]	; 0x70
 800ae9e:	e00b      	b.n	800aeb8 <HAL_RCC_OscConfig+0x358>
 800aea0:	4b5a      	ldr	r3, [pc, #360]	; (800b00c <HAL_RCC_OscConfig+0x4ac>)
 800aea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aea4:	4a59      	ldr	r2, [pc, #356]	; (800b00c <HAL_RCC_OscConfig+0x4ac>)
 800aea6:	f023 0301 	bic.w	r3, r3, #1
 800aeaa:	6713      	str	r3, [r2, #112]	; 0x70
 800aeac:	4b57      	ldr	r3, [pc, #348]	; (800b00c <HAL_RCC_OscConfig+0x4ac>)
 800aeae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeb0:	4a56      	ldr	r2, [pc, #344]	; (800b00c <HAL_RCC_OscConfig+0x4ac>)
 800aeb2:	f023 0304 	bic.w	r3, r3, #4
 800aeb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d015      	beq.n	800aeec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aec0:	f7fe fc76 	bl	80097b0 <HAL_GetTick>
 800aec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aec6:	e00a      	b.n	800aede <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aec8:	f7fe fc72 	bl	80097b0 <HAL_GetTick>
 800aecc:	4602      	mov	r2, r0
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	1ad3      	subs	r3, r2, r3
 800aed2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d901      	bls.n	800aede <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800aeda:	2303      	movs	r3, #3
 800aedc:	e0d7      	b.n	800b08e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aede:	4b4b      	ldr	r3, [pc, #300]	; (800b00c <HAL_RCC_OscConfig+0x4ac>)
 800aee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aee2:	f003 0302 	and.w	r3, r3, #2
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d0ee      	beq.n	800aec8 <HAL_RCC_OscConfig+0x368>
 800aeea:	e014      	b.n	800af16 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aeec:	f7fe fc60 	bl	80097b0 <HAL_GetTick>
 800aef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aef2:	e00a      	b.n	800af0a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aef4:	f7fe fc5c 	bl	80097b0 <HAL_GetTick>
 800aef8:	4602      	mov	r2, r0
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	1ad3      	subs	r3, r2, r3
 800aefe:	f241 3288 	movw	r2, #5000	; 0x1388
 800af02:	4293      	cmp	r3, r2
 800af04:	d901      	bls.n	800af0a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800af06:	2303      	movs	r3, #3
 800af08:	e0c1      	b.n	800b08e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800af0a:	4b40      	ldr	r3, [pc, #256]	; (800b00c <HAL_RCC_OscConfig+0x4ac>)
 800af0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af0e:	f003 0302 	and.w	r3, r3, #2
 800af12:	2b00      	cmp	r3, #0
 800af14:	d1ee      	bne.n	800aef4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800af16:	7dfb      	ldrb	r3, [r7, #23]
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d105      	bne.n	800af28 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800af1c:	4b3b      	ldr	r3, [pc, #236]	; (800b00c <HAL_RCC_OscConfig+0x4ac>)
 800af1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af20:	4a3a      	ldr	r2, [pc, #232]	; (800b00c <HAL_RCC_OscConfig+0x4ac>)
 800af22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	699b      	ldr	r3, [r3, #24]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	f000 80ad 	beq.w	800b08c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800af32:	4b36      	ldr	r3, [pc, #216]	; (800b00c <HAL_RCC_OscConfig+0x4ac>)
 800af34:	689b      	ldr	r3, [r3, #8]
 800af36:	f003 030c 	and.w	r3, r3, #12
 800af3a:	2b08      	cmp	r3, #8
 800af3c:	d060      	beq.n	800b000 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	699b      	ldr	r3, [r3, #24]
 800af42:	2b02      	cmp	r3, #2
 800af44:	d145      	bne.n	800afd2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af46:	4b33      	ldr	r3, [pc, #204]	; (800b014 <HAL_RCC_OscConfig+0x4b4>)
 800af48:	2200      	movs	r2, #0
 800af4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af4c:	f7fe fc30 	bl	80097b0 <HAL_GetTick>
 800af50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800af52:	e008      	b.n	800af66 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800af54:	f7fe fc2c 	bl	80097b0 <HAL_GetTick>
 800af58:	4602      	mov	r2, r0
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	1ad3      	subs	r3, r2, r3
 800af5e:	2b02      	cmp	r3, #2
 800af60:	d901      	bls.n	800af66 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800af62:	2303      	movs	r3, #3
 800af64:	e093      	b.n	800b08e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800af66:	4b29      	ldr	r3, [pc, #164]	; (800b00c <HAL_RCC_OscConfig+0x4ac>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1f0      	bne.n	800af54 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	69da      	ldr	r2, [r3, #28]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6a1b      	ldr	r3, [r3, #32]
 800af7a:	431a      	orrs	r2, r3
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af80:	019b      	lsls	r3, r3, #6
 800af82:	431a      	orrs	r2, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af88:	085b      	lsrs	r3, r3, #1
 800af8a:	3b01      	subs	r3, #1
 800af8c:	041b      	lsls	r3, r3, #16
 800af8e:	431a      	orrs	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af94:	061b      	lsls	r3, r3, #24
 800af96:	431a      	orrs	r2, r3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af9c:	071b      	lsls	r3, r3, #28
 800af9e:	491b      	ldr	r1, [pc, #108]	; (800b00c <HAL_RCC_OscConfig+0x4ac>)
 800afa0:	4313      	orrs	r3, r2
 800afa2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800afa4:	4b1b      	ldr	r3, [pc, #108]	; (800b014 <HAL_RCC_OscConfig+0x4b4>)
 800afa6:	2201      	movs	r2, #1
 800afa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afaa:	f7fe fc01 	bl	80097b0 <HAL_GetTick>
 800afae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800afb0:	e008      	b.n	800afc4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800afb2:	f7fe fbfd 	bl	80097b0 <HAL_GetTick>
 800afb6:	4602      	mov	r2, r0
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	1ad3      	subs	r3, r2, r3
 800afbc:	2b02      	cmp	r3, #2
 800afbe:	d901      	bls.n	800afc4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800afc0:	2303      	movs	r3, #3
 800afc2:	e064      	b.n	800b08e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800afc4:	4b11      	ldr	r3, [pc, #68]	; (800b00c <HAL_RCC_OscConfig+0x4ac>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d0f0      	beq.n	800afb2 <HAL_RCC_OscConfig+0x452>
 800afd0:	e05c      	b.n	800b08c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800afd2:	4b10      	ldr	r3, [pc, #64]	; (800b014 <HAL_RCC_OscConfig+0x4b4>)
 800afd4:	2200      	movs	r2, #0
 800afd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afd8:	f7fe fbea 	bl	80097b0 <HAL_GetTick>
 800afdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800afde:	e008      	b.n	800aff2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800afe0:	f7fe fbe6 	bl	80097b0 <HAL_GetTick>
 800afe4:	4602      	mov	r2, r0
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	1ad3      	subs	r3, r2, r3
 800afea:	2b02      	cmp	r3, #2
 800afec:	d901      	bls.n	800aff2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800afee:	2303      	movs	r3, #3
 800aff0:	e04d      	b.n	800b08e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aff2:	4b06      	ldr	r3, [pc, #24]	; (800b00c <HAL_RCC_OscConfig+0x4ac>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800affa:	2b00      	cmp	r3, #0
 800affc:	d1f0      	bne.n	800afe0 <HAL_RCC_OscConfig+0x480>
 800affe:	e045      	b.n	800b08c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	699b      	ldr	r3, [r3, #24]
 800b004:	2b01      	cmp	r3, #1
 800b006:	d107      	bne.n	800b018 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800b008:	2301      	movs	r3, #1
 800b00a:	e040      	b.n	800b08e <HAL_RCC_OscConfig+0x52e>
 800b00c:	40023800 	.word	0x40023800
 800b010:	40007000 	.word	0x40007000
 800b014:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b018:	4b1f      	ldr	r3, [pc, #124]	; (800b098 <HAL_RCC_OscConfig+0x538>)
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	699b      	ldr	r3, [r3, #24]
 800b022:	2b01      	cmp	r3, #1
 800b024:	d030      	beq.n	800b088 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b030:	429a      	cmp	r2, r3
 800b032:	d129      	bne.n	800b088 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b03e:	429a      	cmp	r2, r3
 800b040:	d122      	bne.n	800b088 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b048:	4013      	ands	r3, r2
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b04e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b050:	4293      	cmp	r3, r2
 800b052:	d119      	bne.n	800b088 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b05e:	085b      	lsrs	r3, r3, #1
 800b060:	3b01      	subs	r3, #1
 800b062:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b064:	429a      	cmp	r2, r3
 800b066:	d10f      	bne.n	800b088 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b072:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b074:	429a      	cmp	r2, r3
 800b076:	d107      	bne.n	800b088 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b082:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b084:	429a      	cmp	r2, r3
 800b086:	d001      	beq.n	800b08c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800b088:	2301      	movs	r3, #1
 800b08a:	e000      	b.n	800b08e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3718      	adds	r7, #24
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	40023800 	.word	0x40023800

0800b09c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d101      	bne.n	800b0ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e07b      	b.n	800b1a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d108      	bne.n	800b0c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b0be:	d009      	beq.n	800b0d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	61da      	str	r2, [r3, #28]
 800b0c6:	e005      	b.n	800b0d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d106      	bne.n	800b0f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f7fe f82a 	bl	8009148 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2202      	movs	r2, #2
 800b0f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b10a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	689b      	ldr	r3, [r3, #8]
 800b118:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b11c:	431a      	orrs	r2, r3
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b126:	431a      	orrs	r2, r3
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	691b      	ldr	r3, [r3, #16]
 800b12c:	f003 0302 	and.w	r3, r3, #2
 800b130:	431a      	orrs	r2, r3
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	695b      	ldr	r3, [r3, #20]
 800b136:	f003 0301 	and.w	r3, r3, #1
 800b13a:	431a      	orrs	r2, r3
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	699b      	ldr	r3, [r3, #24]
 800b140:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b144:	431a      	orrs	r2, r3
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	69db      	ldr	r3, [r3, #28]
 800b14a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b14e:	431a      	orrs	r2, r3
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a1b      	ldr	r3, [r3, #32]
 800b154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b158:	ea42 0103 	orr.w	r1, r2, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b160:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	430a      	orrs	r2, r1
 800b16a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	699b      	ldr	r3, [r3, #24]
 800b170:	0c1b      	lsrs	r3, r3, #16
 800b172:	f003 0104 	and.w	r1, r3, #4
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b17a:	f003 0210 	and.w	r2, r3, #16
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	430a      	orrs	r2, r1
 800b184:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	69da      	ldr	r2, [r3, #28]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b194:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2200      	movs	r2, #0
 800b19a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b1a4:	2300      	movs	r3, #0
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3708      	adds	r7, #8
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b088      	sub	sp, #32
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	60f8      	str	r0, [r7, #12]
 800b1b6:	60b9      	str	r1, [r7, #8]
 800b1b8:	603b      	str	r3, [r7, #0]
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d101      	bne.n	800b1d0 <HAL_SPI_Transmit+0x22>
 800b1cc:	2302      	movs	r3, #2
 800b1ce:	e126      	b.n	800b41e <HAL_SPI_Transmit+0x270>
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b1d8:	f7fe faea 	bl	80097b0 <HAL_GetTick>
 800b1dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b1de:	88fb      	ldrh	r3, [r7, #6]
 800b1e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d002      	beq.n	800b1f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b1ee:	2302      	movs	r3, #2
 800b1f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b1f2:	e10b      	b.n	800b40c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d002      	beq.n	800b200 <HAL_SPI_Transmit+0x52>
 800b1fa:	88fb      	ldrh	r3, [r7, #6]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d102      	bne.n	800b206 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b200:	2301      	movs	r3, #1
 800b202:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b204:	e102      	b.n	800b40c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2203      	movs	r2, #3
 800b20a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2200      	movs	r2, #0
 800b212:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	68ba      	ldr	r2, [r7, #8]
 800b218:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	88fa      	ldrh	r2, [r7, #6]
 800b21e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	88fa      	ldrh	r2, [r7, #6]
 800b224:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2200      	movs	r2, #0
 800b230:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2200      	movs	r2, #0
 800b236:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2200      	movs	r2, #0
 800b23c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2200      	movs	r2, #0
 800b242:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	689b      	ldr	r3, [r3, #8]
 800b248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b24c:	d10f      	bne.n	800b26e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b25c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b26c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b278:	2b40      	cmp	r3, #64	; 0x40
 800b27a:	d007      	beq.n	800b28c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b28a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b294:	d14b      	bne.n	800b32e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d002      	beq.n	800b2a4 <HAL_SPI_Transmit+0xf6>
 800b29e:	8afb      	ldrh	r3, [r7, #22]
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d13e      	bne.n	800b322 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2a8:	881a      	ldrh	r2, [r3, #0]
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b4:	1c9a      	adds	r2, r3, #2
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	3b01      	subs	r3, #1
 800b2c2:	b29a      	uxth	r2, r3
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b2c8:	e02b      	b.n	800b322 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	f003 0302 	and.w	r3, r3, #2
 800b2d4:	2b02      	cmp	r3, #2
 800b2d6:	d112      	bne.n	800b2fe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2dc:	881a      	ldrh	r2, [r3, #0]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e8:	1c9a      	adds	r2, r3, #2
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	3b01      	subs	r3, #1
 800b2f6:	b29a      	uxth	r2, r3
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	86da      	strh	r2, [r3, #54]	; 0x36
 800b2fc:	e011      	b.n	800b322 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b2fe:	f7fe fa57 	bl	80097b0 <HAL_GetTick>
 800b302:	4602      	mov	r2, r0
 800b304:	69bb      	ldr	r3, [r7, #24]
 800b306:	1ad3      	subs	r3, r2, r3
 800b308:	683a      	ldr	r2, [r7, #0]
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d803      	bhi.n	800b316 <HAL_SPI_Transmit+0x168>
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b314:	d102      	bne.n	800b31c <HAL_SPI_Transmit+0x16e>
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d102      	bne.n	800b322 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b31c:	2303      	movs	r3, #3
 800b31e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b320:	e074      	b.n	800b40c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b326:	b29b      	uxth	r3, r3
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d1ce      	bne.n	800b2ca <HAL_SPI_Transmit+0x11c>
 800b32c:	e04c      	b.n	800b3c8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d002      	beq.n	800b33c <HAL_SPI_Transmit+0x18e>
 800b336:	8afb      	ldrh	r3, [r7, #22]
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d140      	bne.n	800b3be <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	330c      	adds	r3, #12
 800b346:	7812      	ldrb	r2, [r2, #0]
 800b348:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b34e:	1c5a      	adds	r2, r3, #1
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b358:	b29b      	uxth	r3, r3
 800b35a:	3b01      	subs	r3, #1
 800b35c:	b29a      	uxth	r2, r3
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b362:	e02c      	b.n	800b3be <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	f003 0302 	and.w	r3, r3, #2
 800b36e:	2b02      	cmp	r3, #2
 800b370:	d113      	bne.n	800b39a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	330c      	adds	r3, #12
 800b37c:	7812      	ldrb	r2, [r2, #0]
 800b37e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b384:	1c5a      	adds	r2, r3, #1
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b38e:	b29b      	uxth	r3, r3
 800b390:	3b01      	subs	r3, #1
 800b392:	b29a      	uxth	r2, r3
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	86da      	strh	r2, [r3, #54]	; 0x36
 800b398:	e011      	b.n	800b3be <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b39a:	f7fe fa09 	bl	80097b0 <HAL_GetTick>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	69bb      	ldr	r3, [r7, #24]
 800b3a2:	1ad3      	subs	r3, r2, r3
 800b3a4:	683a      	ldr	r2, [r7, #0]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d803      	bhi.n	800b3b2 <HAL_SPI_Transmit+0x204>
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b0:	d102      	bne.n	800b3b8 <HAL_SPI_Transmit+0x20a>
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d102      	bne.n	800b3be <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b3b8:	2303      	movs	r3, #3
 800b3ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b3bc:	e026      	b.n	800b40c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d1cd      	bne.n	800b364 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b3c8:	69ba      	ldr	r2, [r7, #24]
 800b3ca:	6839      	ldr	r1, [r7, #0]
 800b3cc:	68f8      	ldr	r0, [r7, #12]
 800b3ce:	f000 fbcb 	bl	800bb68 <SPI_EndRxTxTransaction>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d002      	beq.n	800b3de <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2220      	movs	r2, #32
 800b3dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	689b      	ldr	r3, [r3, #8]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d10a      	bne.n	800b3fc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	613b      	str	r3, [r7, #16]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	613b      	str	r3, [r7, #16]
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	689b      	ldr	r3, [r3, #8]
 800b3f8:	613b      	str	r3, [r7, #16]
 800b3fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b400:	2b00      	cmp	r3, #0
 800b402:	d002      	beq.n	800b40a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b404:	2301      	movs	r3, #1
 800b406:	77fb      	strb	r3, [r7, #31]
 800b408:	e000      	b.n	800b40c <HAL_SPI_Transmit+0x25e>
  }

error:
 800b40a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2201      	movs	r2, #1
 800b410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2200      	movs	r2, #0
 800b418:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b41c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3720      	adds	r7, #32
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}

0800b426 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b426:	b580      	push	{r7, lr}
 800b428:	b088      	sub	sp, #32
 800b42a:	af02      	add	r7, sp, #8
 800b42c:	60f8      	str	r0, [r7, #12]
 800b42e:	60b9      	str	r1, [r7, #8]
 800b430:	603b      	str	r3, [r7, #0]
 800b432:	4613      	mov	r3, r2
 800b434:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b436:	2300      	movs	r3, #0
 800b438:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b442:	d112      	bne.n	800b46a <HAL_SPI_Receive+0x44>
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d10e      	bne.n	800b46a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2204      	movs	r2, #4
 800b450:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b454:	88fa      	ldrh	r2, [r7, #6]
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	9300      	str	r3, [sp, #0]
 800b45a:	4613      	mov	r3, r2
 800b45c:	68ba      	ldr	r2, [r7, #8]
 800b45e:	68b9      	ldr	r1, [r7, #8]
 800b460:	68f8      	ldr	r0, [r7, #12]
 800b462:	f000 f8f1 	bl	800b648 <HAL_SPI_TransmitReceive>
 800b466:	4603      	mov	r3, r0
 800b468:	e0ea      	b.n	800b640 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b470:	2b01      	cmp	r3, #1
 800b472:	d101      	bne.n	800b478 <HAL_SPI_Receive+0x52>
 800b474:	2302      	movs	r3, #2
 800b476:	e0e3      	b.n	800b640 <HAL_SPI_Receive+0x21a>
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b480:	f7fe f996 	bl	80097b0 <HAL_GetTick>
 800b484:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d002      	beq.n	800b498 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b492:	2302      	movs	r3, #2
 800b494:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b496:	e0ca      	b.n	800b62e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d002      	beq.n	800b4a4 <HAL_SPI_Receive+0x7e>
 800b49e:	88fb      	ldrh	r3, [r7, #6]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d102      	bne.n	800b4aa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b4a8:	e0c1      	b.n	800b62e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2204      	movs	r2, #4
 800b4ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	68ba      	ldr	r2, [r7, #8]
 800b4bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	88fa      	ldrh	r2, [r7, #6]
 800b4c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	88fa      	ldrh	r2, [r7, #6]
 800b4c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4f0:	d10f      	bne.n	800b512 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	681a      	ldr	r2, [r3, #0]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b500:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	681a      	ldr	r2, [r3, #0]
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b510:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b51c:	2b40      	cmp	r3, #64	; 0x40
 800b51e:	d007      	beq.n	800b530 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b52e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d162      	bne.n	800b5fe <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b538:	e02e      	b.n	800b598 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	f003 0301 	and.w	r3, r3, #1
 800b544:	2b01      	cmp	r3, #1
 800b546:	d115      	bne.n	800b574 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f103 020c 	add.w	r2, r3, #12
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b554:	7812      	ldrb	r2, [r2, #0]
 800b556:	b2d2      	uxtb	r2, r2
 800b558:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b55e:	1c5a      	adds	r2, r3, #1
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b568:	b29b      	uxth	r3, r3
 800b56a:	3b01      	subs	r3, #1
 800b56c:	b29a      	uxth	r2, r3
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b572:	e011      	b.n	800b598 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b574:	f7fe f91c 	bl	80097b0 <HAL_GetTick>
 800b578:	4602      	mov	r2, r0
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	1ad3      	subs	r3, r2, r3
 800b57e:	683a      	ldr	r2, [r7, #0]
 800b580:	429a      	cmp	r2, r3
 800b582:	d803      	bhi.n	800b58c <HAL_SPI_Receive+0x166>
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b58a:	d102      	bne.n	800b592 <HAL_SPI_Receive+0x16c>
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d102      	bne.n	800b598 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800b592:	2303      	movs	r3, #3
 800b594:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b596:	e04a      	b.n	800b62e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d1cb      	bne.n	800b53a <HAL_SPI_Receive+0x114>
 800b5a2:	e031      	b.n	800b608 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	f003 0301 	and.w	r3, r3, #1
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d113      	bne.n	800b5da <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	68da      	ldr	r2, [r3, #12]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5bc:	b292      	uxth	r2, r2
 800b5be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c4:	1c9a      	adds	r2, r3, #2
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	b29a      	uxth	r2, r3
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b5d8:	e011      	b.n	800b5fe <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5da:	f7fe f8e9 	bl	80097b0 <HAL_GetTick>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	1ad3      	subs	r3, r2, r3
 800b5e4:	683a      	ldr	r2, [r7, #0]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d803      	bhi.n	800b5f2 <HAL_SPI_Receive+0x1cc>
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5f0:	d102      	bne.n	800b5f8 <HAL_SPI_Receive+0x1d2>
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d102      	bne.n	800b5fe <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800b5f8:	2303      	movs	r3, #3
 800b5fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b5fc:	e017      	b.n	800b62e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b602:	b29b      	uxth	r3, r3
 800b604:	2b00      	cmp	r3, #0
 800b606:	d1cd      	bne.n	800b5a4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b608:	693a      	ldr	r2, [r7, #16]
 800b60a:	6839      	ldr	r1, [r7, #0]
 800b60c:	68f8      	ldr	r0, [r7, #12]
 800b60e:	f000 fa45 	bl	800ba9c <SPI_EndRxTransaction>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d002      	beq.n	800b61e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2220      	movs	r2, #32
 800b61c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b622:	2b00      	cmp	r3, #0
 800b624:	d002      	beq.n	800b62c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800b626:	2301      	movs	r3, #1
 800b628:	75fb      	strb	r3, [r7, #23]
 800b62a:	e000      	b.n	800b62e <HAL_SPI_Receive+0x208>
  }

error :
 800b62c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2201      	movs	r2, #1
 800b632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2200      	movs	r2, #0
 800b63a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b63e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b640:	4618      	mov	r0, r3
 800b642:	3718      	adds	r7, #24
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b08c      	sub	sp, #48	; 0x30
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	607a      	str	r2, [r7, #4]
 800b654:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b656:	2301      	movs	r3, #1
 800b658:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b65a:	2300      	movs	r3, #0
 800b65c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b666:	2b01      	cmp	r3, #1
 800b668:	d101      	bne.n	800b66e <HAL_SPI_TransmitReceive+0x26>
 800b66a:	2302      	movs	r3, #2
 800b66c:	e18a      	b.n	800b984 <HAL_SPI_TransmitReceive+0x33c>
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2201      	movs	r2, #1
 800b672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b676:	f7fe f89b 	bl	80097b0 <HAL_GetTick>
 800b67a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b68c:	887b      	ldrh	r3, [r7, #2]
 800b68e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b690:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b694:	2b01      	cmp	r3, #1
 800b696:	d00f      	beq.n	800b6b8 <HAL_SPI_TransmitReceive+0x70>
 800b698:	69fb      	ldr	r3, [r7, #28]
 800b69a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b69e:	d107      	bne.n	800b6b0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d103      	bne.n	800b6b0 <HAL_SPI_TransmitReceive+0x68>
 800b6a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6ac:	2b04      	cmp	r3, #4
 800b6ae:	d003      	beq.n	800b6b8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b6b0:	2302      	movs	r3, #2
 800b6b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b6b6:	e15b      	b.n	800b970 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d005      	beq.n	800b6ca <HAL_SPI_TransmitReceive+0x82>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d002      	beq.n	800b6ca <HAL_SPI_TransmitReceive+0x82>
 800b6c4:	887b      	ldrh	r3, [r7, #2]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d103      	bne.n	800b6d2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b6d0:	e14e      	b.n	800b970 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	2b04      	cmp	r3, #4
 800b6dc:	d003      	beq.n	800b6e6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2205      	movs	r2, #5
 800b6e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	887a      	ldrh	r2, [r7, #2]
 800b6f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	887a      	ldrh	r2, [r7, #2]
 800b6fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	68ba      	ldr	r2, [r7, #8]
 800b702:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	887a      	ldrh	r2, [r7, #2]
 800b708:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	887a      	ldrh	r2, [r7, #2]
 800b70e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2200      	movs	r2, #0
 800b714:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2200      	movs	r2, #0
 800b71a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b726:	2b40      	cmp	r3, #64	; 0x40
 800b728:	d007      	beq.n	800b73a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b738:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b742:	d178      	bne.n	800b836 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d002      	beq.n	800b752 <HAL_SPI_TransmitReceive+0x10a>
 800b74c:	8b7b      	ldrh	r3, [r7, #26]
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d166      	bne.n	800b820 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b756:	881a      	ldrh	r2, [r3, #0]
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b762:	1c9a      	adds	r2, r3, #2
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	3b01      	subs	r3, #1
 800b770:	b29a      	uxth	r2, r3
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b776:	e053      	b.n	800b820 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	689b      	ldr	r3, [r3, #8]
 800b77e:	f003 0302 	and.w	r3, r3, #2
 800b782:	2b02      	cmp	r3, #2
 800b784:	d11b      	bne.n	800b7be <HAL_SPI_TransmitReceive+0x176>
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d016      	beq.n	800b7be <HAL_SPI_TransmitReceive+0x176>
 800b790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b792:	2b01      	cmp	r3, #1
 800b794:	d113      	bne.n	800b7be <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b79a:	881a      	ldrh	r2, [r3, #0]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a6:	1c9a      	adds	r2, r3, #2
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	3b01      	subs	r3, #1
 800b7b4:	b29a      	uxth	r2, r3
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	f003 0301 	and.w	r3, r3, #1
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d119      	bne.n	800b800 <HAL_SPI_TransmitReceive+0x1b8>
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d014      	beq.n	800b800 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	68da      	ldr	r2, [r3, #12]
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e0:	b292      	uxth	r2, r2
 800b7e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e8:	1c9a      	adds	r2, r3, #2
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	3b01      	subs	r3, #1
 800b7f6:	b29a      	uxth	r2, r3
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b800:	f7fd ffd6 	bl	80097b0 <HAL_GetTick>
 800b804:	4602      	mov	r2, r0
 800b806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b808:	1ad3      	subs	r3, r2, r3
 800b80a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d807      	bhi.n	800b820 <HAL_SPI_TransmitReceive+0x1d8>
 800b810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b816:	d003      	beq.n	800b820 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b818:	2303      	movs	r3, #3
 800b81a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b81e:	e0a7      	b.n	800b970 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b824:	b29b      	uxth	r3, r3
 800b826:	2b00      	cmp	r3, #0
 800b828:	d1a6      	bne.n	800b778 <HAL_SPI_TransmitReceive+0x130>
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b82e:	b29b      	uxth	r3, r3
 800b830:	2b00      	cmp	r3, #0
 800b832:	d1a1      	bne.n	800b778 <HAL_SPI_TransmitReceive+0x130>
 800b834:	e07c      	b.n	800b930 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d002      	beq.n	800b844 <HAL_SPI_TransmitReceive+0x1fc>
 800b83e:	8b7b      	ldrh	r3, [r7, #26]
 800b840:	2b01      	cmp	r3, #1
 800b842:	d16b      	bne.n	800b91c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	330c      	adds	r3, #12
 800b84e:	7812      	ldrb	r2, [r2, #0]
 800b850:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b856:	1c5a      	adds	r2, r3, #1
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b860:	b29b      	uxth	r3, r3
 800b862:	3b01      	subs	r3, #1
 800b864:	b29a      	uxth	r2, r3
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b86a:	e057      	b.n	800b91c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	689b      	ldr	r3, [r3, #8]
 800b872:	f003 0302 	and.w	r3, r3, #2
 800b876:	2b02      	cmp	r3, #2
 800b878:	d11c      	bne.n	800b8b4 <HAL_SPI_TransmitReceive+0x26c>
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b87e:	b29b      	uxth	r3, r3
 800b880:	2b00      	cmp	r3, #0
 800b882:	d017      	beq.n	800b8b4 <HAL_SPI_TransmitReceive+0x26c>
 800b884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b886:	2b01      	cmp	r3, #1
 800b888:	d114      	bne.n	800b8b4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	330c      	adds	r3, #12
 800b894:	7812      	ldrb	r2, [r2, #0]
 800b896:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b89c:	1c5a      	adds	r2, r3, #1
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	3b01      	subs	r3, #1
 800b8aa:	b29a      	uxth	r2, r3
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	689b      	ldr	r3, [r3, #8]
 800b8ba:	f003 0301 	and.w	r3, r3, #1
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	d119      	bne.n	800b8f6 <HAL_SPI_TransmitReceive+0x2ae>
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d014      	beq.n	800b8f6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	68da      	ldr	r2, [r3, #12]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8d6:	b2d2      	uxtb	r2, r2
 800b8d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8de:	1c5a      	adds	r2, r3, #1
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	3b01      	subs	r3, #1
 800b8ec:	b29a      	uxth	r2, r3
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b8f6:	f7fd ff5b 	bl	80097b0 <HAL_GetTick>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fe:	1ad3      	subs	r3, r2, r3
 800b900:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b902:	429a      	cmp	r2, r3
 800b904:	d803      	bhi.n	800b90e <HAL_SPI_TransmitReceive+0x2c6>
 800b906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b90c:	d102      	bne.n	800b914 <HAL_SPI_TransmitReceive+0x2cc>
 800b90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b910:	2b00      	cmp	r3, #0
 800b912:	d103      	bne.n	800b91c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b914:	2303      	movs	r3, #3
 800b916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b91a:	e029      	b.n	800b970 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b920:	b29b      	uxth	r3, r3
 800b922:	2b00      	cmp	r3, #0
 800b924:	d1a2      	bne.n	800b86c <HAL_SPI_TransmitReceive+0x224>
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d19d      	bne.n	800b86c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b932:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b934:	68f8      	ldr	r0, [r7, #12]
 800b936:	f000 f917 	bl	800bb68 <SPI_EndRxTxTransaction>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d006      	beq.n	800b94e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b940:	2301      	movs	r3, #1
 800b942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2220      	movs	r2, #32
 800b94a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b94c:	e010      	b.n	800b970 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d10b      	bne.n	800b96e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b956:	2300      	movs	r3, #0
 800b958:	617b      	str	r3, [r7, #20]
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	617b      	str	r3, [r7, #20]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	689b      	ldr	r3, [r3, #8]
 800b968:	617b      	str	r3, [r7, #20]
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	e000      	b.n	800b970 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b96e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2201      	movs	r2, #1
 800b974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2200      	movs	r2, #0
 800b97c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b980:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b984:	4618      	mov	r0, r3
 800b986:	3730      	adds	r7, #48	; 0x30
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b088      	sub	sp, #32
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	603b      	str	r3, [r7, #0]
 800b998:	4613      	mov	r3, r2
 800b99a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b99c:	f7fd ff08 	bl	80097b0 <HAL_GetTick>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a4:	1a9b      	subs	r3, r3, r2
 800b9a6:	683a      	ldr	r2, [r7, #0]
 800b9a8:	4413      	add	r3, r2
 800b9aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b9ac:	f7fd ff00 	bl	80097b0 <HAL_GetTick>
 800b9b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b9b2:	4b39      	ldr	r3, [pc, #228]	; (800ba98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	015b      	lsls	r3, r3, #5
 800b9b8:	0d1b      	lsrs	r3, r3, #20
 800b9ba:	69fa      	ldr	r2, [r7, #28]
 800b9bc:	fb02 f303 	mul.w	r3, r2, r3
 800b9c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b9c2:	e054      	b.n	800ba6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ca:	d050      	beq.n	800ba6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b9cc:	f7fd fef0 	bl	80097b0 <HAL_GetTick>
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	69bb      	ldr	r3, [r7, #24]
 800b9d4:	1ad3      	subs	r3, r2, r3
 800b9d6:	69fa      	ldr	r2, [r7, #28]
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d902      	bls.n	800b9e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b9dc:	69fb      	ldr	r3, [r7, #28]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d13d      	bne.n	800ba5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	685a      	ldr	r2, [r3, #4]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b9f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b9fa:	d111      	bne.n	800ba20 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba04:	d004      	beq.n	800ba10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba0e:	d107      	bne.n	800ba20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba28:	d10f      	bne.n	800ba4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	681a      	ldr	r2, [r3, #0]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ba38:	601a      	str	r2, [r3, #0]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ba48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2200      	movs	r2, #0
 800ba56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ba5a:	2303      	movs	r3, #3
 800ba5c:	e017      	b.n	800ba8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d101      	bne.n	800ba68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ba64:	2300      	movs	r3, #0
 800ba66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	3b01      	subs	r3, #1
 800ba6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	689a      	ldr	r2, [r3, #8]
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	4013      	ands	r3, r2
 800ba78:	68ba      	ldr	r2, [r7, #8]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	bf0c      	ite	eq
 800ba7e:	2301      	moveq	r3, #1
 800ba80:	2300      	movne	r3, #0
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	461a      	mov	r2, r3
 800ba86:	79fb      	ldrb	r3, [r7, #7]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d19b      	bne.n	800b9c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ba8c:	2300      	movs	r3, #0
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3720      	adds	r7, #32
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	2000001c 	.word	0x2000001c

0800ba9c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b086      	sub	sp, #24
 800baa0:	af02      	add	r7, sp, #8
 800baa2:	60f8      	str	r0, [r7, #12]
 800baa4:	60b9      	str	r1, [r7, #8]
 800baa6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bab0:	d111      	bne.n	800bad6 <SPI_EndRxTransaction+0x3a>
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800baba:	d004      	beq.n	800bac6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	689b      	ldr	r3, [r3, #8]
 800bac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bac4:	d107      	bne.n	800bad6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	681a      	ldr	r2, [r3, #0]
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bad4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bade:	d12a      	bne.n	800bb36 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bae8:	d012      	beq.n	800bb10 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	9300      	str	r3, [sp, #0]
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	2200      	movs	r2, #0
 800baf2:	2180      	movs	r1, #128	; 0x80
 800baf4:	68f8      	ldr	r0, [r7, #12]
 800baf6:	f7ff ff49 	bl	800b98c <SPI_WaitFlagStateUntilTimeout>
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d02d      	beq.n	800bb5c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb04:	f043 0220 	orr.w	r2, r3, #32
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bb0c:	2303      	movs	r3, #3
 800bb0e:	e026      	b.n	800bb5e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	9300      	str	r3, [sp, #0]
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	2200      	movs	r2, #0
 800bb18:	2101      	movs	r1, #1
 800bb1a:	68f8      	ldr	r0, [r7, #12]
 800bb1c:	f7ff ff36 	bl	800b98c <SPI_WaitFlagStateUntilTimeout>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d01a      	beq.n	800bb5c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb2a:	f043 0220 	orr.w	r2, r3, #32
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bb32:	2303      	movs	r3, #3
 800bb34:	e013      	b.n	800bb5e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	9300      	str	r3, [sp, #0]
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	2101      	movs	r1, #1
 800bb40:	68f8      	ldr	r0, [r7, #12]
 800bb42:	f7ff ff23 	bl	800b98c <SPI_WaitFlagStateUntilTimeout>
 800bb46:	4603      	mov	r3, r0
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d007      	beq.n	800bb5c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb50:	f043 0220 	orr.w	r2, r3, #32
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bb58:	2303      	movs	r3, #3
 800bb5a:	e000      	b.n	800bb5e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3710      	adds	r7, #16
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
	...

0800bb68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b088      	sub	sp, #32
 800bb6c:	af02      	add	r7, sp, #8
 800bb6e:	60f8      	str	r0, [r7, #12]
 800bb70:	60b9      	str	r1, [r7, #8]
 800bb72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bb74:	4b1b      	ldr	r3, [pc, #108]	; (800bbe4 <SPI_EndRxTxTransaction+0x7c>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a1b      	ldr	r2, [pc, #108]	; (800bbe8 <SPI_EndRxTxTransaction+0x80>)
 800bb7a:	fba2 2303 	umull	r2, r3, r2, r3
 800bb7e:	0d5b      	lsrs	r3, r3, #21
 800bb80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bb84:	fb02 f303 	mul.w	r3, r2, r3
 800bb88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb92:	d112      	bne.n	800bbba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	9300      	str	r3, [sp, #0]
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	2180      	movs	r1, #128	; 0x80
 800bb9e:	68f8      	ldr	r0, [r7, #12]
 800bba0:	f7ff fef4 	bl	800b98c <SPI_WaitFlagStateUntilTimeout>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d016      	beq.n	800bbd8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbae:	f043 0220 	orr.w	r2, r3, #32
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bbb6:	2303      	movs	r3, #3
 800bbb8:	e00f      	b.n	800bbda <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d00a      	beq.n	800bbd6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	3b01      	subs	r3, #1
 800bbc4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	689b      	ldr	r3, [r3, #8]
 800bbcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbd0:	2b80      	cmp	r3, #128	; 0x80
 800bbd2:	d0f2      	beq.n	800bbba <SPI_EndRxTxTransaction+0x52>
 800bbd4:	e000      	b.n	800bbd8 <SPI_EndRxTxTransaction+0x70>
        break;
 800bbd6:	bf00      	nop
  }

  return HAL_OK;
 800bbd8:	2300      	movs	r3, #0
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3718      	adds	r7, #24
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
 800bbe2:	bf00      	nop
 800bbe4:	2000001c 	.word	0x2000001c
 800bbe8:	165e9f81 	.word	0x165e9f81

0800bbec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d101      	bne.n	800bbfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	e03f      	b.n	800bc7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc04:	b2db      	uxtb	r3, r3
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d106      	bne.n	800bc18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f7fd fb10 	bl	8009238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2224      	movs	r2, #36	; 0x24
 800bc1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	68da      	ldr	r2, [r3, #12]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bc2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f001 f99d 	bl	800cf70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	691a      	ldr	r2, [r3, #16]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bc44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	695a      	ldr	r2, [r3, #20]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bc54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	68da      	ldr	r2, [r3, #12]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bc64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2220      	movs	r2, #32
 800bc70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2220      	movs	r2, #32
 800bc78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bc7c:	2300      	movs	r3, #0
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3708      	adds	r7, #8
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b082      	sub	sp, #8
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d101      	bne.n	800bc98 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800bc94:	2301      	movs	r3, #1
 800bc96:	e047      	b.n	800bd28 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc9e:	b2db      	uxtb	r3, r3
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d106      	bne.n	800bcb2 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f7fd fac3 	bl	8009238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2224      	movs	r2, #36	; 0x24
 800bcb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	68da      	ldr	r2, [r3, #12]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bcc8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f001 f950 	bl	800cf70 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	691a      	ldr	r2, [r3, #16]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bcde:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	695a      	ldr	r2, [r3, #20]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800bcee:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	695a      	ldr	r2, [r3, #20]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f042 0208 	orr.w	r2, r2, #8
 800bcfe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	68da      	ldr	r2, [r3, #12]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bd0e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2200      	movs	r2, #0
 800bd14:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2220      	movs	r2, #32
 800bd1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2220      	movs	r2, #32
 800bd22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bd26:	2300      	movs	r3, #0
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3708      	adds	r7, #8
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b08a      	sub	sp, #40	; 0x28
 800bd34:	af02      	add	r7, sp, #8
 800bd36:	60f8      	str	r0, [r7, #12]
 800bd38:	60b9      	str	r1, [r7, #8]
 800bd3a:	603b      	str	r3, [r7, #0]
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bd40:	2300      	movs	r3, #0
 800bd42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	2b20      	cmp	r3, #32
 800bd4e:	d17c      	bne.n	800be4a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d002      	beq.n	800bd5c <HAL_UART_Transmit+0x2c>
 800bd56:	88fb      	ldrh	r3, [r7, #6]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d101      	bne.n	800bd60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	e075      	b.n	800be4c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d101      	bne.n	800bd6e <HAL_UART_Transmit+0x3e>
 800bd6a:	2302      	movs	r3, #2
 800bd6c:	e06e      	b.n	800be4c <HAL_UART_Transmit+0x11c>
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2201      	movs	r2, #1
 800bd72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2221      	movs	r2, #33	; 0x21
 800bd80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bd84:	f7fd fd14 	bl	80097b0 <HAL_GetTick>
 800bd88:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	88fa      	ldrh	r2, [r7, #6]
 800bd8e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	88fa      	ldrh	r2, [r7, #6]
 800bd94:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd9e:	d108      	bne.n	800bdb2 <HAL_UART_Transmit+0x82>
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	691b      	ldr	r3, [r3, #16]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d104      	bne.n	800bdb2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	61bb      	str	r3, [r7, #24]
 800bdb0:	e003      	b.n	800bdba <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800bdc2:	e02a      	b.n	800be1a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	9300      	str	r3, [sp, #0]
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	2180      	movs	r1, #128	; 0x80
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	f000 fe03 	bl	800c9da <UART_WaitOnFlagUntilTimeout>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d001      	beq.n	800bdde <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800bdda:	2303      	movs	r3, #3
 800bddc:	e036      	b.n	800be4c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800bdde:	69fb      	ldr	r3, [r7, #28]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d10b      	bne.n	800bdfc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	881b      	ldrh	r3, [r3, #0]
 800bde8:	461a      	mov	r2, r3
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bdf2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bdf4:	69bb      	ldr	r3, [r7, #24]
 800bdf6:	3302      	adds	r3, #2
 800bdf8:	61bb      	str	r3, [r7, #24]
 800bdfa:	e007      	b.n	800be0c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	781a      	ldrb	r2, [r3, #0]
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800be06:	69fb      	ldr	r3, [r7, #28]
 800be08:	3301      	adds	r3, #1
 800be0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800be10:	b29b      	uxth	r3, r3
 800be12:	3b01      	subs	r3, #1
 800be14:	b29a      	uxth	r2, r3
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800be1e:	b29b      	uxth	r3, r3
 800be20:	2b00      	cmp	r3, #0
 800be22:	d1cf      	bne.n	800bdc4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	9300      	str	r3, [sp, #0]
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	2200      	movs	r2, #0
 800be2c:	2140      	movs	r1, #64	; 0x40
 800be2e:	68f8      	ldr	r0, [r7, #12]
 800be30:	f000 fdd3 	bl	800c9da <UART_WaitOnFlagUntilTimeout>
 800be34:	4603      	mov	r3, r0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d001      	beq.n	800be3e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800be3a:	2303      	movs	r3, #3
 800be3c:	e006      	b.n	800be4c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2220      	movs	r2, #32
 800be42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800be46:	2300      	movs	r3, #0
 800be48:	e000      	b.n	800be4c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800be4a:	2302      	movs	r3, #2
  }
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3720      	adds	r7, #32
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b08a      	sub	sp, #40	; 0x28
 800be58:	af02      	add	r7, sp, #8
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	603b      	str	r3, [r7, #0]
 800be60:	4613      	mov	r3, r2
 800be62:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800be64:	2300      	movs	r3, #0
 800be66:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	2b20      	cmp	r3, #32
 800be72:	f040 808c 	bne.w	800bf8e <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d002      	beq.n	800be82 <HAL_UART_Receive+0x2e>
 800be7c:	88fb      	ldrh	r3, [r7, #6]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d101      	bne.n	800be86 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800be82:	2301      	movs	r3, #1
 800be84:	e084      	b.n	800bf90 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be8c:	2b01      	cmp	r3, #1
 800be8e:	d101      	bne.n	800be94 <HAL_UART_Receive+0x40>
 800be90:	2302      	movs	r3, #2
 800be92:	e07d      	b.n	800bf90 <HAL_UART_Receive+0x13c>
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2201      	movs	r2, #1
 800be98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2200      	movs	r2, #0
 800bea0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2222      	movs	r2, #34	; 0x22
 800bea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2200      	movs	r2, #0
 800beae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800beb0:	f7fd fc7e 	bl	80097b0 <HAL_GetTick>
 800beb4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	88fa      	ldrh	r2, [r7, #6]
 800beba:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	88fa      	ldrh	r2, [r7, #6]
 800bec0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	689b      	ldr	r3, [r3, #8]
 800bec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800beca:	d108      	bne.n	800bede <HAL_UART_Receive+0x8a>
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d104      	bne.n	800bede <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800bed4:	2300      	movs	r3, #0
 800bed6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	61bb      	str	r3, [r7, #24]
 800bedc:	e003      	b.n	800bee6 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bee2:	2300      	movs	r3, #0
 800bee4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2200      	movs	r2, #0
 800beea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800beee:	e043      	b.n	800bf78 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	9300      	str	r3, [sp, #0]
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	2200      	movs	r2, #0
 800bef8:	2120      	movs	r1, #32
 800befa:	68f8      	ldr	r0, [r7, #12]
 800befc:	f000 fd6d 	bl	800c9da <UART_WaitOnFlagUntilTimeout>
 800bf00:	4603      	mov	r3, r0
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d001      	beq.n	800bf0a <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800bf06:	2303      	movs	r3, #3
 800bf08:	e042      	b.n	800bf90 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d10c      	bne.n	800bf2a <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf1c:	b29a      	uxth	r2, r3
 800bf1e:	69bb      	ldr	r3, [r7, #24]
 800bf20:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	3302      	adds	r3, #2
 800bf26:	61bb      	str	r3, [r7, #24]
 800bf28:	e01f      	b.n	800bf6a <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	689b      	ldr	r3, [r3, #8]
 800bf2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf32:	d007      	beq.n	800bf44 <HAL_UART_Receive+0xf0>
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	689b      	ldr	r3, [r3, #8]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d10a      	bne.n	800bf52 <HAL_UART_Receive+0xfe>
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	691b      	ldr	r3, [r3, #16]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d106      	bne.n	800bf52 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	b2da      	uxtb	r2, r3
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	701a      	strb	r2, [r3, #0]
 800bf50:	e008      	b.n	800bf64 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf5e:	b2da      	uxtb	r2, r3
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	3301      	adds	r3, #1
 800bf68:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	3b01      	subs	r3, #1
 800bf72:	b29a      	uxth	r2, r3
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d1b6      	bne.n	800bef0 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2220      	movs	r2, #32
 800bf86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	e000      	b.n	800bf90 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800bf8e:	2302      	movs	r3, #2
  }
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3720      	adds	r7, #32
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b08c      	sub	sp, #48	; 0x30
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfac:	b2db      	uxtb	r3, r3
 800bfae:	2b20      	cmp	r3, #32
 800bfb0:	d165      	bne.n	800c07e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d002      	beq.n	800bfbe <HAL_UART_Transmit_DMA+0x26>
 800bfb8:	88fb      	ldrh	r3, [r7, #6]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d101      	bne.n	800bfc2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	e05e      	b.n	800c080 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d101      	bne.n	800bfd0 <HAL_UART_Transmit_DMA+0x38>
 800bfcc:	2302      	movs	r3, #2
 800bfce:	e057      	b.n	800c080 <HAL_UART_Transmit_DMA+0xe8>
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800bfd8:	68ba      	ldr	r2, [r7, #8]
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	88fa      	ldrh	r2, [r7, #6]
 800bfe2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	88fa      	ldrh	r2, [r7, #6]
 800bfe8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2200      	movs	r2, #0
 800bfee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2221      	movs	r2, #33	; 0x21
 800bff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bffc:	4a22      	ldr	r2, [pc, #136]	; (800c088 <HAL_UART_Transmit_DMA+0xf0>)
 800bffe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c004:	4a21      	ldr	r2, [pc, #132]	; (800c08c <HAL_UART_Transmit_DMA+0xf4>)
 800c006:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c00c:	4a20      	ldr	r2, [pc, #128]	; (800c090 <HAL_UART_Transmit_DMA+0xf8>)
 800c00e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c014:	2200      	movs	r2, #0
 800c016:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800c018:	f107 0308 	add.w	r3, r7, #8
 800c01c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c024:	6819      	ldr	r1, [r3, #0]
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	3304      	adds	r3, #4
 800c02c:	461a      	mov	r2, r3
 800c02e:	88fb      	ldrh	r3, [r7, #6]
 800c030:	f7fd fdae 	bl	8009b90 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c03c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2200      	movs	r2, #0
 800c042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	3314      	adds	r3, #20
 800c04c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c04e:	69bb      	ldr	r3, [r7, #24]
 800c050:	e853 3f00 	ldrex	r3, [r3]
 800c054:	617b      	str	r3, [r7, #20]
   return(result);
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c05c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	3314      	adds	r3, #20
 800c064:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c066:	627a      	str	r2, [r7, #36]	; 0x24
 800c068:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c06a:	6a39      	ldr	r1, [r7, #32]
 800c06c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c06e:	e841 2300 	strex	r3, r2, [r1]
 800c072:	61fb      	str	r3, [r7, #28]
   return(result);
 800c074:	69fb      	ldr	r3, [r7, #28]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d1e5      	bne.n	800c046 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800c07a:	2300      	movs	r3, #0
 800c07c:	e000      	b.n	800c080 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800c07e:	2302      	movs	r3, #2
  }
}
 800c080:	4618      	mov	r0, r3
 800c082:	3730      	adds	r7, #48	; 0x30
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}
 800c088:	0800c735 	.word	0x0800c735
 800c08c:	0800c7cf 	.word	0x0800c7cf
 800c090:	0800c947 	.word	0x0800c947

0800c094 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	60f8      	str	r0, [r7, #12]
 800c09c:	60b9      	str	r1, [r7, #8]
 800c09e:	4613      	mov	r3, r2
 800c0a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	2b20      	cmp	r3, #32
 800c0ac:	d11d      	bne.n	800c0ea <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d002      	beq.n	800c0ba <HAL_UART_Receive_DMA+0x26>
 800c0b4:	88fb      	ldrh	r3, [r7, #6]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d101      	bne.n	800c0be <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	e016      	b.n	800c0ec <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d101      	bne.n	800c0cc <HAL_UART_Receive_DMA+0x38>
 800c0c8:	2302      	movs	r3, #2
 800c0ca:	e00f      	b.n	800c0ec <HAL_UART_Receive_DMA+0x58>
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c0da:	88fb      	ldrh	r3, [r7, #6]
 800c0dc:	461a      	mov	r2, r3
 800c0de:	68b9      	ldr	r1, [r7, #8]
 800c0e0:	68f8      	ldr	r0, [r7, #12]
 800c0e2:	f000 fce9 	bl	800cab8 <UART_Start_Receive_DMA>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	e000      	b.n	800c0ec <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800c0ea:	2302      	movs	r3, #2
  }
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3710      	adds	r7, #16
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b0ba      	sub	sp, #232	; 0xe8
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	68db      	ldr	r3, [r3, #12]
 800c10c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	695b      	ldr	r3, [r3, #20]
 800c116:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c11a:	2300      	movs	r3, #0
 800c11c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c120:	2300      	movs	r3, #0
 800c122:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c12a:	f003 030f 	and.w	r3, r3, #15
 800c12e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c136:	2b00      	cmp	r3, #0
 800c138:	d10f      	bne.n	800c15a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c13a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c13e:	f003 0320 	and.w	r3, r3, #32
 800c142:	2b00      	cmp	r3, #0
 800c144:	d009      	beq.n	800c15a <HAL_UART_IRQHandler+0x66>
 800c146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c14a:	f003 0320 	and.w	r3, r3, #32
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d003      	beq.n	800c15a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f000 fe51 	bl	800cdfa <UART_Receive_IT>
      return;
 800c158:	e256      	b.n	800c608 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c15a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c15e:	2b00      	cmp	r3, #0
 800c160:	f000 80de 	beq.w	800c320 <HAL_UART_IRQHandler+0x22c>
 800c164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c168:	f003 0301 	and.w	r3, r3, #1
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d106      	bne.n	800c17e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c174:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c178:	2b00      	cmp	r3, #0
 800c17a:	f000 80d1 	beq.w	800c320 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c17e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c182:	f003 0301 	and.w	r3, r3, #1
 800c186:	2b00      	cmp	r3, #0
 800c188:	d00b      	beq.n	800c1a2 <HAL_UART_IRQHandler+0xae>
 800c18a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c18e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c192:	2b00      	cmp	r3, #0
 800c194:	d005      	beq.n	800c1a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c19a:	f043 0201 	orr.w	r2, r3, #1
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c1a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1a6:	f003 0304 	and.w	r3, r3, #4
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d00b      	beq.n	800c1c6 <HAL_UART_IRQHandler+0xd2>
 800c1ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1b2:	f003 0301 	and.w	r3, r3, #1
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d005      	beq.n	800c1c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1be:	f043 0202 	orr.w	r2, r3, #2
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c1c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1ca:	f003 0302 	and.w	r3, r3, #2
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d00b      	beq.n	800c1ea <HAL_UART_IRQHandler+0xf6>
 800c1d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1d6:	f003 0301 	and.w	r3, r3, #1
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d005      	beq.n	800c1ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1e2:	f043 0204 	orr.w	r2, r3, #4
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c1ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1ee:	f003 0308 	and.w	r3, r3, #8
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d011      	beq.n	800c21a <HAL_UART_IRQHandler+0x126>
 800c1f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1fa:	f003 0320 	and.w	r3, r3, #32
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d105      	bne.n	800c20e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c206:	f003 0301 	and.w	r3, r3, #1
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d005      	beq.n	800c21a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c212:	f043 0208 	orr.w	r2, r3, #8
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c21e:	2b00      	cmp	r3, #0
 800c220:	f000 81ed 	beq.w	800c5fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c228:	f003 0320 	and.w	r3, r3, #32
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d008      	beq.n	800c242 <HAL_UART_IRQHandler+0x14e>
 800c230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c234:	f003 0320 	and.w	r3, r3, #32
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d002      	beq.n	800c242 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 fddc 	bl	800cdfa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	695b      	ldr	r3, [r3, #20]
 800c248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c24c:	2b40      	cmp	r3, #64	; 0x40
 800c24e:	bf0c      	ite	eq
 800c250:	2301      	moveq	r3, #1
 800c252:	2300      	movne	r3, #0
 800c254:	b2db      	uxtb	r3, r3
 800c256:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c25e:	f003 0308 	and.w	r3, r3, #8
 800c262:	2b00      	cmp	r3, #0
 800c264:	d103      	bne.n	800c26e <HAL_UART_IRQHandler+0x17a>
 800c266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d04f      	beq.n	800c30e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f000 fce4 	bl	800cc3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	695b      	ldr	r3, [r3, #20]
 800c27a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c27e:	2b40      	cmp	r3, #64	; 0x40
 800c280:	d141      	bne.n	800c306 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	3314      	adds	r3, #20
 800c288:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c28c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c290:	e853 3f00 	ldrex	r3, [r3]
 800c294:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c298:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c29c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	3314      	adds	r3, #20
 800c2aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c2ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c2b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c2ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c2be:	e841 2300 	strex	r3, r2, [r1]
 800c2c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c2c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d1d9      	bne.n	800c282 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d013      	beq.n	800c2fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2da:	4a7d      	ldr	r2, [pc, #500]	; (800c4d0 <HAL_UART_IRQHandler+0x3dc>)
 800c2dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7fd fd1c 	bl	8009d20 <HAL_DMA_Abort_IT>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d016      	beq.n	800c31c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2f4:	687a      	ldr	r2, [r7, #4]
 800c2f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c2f8:	4610      	mov	r0, r2
 800c2fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2fc:	e00e      	b.n	800c31c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 f99a 	bl	800c638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c304:	e00a      	b.n	800c31c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 f996 	bl	800c638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c30c:	e006      	b.n	800c31c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 f992 	bl	800c638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2200      	movs	r2, #0
 800c318:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c31a:	e170      	b.n	800c5fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c31c:	bf00      	nop
    return;
 800c31e:	e16e      	b.n	800c5fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c324:	2b01      	cmp	r3, #1
 800c326:	f040 814a 	bne.w	800c5be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c32a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c32e:	f003 0310 	and.w	r3, r3, #16
 800c332:	2b00      	cmp	r3, #0
 800c334:	f000 8143 	beq.w	800c5be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c33c:	f003 0310 	and.w	r3, r3, #16
 800c340:	2b00      	cmp	r3, #0
 800c342:	f000 813c 	beq.w	800c5be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c346:	2300      	movs	r3, #0
 800c348:	60bb      	str	r3, [r7, #8]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	60bb      	str	r3, [r7, #8]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	60bb      	str	r3, [r7, #8]
 800c35a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	695b      	ldr	r3, [r3, #20]
 800c362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c366:	2b40      	cmp	r3, #64	; 0x40
 800c368:	f040 80b4 	bne.w	800c4d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	685b      	ldr	r3, [r3, #4]
 800c374:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c378:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	f000 8140 	beq.w	800c602 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c386:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c38a:	429a      	cmp	r2, r3
 800c38c:	f080 8139 	bcs.w	800c602 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c396:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c39c:	69db      	ldr	r3, [r3, #28]
 800c39e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3a2:	f000 8088 	beq.w	800c4b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	330c      	adds	r3, #12
 800c3ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c3b4:	e853 3f00 	ldrex	r3, [r3]
 800c3b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c3bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c3c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	330c      	adds	r3, #12
 800c3ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c3d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c3d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c3de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c3e2:	e841 2300 	strex	r3, r2, [r1]
 800c3e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c3ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d1d9      	bne.n	800c3a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	3314      	adds	r3, #20
 800c3f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c3fc:	e853 3f00 	ldrex	r3, [r3]
 800c400:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c404:	f023 0301 	bic.w	r3, r3, #1
 800c408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	3314      	adds	r3, #20
 800c412:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c416:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c41a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c41c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c41e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c422:	e841 2300 	strex	r3, r2, [r1]
 800c426:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d1e1      	bne.n	800c3f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	3314      	adds	r3, #20
 800c434:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c438:	e853 3f00 	ldrex	r3, [r3]
 800c43c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c43e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c444:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	3314      	adds	r3, #20
 800c44e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c452:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c454:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c456:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c458:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c45a:	e841 2300 	strex	r3, r2, [r1]
 800c45e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c462:	2b00      	cmp	r3, #0
 800c464:	d1e3      	bne.n	800c42e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2220      	movs	r2, #32
 800c46a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2200      	movs	r2, #0
 800c472:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	330c      	adds	r3, #12
 800c47a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c47c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c47e:	e853 3f00 	ldrex	r3, [r3]
 800c482:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c486:	f023 0310 	bic.w	r3, r3, #16
 800c48a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	330c      	adds	r3, #12
 800c494:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c498:	65ba      	str	r2, [r7, #88]	; 0x58
 800c49a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c49c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c49e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c4a0:	e841 2300 	strex	r3, r2, [r1]
 800c4a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c4a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d1e3      	bne.n	800c474 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7fd fbc5 	bl	8009c40 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	1ad3      	subs	r3, r2, r3
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f000 f8c0 	bl	800c64c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c4cc:	e099      	b.n	800c602 <HAL_UART_IRQHandler+0x50e>
 800c4ce:	bf00      	nop
 800c4d0:	0800cd03 	.word	0x0800cd03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c4dc:	b29b      	uxth	r3, r3
 800c4de:	1ad3      	subs	r3, r2, r3
 800c4e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	f000 808b 	beq.w	800c606 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c4f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	f000 8086 	beq.w	800c606 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	330c      	adds	r3, #12
 800c500:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c504:	e853 3f00 	ldrex	r3, [r3]
 800c508:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c50a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c50c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c510:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	330c      	adds	r3, #12
 800c51a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c51e:	647a      	str	r2, [r7, #68]	; 0x44
 800c520:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c522:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c526:	e841 2300 	strex	r3, r2, [r1]
 800c52a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c52c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d1e3      	bne.n	800c4fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	3314      	adds	r3, #20
 800c538:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53c:	e853 3f00 	ldrex	r3, [r3]
 800c540:	623b      	str	r3, [r7, #32]
   return(result);
 800c542:	6a3b      	ldr	r3, [r7, #32]
 800c544:	f023 0301 	bic.w	r3, r3, #1
 800c548:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	3314      	adds	r3, #20
 800c552:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c556:	633a      	str	r2, [r7, #48]	; 0x30
 800c558:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c55a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c55c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c55e:	e841 2300 	strex	r3, r2, [r1]
 800c562:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c566:	2b00      	cmp	r3, #0
 800c568:	d1e3      	bne.n	800c532 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2220      	movs	r2, #32
 800c56e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2200      	movs	r2, #0
 800c576:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	330c      	adds	r3, #12
 800c57e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	e853 3f00 	ldrex	r3, [r3]
 800c586:	60fb      	str	r3, [r7, #12]
   return(result);
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f023 0310 	bic.w	r3, r3, #16
 800c58e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	330c      	adds	r3, #12
 800c598:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c59c:	61fa      	str	r2, [r7, #28]
 800c59e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a0:	69b9      	ldr	r1, [r7, #24]
 800c5a2:	69fa      	ldr	r2, [r7, #28]
 800c5a4:	e841 2300 	strex	r3, r2, [r1]
 800c5a8:	617b      	str	r3, [r7, #20]
   return(result);
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d1e3      	bne.n	800c578 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c5b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f000 f848 	bl	800c64c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c5bc:	e023      	b.n	800c606 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c5be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d009      	beq.n	800c5de <HAL_UART_IRQHandler+0x4ea>
 800c5ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d003      	beq.n	800c5de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f000 fba7 	bl	800cd2a <UART_Transmit_IT>
    return;
 800c5dc:	e014      	b.n	800c608 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c5de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d00e      	beq.n	800c608 <HAL_UART_IRQHandler+0x514>
 800c5ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d008      	beq.n	800c608 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f000 fbe7 	bl	800cdca <UART_EndTransmit_IT>
    return;
 800c5fc:	e004      	b.n	800c608 <HAL_UART_IRQHandler+0x514>
    return;
 800c5fe:	bf00      	nop
 800c600:	e002      	b.n	800c608 <HAL_UART_IRQHandler+0x514>
      return;
 800c602:	bf00      	nop
 800c604:	e000      	b.n	800c608 <HAL_UART_IRQHandler+0x514>
      return;
 800c606:	bf00      	nop
  }
}
 800c608:	37e8      	adds	r7, #232	; 0xe8
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
 800c60e:	bf00      	nop

0800c610 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c610:	b480      	push	{r7}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800c618:	bf00      	nop
 800c61a:	370c      	adds	r7, #12
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c62c:	bf00      	nop
 800c62e:	370c      	adds	r7, #12
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr

0800c638 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c638:	b480      	push	{r7}
 800c63a:	b083      	sub	sp, #12
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c640:	bf00      	nop
 800c642:	370c      	adds	r7, #12
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr

0800c64c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c64c:	b480      	push	{r7}
 800c64e:	b083      	sub	sp, #12
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	460b      	mov	r3, r1
 800c656:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c658:	bf00      	nop
 800c65a:	370c      	adds	r7, #12
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800c664:	b480      	push	{r7}
 800c666:	b085      	sub	sp, #20
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800c66c:	2300      	movs	r3, #0
 800c66e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c676:	2b01      	cmp	r3, #1
 800c678:	d101      	bne.n	800c67e <HAL_HalfDuplex_EnableTransmitter+0x1a>
 800c67a:	2302      	movs	r3, #2
 800c67c:	e020      	b.n	800c6c0 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2201      	movs	r2, #1
 800c682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2224      	movs	r2, #36	; 0x24
 800c68a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	68db      	ldr	r3, [r3, #12]
 800c694:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f023 030c 	bic.w	r3, r3, #12
 800c69c:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	f043 0308 	orr.w	r3, r3, #8
 800c6a4:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	68fa      	ldr	r2, [r7, #12]
 800c6ac:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2220      	movs	r2, #32
 800c6b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c6be:	2300      	movs	r3, #0
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3714      	adds	r7, #20
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr

0800c6cc <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b085      	sub	sp, #20
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6de:	2b01      	cmp	r3, #1
 800c6e0:	d101      	bne.n	800c6e6 <HAL_HalfDuplex_EnableReceiver+0x1a>
 800c6e2:	2302      	movs	r3, #2
 800c6e4:	e020      	b.n	800c728 <HAL_HalfDuplex_EnableReceiver+0x5c>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2201      	movs	r2, #1
 800c6ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2224      	movs	r2, #36	; 0x24
 800c6f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	68db      	ldr	r3, [r3, #12]
 800c6fc:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	f023 030c 	bic.w	r3, r3, #12
 800c704:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	f043 0304 	orr.w	r3, r3, #4
 800c70c:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	68fa      	ldr	r2, [r7, #12]
 800c714:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2220      	movs	r2, #32
 800c71a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2200      	movs	r2, #0
 800c722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c726:	2300      	movs	r3, #0
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3714      	adds	r7, #20
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b090      	sub	sp, #64	; 0x40
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c740:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d137      	bne.n	800c7c0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800c750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c752:	2200      	movs	r2, #0
 800c754:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	3314      	adds	r3, #20
 800c75c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c760:	e853 3f00 	ldrex	r3, [r3]
 800c764:	623b      	str	r3, [r7, #32]
   return(result);
 800c766:	6a3b      	ldr	r3, [r7, #32]
 800c768:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c76c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c76e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	3314      	adds	r3, #20
 800c774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c776:	633a      	str	r2, [r7, #48]	; 0x30
 800c778:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c77a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c77c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c77e:	e841 2300 	strex	r3, r2, [r1]
 800c782:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c786:	2b00      	cmp	r3, #0
 800c788:	d1e5      	bne.n	800c756 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c78a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	330c      	adds	r3, #12
 800c790:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	e853 3f00 	ldrex	r3, [r3]
 800c798:	60fb      	str	r3, [r7, #12]
   return(result);
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7a0:	637b      	str	r3, [r7, #52]	; 0x34
 800c7a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	330c      	adds	r3, #12
 800c7a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7aa:	61fa      	str	r2, [r7, #28]
 800c7ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ae:	69b9      	ldr	r1, [r7, #24]
 800c7b0:	69fa      	ldr	r2, [r7, #28]
 800c7b2:	e841 2300 	strex	r3, r2, [r1]
 800c7b6:	617b      	str	r3, [r7, #20]
   return(result);
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d1e5      	bne.n	800c78a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c7be:	e002      	b.n	800c7c6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c7c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c7c2:	f7fa fed5 	bl	8007570 <HAL_UART_TxCpltCallback>
}
 800c7c6:	bf00      	nop
 800c7c8:	3740      	adds	r7, #64	; 0x40
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}

0800c7ce <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c7ce:	b580      	push	{r7, lr}
 800c7d0:	b084      	sub	sp, #16
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7da:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c7dc:	68f8      	ldr	r0, [r7, #12]
 800c7de:	f7ff ff17 	bl	800c610 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7e2:	bf00      	nop
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b09c      	sub	sp, #112	; 0x70
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c802:	2b00      	cmp	r3, #0
 800c804:	d172      	bne.n	800c8ec <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800c806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c808:	2200      	movs	r2, #0
 800c80a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c80c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	330c      	adds	r3, #12
 800c812:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c816:	e853 3f00 	ldrex	r3, [r3]
 800c81a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c81c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c81e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c822:	66bb      	str	r3, [r7, #104]	; 0x68
 800c824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	330c      	adds	r3, #12
 800c82a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c82c:	65ba      	str	r2, [r7, #88]	; 0x58
 800c82e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c830:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c832:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c834:	e841 2300 	strex	r3, r2, [r1]
 800c838:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c83a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d1e5      	bne.n	800c80c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	3314      	adds	r3, #20
 800c846:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84a:	e853 3f00 	ldrex	r3, [r3]
 800c84e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c852:	f023 0301 	bic.w	r3, r3, #1
 800c856:	667b      	str	r3, [r7, #100]	; 0x64
 800c858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	3314      	adds	r3, #20
 800c85e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c860:	647a      	str	r2, [r7, #68]	; 0x44
 800c862:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c864:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c866:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c868:	e841 2300 	strex	r3, r2, [r1]
 800c86c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c86e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c870:	2b00      	cmp	r3, #0
 800c872:	d1e5      	bne.n	800c840 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	3314      	adds	r3, #20
 800c87a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87e:	e853 3f00 	ldrex	r3, [r3]
 800c882:	623b      	str	r3, [r7, #32]
   return(result);
 800c884:	6a3b      	ldr	r3, [r7, #32]
 800c886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c88a:	663b      	str	r3, [r7, #96]	; 0x60
 800c88c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	3314      	adds	r3, #20
 800c892:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c894:	633a      	str	r2, [r7, #48]	; 0x30
 800c896:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c898:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c89a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c89c:	e841 2300 	strex	r3, r2, [r1]
 800c8a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d1e5      	bne.n	800c874 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c8a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8aa:	2220      	movs	r2, #32
 800c8ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d119      	bne.n	800c8ec <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	330c      	adds	r3, #12
 800c8be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	e853 3f00 	ldrex	r3, [r3]
 800c8c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f023 0310 	bic.w	r3, r3, #16
 800c8ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c8d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	330c      	adds	r3, #12
 800c8d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c8d8:	61fa      	str	r2, [r7, #28]
 800c8da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8dc:	69b9      	ldr	r1, [r7, #24]
 800c8de:	69fa      	ldr	r2, [r7, #28]
 800c8e0:	e841 2300 	strex	r3, r2, [r1]
 800c8e4:	617b      	str	r3, [r7, #20]
   return(result);
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d1e5      	bne.n	800c8b8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	d106      	bne.n	800c902 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c8f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c8fc:	f7ff fea6 	bl	800c64c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c900:	e002      	b.n	800c908 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c902:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c904:	f7fa fe4c 	bl	80075a0 <HAL_UART_RxCpltCallback>
}
 800c908:	bf00      	nop
 800c90a:	3770      	adds	r7, #112	; 0x70
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b084      	sub	sp, #16
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c91c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c922:	2b01      	cmp	r3, #1
 800c924:	d108      	bne.n	800c938 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c92a:	085b      	lsrs	r3, r3, #1
 800c92c:	b29b      	uxth	r3, r3
 800c92e:	4619      	mov	r1, r3
 800c930:	68f8      	ldr	r0, [r7, #12]
 800c932:	f7ff fe8b 	bl	800c64c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c936:	e002      	b.n	800c93e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800c938:	68f8      	ldr	r0, [r7, #12]
 800c93a:	f7ff fe73 	bl	800c624 <HAL_UART_RxHalfCpltCallback>
}
 800c93e:	bf00      	nop
 800c940:	3710      	adds	r7, #16
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}

0800c946 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c946:	b580      	push	{r7, lr}
 800c948:	b084      	sub	sp, #16
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c94e:	2300      	movs	r3, #0
 800c950:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c956:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	695b      	ldr	r3, [r3, #20]
 800c95e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c962:	2b80      	cmp	r3, #128	; 0x80
 800c964:	bf0c      	ite	eq
 800c966:	2301      	moveq	r3, #1
 800c968:	2300      	movne	r3, #0
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c974:	b2db      	uxtb	r3, r3
 800c976:	2b21      	cmp	r3, #33	; 0x21
 800c978:	d108      	bne.n	800c98c <UART_DMAError+0x46>
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d005      	beq.n	800c98c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	2200      	movs	r2, #0
 800c984:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c986:	68b8      	ldr	r0, [r7, #8]
 800c988:	f000 f930 	bl	800cbec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	695b      	ldr	r3, [r3, #20]
 800c992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c996:	2b40      	cmp	r3, #64	; 0x40
 800c998:	bf0c      	ite	eq
 800c99a:	2301      	moveq	r3, #1
 800c99c:	2300      	movne	r3, #0
 800c99e:	b2db      	uxtb	r3, r3
 800c9a0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c9a8:	b2db      	uxtb	r3, r3
 800c9aa:	2b22      	cmp	r3, #34	; 0x22
 800c9ac:	d108      	bne.n	800c9c0 <UART_DMAError+0x7a>
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d005      	beq.n	800c9c0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c9ba:	68b8      	ldr	r0, [r7, #8]
 800c9bc:	f000 f93e 	bl	800cc3c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9c4:	f043 0210 	orr.w	r2, r3, #16
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c9cc:	68b8      	ldr	r0, [r7, #8]
 800c9ce:	f7ff fe33 	bl	800c638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9d2:	bf00      	nop
 800c9d4:	3710      	adds	r7, #16
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}

0800c9da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c9da:	b580      	push	{r7, lr}
 800c9dc:	b090      	sub	sp, #64	; 0x40
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	60f8      	str	r0, [r7, #12]
 800c9e2:	60b9      	str	r1, [r7, #8]
 800c9e4:	603b      	str	r3, [r7, #0]
 800c9e6:	4613      	mov	r3, r2
 800c9e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c9ea:	e050      	b.n	800ca8e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c9ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9f2:	d04c      	beq.n	800ca8e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c9f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d007      	beq.n	800ca0a <UART_WaitOnFlagUntilTimeout+0x30>
 800c9fa:	f7fc fed9 	bl	80097b0 <HAL_GetTick>
 800c9fe:	4602      	mov	r2, r0
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	1ad3      	subs	r3, r2, r3
 800ca04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d241      	bcs.n	800ca8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	330c      	adds	r3, #12
 800ca10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca14:	e853 3f00 	ldrex	r3, [r3]
 800ca18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ca1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ca20:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	330c      	adds	r3, #12
 800ca28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca2a:	637a      	str	r2, [r7, #52]	; 0x34
 800ca2c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ca30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca32:	e841 2300 	strex	r3, r2, [r1]
 800ca36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ca38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d1e5      	bne.n	800ca0a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	3314      	adds	r3, #20
 800ca44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	e853 3f00 	ldrex	r3, [r3]
 800ca4c:	613b      	str	r3, [r7, #16]
   return(result);
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	f023 0301 	bic.w	r3, r3, #1
 800ca54:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	3314      	adds	r3, #20
 800ca5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca5e:	623a      	str	r2, [r7, #32]
 800ca60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca62:	69f9      	ldr	r1, [r7, #28]
 800ca64:	6a3a      	ldr	r2, [r7, #32]
 800ca66:	e841 2300 	strex	r3, r2, [r1]
 800ca6a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca6c:	69bb      	ldr	r3, [r7, #24]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d1e5      	bne.n	800ca3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2220      	movs	r2, #32
 800ca76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2220      	movs	r2, #32
 800ca7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	2200      	movs	r2, #0
 800ca86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ca8a:	2303      	movs	r3, #3
 800ca8c:	e00f      	b.n	800caae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	4013      	ands	r3, r2
 800ca98:	68ba      	ldr	r2, [r7, #8]
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	bf0c      	ite	eq
 800ca9e:	2301      	moveq	r3, #1
 800caa0:	2300      	movne	r3, #0
 800caa2:	b2db      	uxtb	r3, r3
 800caa4:	461a      	mov	r2, r3
 800caa6:	79fb      	ldrb	r3, [r7, #7]
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d09f      	beq.n	800c9ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800caac:	2300      	movs	r3, #0
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3740      	adds	r7, #64	; 0x40
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
	...

0800cab8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b098      	sub	sp, #96	; 0x60
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	60f8      	str	r0, [r7, #12]
 800cac0:	60b9      	str	r1, [r7, #8]
 800cac2:	4613      	mov	r3, r2
 800cac4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800cac6:	68ba      	ldr	r2, [r7, #8]
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	88fa      	ldrh	r2, [r7, #6]
 800cad0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	2200      	movs	r2, #0
 800cad6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2222      	movs	r2, #34	; 0x22
 800cadc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae4:	4a3e      	ldr	r2, [pc, #248]	; (800cbe0 <UART_Start_Receive_DMA+0x128>)
 800cae6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caec:	4a3d      	ldr	r2, [pc, #244]	; (800cbe4 <UART_Start_Receive_DMA+0x12c>)
 800caee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caf4:	4a3c      	ldr	r2, [pc, #240]	; (800cbe8 <UART_Start_Receive_DMA+0x130>)
 800caf6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cafc:	2200      	movs	r2, #0
 800cafe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800cb00:	f107 0308 	add.w	r3, r7, #8
 800cb04:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	3304      	adds	r3, #4
 800cb10:	4619      	mov	r1, r3
 800cb12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	88fb      	ldrh	r3, [r7, #6]
 800cb18:	f7fd f83a 	bl	8009b90 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	613b      	str	r3, [r7, #16]
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	613b      	str	r3, [r7, #16]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	613b      	str	r3, [r7, #16]
 800cb30:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2200      	movs	r2, #0
 800cb36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	330c      	adds	r3, #12
 800cb40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb44:	e853 3f00 	ldrex	r3, [r3]
 800cb48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cb4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb50:	65bb      	str	r3, [r7, #88]	; 0x58
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	330c      	adds	r3, #12
 800cb58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cb5a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800cb5c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb5e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cb60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb62:	e841 2300 	strex	r3, r2, [r1]
 800cb66:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800cb68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d1e5      	bne.n	800cb3a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	3314      	adds	r3, #20
 800cb74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb78:	e853 3f00 	ldrex	r3, [r3]
 800cb7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb80:	f043 0301 	orr.w	r3, r3, #1
 800cb84:	657b      	str	r3, [r7, #84]	; 0x54
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	3314      	adds	r3, #20
 800cb8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb8e:	63ba      	str	r2, [r7, #56]	; 0x38
 800cb90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cb94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb96:	e841 2300 	strex	r3, r2, [r1]
 800cb9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d1e5      	bne.n	800cb6e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	3314      	adds	r3, #20
 800cba8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbaa:	69bb      	ldr	r3, [r7, #24]
 800cbac:	e853 3f00 	ldrex	r3, [r3]
 800cbb0:	617b      	str	r3, [r7, #20]
   return(result);
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbb8:	653b      	str	r3, [r7, #80]	; 0x50
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	3314      	adds	r3, #20
 800cbc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cbc2:	627a      	str	r2, [r7, #36]	; 0x24
 800cbc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbc6:	6a39      	ldr	r1, [r7, #32]
 800cbc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbca:	e841 2300 	strex	r3, r2, [r1]
 800cbce:	61fb      	str	r3, [r7, #28]
   return(result);
 800cbd0:	69fb      	ldr	r3, [r7, #28]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d1e5      	bne.n	800cba2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800cbd6:	2300      	movs	r3, #0
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3760      	adds	r7, #96	; 0x60
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}
 800cbe0:	0800c7eb 	.word	0x0800c7eb
 800cbe4:	0800c911 	.word	0x0800c911
 800cbe8:	0800c947 	.word	0x0800c947

0800cbec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b089      	sub	sp, #36	; 0x24
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	330c      	adds	r3, #12
 800cbfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	e853 3f00 	ldrex	r3, [r3]
 800cc02:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cc0a:	61fb      	str	r3, [r7, #28]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	330c      	adds	r3, #12
 800cc12:	69fa      	ldr	r2, [r7, #28]
 800cc14:	61ba      	str	r2, [r7, #24]
 800cc16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc18:	6979      	ldr	r1, [r7, #20]
 800cc1a:	69ba      	ldr	r2, [r7, #24]
 800cc1c:	e841 2300 	strex	r3, r2, [r1]
 800cc20:	613b      	str	r3, [r7, #16]
   return(result);
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d1e5      	bne.n	800cbf4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2220      	movs	r2, #32
 800cc2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800cc30:	bf00      	nop
 800cc32:	3724      	adds	r7, #36	; 0x24
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr

0800cc3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b095      	sub	sp, #84	; 0x54
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	330c      	adds	r3, #12
 800cc4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc4e:	e853 3f00 	ldrex	r3, [r3]
 800cc52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cc54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cc5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	330c      	adds	r3, #12
 800cc62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc64:	643a      	str	r2, [r7, #64]	; 0x40
 800cc66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cc6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc6c:	e841 2300 	strex	r3, r2, [r1]
 800cc70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d1e5      	bne.n	800cc44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	3314      	adds	r3, #20
 800cc7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc80:	6a3b      	ldr	r3, [r7, #32]
 800cc82:	e853 3f00 	ldrex	r3, [r3]
 800cc86:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc88:	69fb      	ldr	r3, [r7, #28]
 800cc8a:	f023 0301 	bic.w	r3, r3, #1
 800cc8e:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	3314      	adds	r3, #20
 800cc96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc98:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cc9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cca0:	e841 2300 	strex	r3, r2, [r1]
 800cca4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d1e5      	bne.n	800cc78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccb0:	2b01      	cmp	r3, #1
 800ccb2:	d119      	bne.n	800cce8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	330c      	adds	r3, #12
 800ccba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	e853 3f00 	ldrex	r3, [r3]
 800ccc2:	60bb      	str	r3, [r7, #8]
   return(result);
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	f023 0310 	bic.w	r3, r3, #16
 800ccca:	647b      	str	r3, [r7, #68]	; 0x44
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	330c      	adds	r3, #12
 800ccd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ccd4:	61ba      	str	r2, [r7, #24]
 800ccd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccd8:	6979      	ldr	r1, [r7, #20]
 800ccda:	69ba      	ldr	r2, [r7, #24]
 800ccdc:	e841 2300 	strex	r3, r2, [r1]
 800cce0:	613b      	str	r3, [r7, #16]
   return(result);
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d1e5      	bne.n	800ccb4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2220      	movs	r2, #32
 800ccec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ccf6:	bf00      	nop
 800ccf8:	3754      	adds	r7, #84	; 0x54
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr

0800cd02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cd02:	b580      	push	{r7, lr}
 800cd04:	b084      	sub	sp, #16
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2200      	movs	r2, #0
 800cd14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cd1c:	68f8      	ldr	r0, [r7, #12]
 800cd1e:	f7ff fc8b 	bl	800c638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd22:	bf00      	nop
 800cd24:	3710      	adds	r7, #16
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}

0800cd2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cd2a:	b480      	push	{r7}
 800cd2c:	b085      	sub	sp, #20
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd38:	b2db      	uxtb	r3, r3
 800cd3a:	2b21      	cmp	r3, #33	; 0x21
 800cd3c:	d13e      	bne.n	800cdbc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	689b      	ldr	r3, [r3, #8]
 800cd42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd46:	d114      	bne.n	800cd72 <UART_Transmit_IT+0x48>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	691b      	ldr	r3, [r3, #16]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d110      	bne.n	800cd72 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6a1b      	ldr	r3, [r3, #32]
 800cd54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	881b      	ldrh	r3, [r3, #0]
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cd64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6a1b      	ldr	r3, [r3, #32]
 800cd6a:	1c9a      	adds	r2, r3, #2
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	621a      	str	r2, [r3, #32]
 800cd70:	e008      	b.n	800cd84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6a1b      	ldr	r3, [r3, #32]
 800cd76:	1c59      	adds	r1, r3, #1
 800cd78:	687a      	ldr	r2, [r7, #4]
 800cd7a:	6211      	str	r1, [r2, #32]
 800cd7c:	781a      	ldrb	r2, [r3, #0]
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	3b01      	subs	r3, #1
 800cd8c:	b29b      	uxth	r3, r3
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	4619      	mov	r1, r3
 800cd92:	84d1      	strh	r1, [r2, #38]	; 0x26
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d10f      	bne.n	800cdb8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	68da      	ldr	r2, [r3, #12]
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cda6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	68da      	ldr	r2, [r3, #12]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cdb6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	e000      	b.n	800cdbe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cdbc:	2302      	movs	r3, #2
  }
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3714      	adds	r7, #20
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc8:	4770      	bx	lr

0800cdca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cdca:	b580      	push	{r7, lr}
 800cdcc:	b082      	sub	sp, #8
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	68da      	ldr	r2, [r3, #12]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cde0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2220      	movs	r2, #32
 800cde6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f7fa fbc0 	bl	8007570 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cdf0:	2300      	movs	r3, #0
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3708      	adds	r7, #8
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}

0800cdfa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cdfa:	b580      	push	{r7, lr}
 800cdfc:	b08c      	sub	sp, #48	; 0x30
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	2b22      	cmp	r3, #34	; 0x22
 800ce0c:	f040 80ab 	bne.w	800cf66 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	689b      	ldr	r3, [r3, #8]
 800ce14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce18:	d117      	bne.n	800ce4a <UART_Receive_IT+0x50>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	691b      	ldr	r3, [r3, #16]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d113      	bne.n	800ce4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ce22:	2300      	movs	r3, #0
 800ce24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce2a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	b29b      	uxth	r3, r3
 800ce34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce38:	b29a      	uxth	r2, r3
 800ce3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce42:	1c9a      	adds	r2, r3, #2
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	629a      	str	r2, [r3, #40]	; 0x28
 800ce48:	e026      	b.n	800ce98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ce50:	2300      	movs	r3, #0
 800ce52:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce5c:	d007      	beq.n	800ce6e <UART_Receive_IT+0x74>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	689b      	ldr	r3, [r3, #8]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d10a      	bne.n	800ce7c <UART_Receive_IT+0x82>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	691b      	ldr	r3, [r3, #16]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d106      	bne.n	800ce7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	b2da      	uxtb	r2, r3
 800ce76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce78:	701a      	strb	r2, [r3, #0]
 800ce7a:	e008      	b.n	800ce8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	685b      	ldr	r3, [r3, #4]
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce88:	b2da      	uxtb	r2, r3
 800ce8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce92:	1c5a      	adds	r2, r3, #1
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ce9c:	b29b      	uxth	r3, r3
 800ce9e:	3b01      	subs	r3, #1
 800cea0:	b29b      	uxth	r3, r3
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	4619      	mov	r1, r3
 800cea6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d15a      	bne.n	800cf62 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	68da      	ldr	r2, [r3, #12]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f022 0220 	bic.w	r2, r2, #32
 800ceba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	68da      	ldr	r2, [r3, #12]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ceca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	695a      	ldr	r2, [r3, #20]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f022 0201 	bic.w	r2, r2, #1
 800ceda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2220      	movs	r2, #32
 800cee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cee8:	2b01      	cmp	r3, #1
 800ceea:	d135      	bne.n	800cf58 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2200      	movs	r2, #0
 800cef0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	330c      	adds	r3, #12
 800cef8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	e853 3f00 	ldrex	r3, [r3]
 800cf00:	613b      	str	r3, [r7, #16]
   return(result);
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	f023 0310 	bic.w	r3, r3, #16
 800cf08:	627b      	str	r3, [r7, #36]	; 0x24
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	330c      	adds	r3, #12
 800cf10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf12:	623a      	str	r2, [r7, #32]
 800cf14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf16:	69f9      	ldr	r1, [r7, #28]
 800cf18:	6a3a      	ldr	r2, [r7, #32]
 800cf1a:	e841 2300 	strex	r3, r2, [r1]
 800cf1e:	61bb      	str	r3, [r7, #24]
   return(result);
 800cf20:	69bb      	ldr	r3, [r7, #24]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d1e5      	bne.n	800cef2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f003 0310 	and.w	r3, r3, #16
 800cf30:	2b10      	cmp	r3, #16
 800cf32:	d10a      	bne.n	800cf4a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cf34:	2300      	movs	r3, #0
 800cf36:	60fb      	str	r3, [r7, #12]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	60fb      	str	r3, [r7, #12]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	60fb      	str	r3, [r7, #12]
 800cf48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cf4e:	4619      	mov	r1, r3
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f7ff fb7b 	bl	800c64c <HAL_UARTEx_RxEventCallback>
 800cf56:	e002      	b.n	800cf5e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f7fa fb21 	bl	80075a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	e002      	b.n	800cf68 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800cf62:	2300      	movs	r3, #0
 800cf64:	e000      	b.n	800cf68 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800cf66:	2302      	movs	r3, #2
  }
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3730      	adds	r7, #48	; 0x30
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}

0800cf70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf74:	b09f      	sub	sp, #124	; 0x7c
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	691b      	ldr	r3, [r3, #16]
 800cf80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cf84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf86:	68d9      	ldr	r1, [r3, #12]
 800cf88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	ea40 0301 	orr.w	r3, r0, r1
 800cf90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cf92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf94:	689a      	ldr	r2, [r3, #8]
 800cf96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf98:	691b      	ldr	r3, [r3, #16]
 800cf9a:	431a      	orrs	r2, r3
 800cf9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf9e:	695b      	ldr	r3, [r3, #20]
 800cfa0:	431a      	orrs	r2, r3
 800cfa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfa4:	69db      	ldr	r3, [r3, #28]
 800cfa6:	4313      	orrs	r3, r2
 800cfa8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800cfaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	68db      	ldr	r3, [r3, #12]
 800cfb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800cfb4:	f021 010c 	bic.w	r1, r1, #12
 800cfb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfba:	681a      	ldr	r2, [r3, #0]
 800cfbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cfbe:	430b      	orrs	r3, r1
 800cfc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cfc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	695b      	ldr	r3, [r3, #20]
 800cfc8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cfcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfce:	6999      	ldr	r1, [r3, #24]
 800cfd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfd2:	681a      	ldr	r2, [r3, #0]
 800cfd4:	ea40 0301 	orr.w	r3, r0, r1
 800cfd8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cfda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfdc:	681a      	ldr	r2, [r3, #0]
 800cfde:	4bc5      	ldr	r3, [pc, #788]	; (800d2f4 <UART_SetConfig+0x384>)
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d004      	beq.n	800cfee <UART_SetConfig+0x7e>
 800cfe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	4bc3      	ldr	r3, [pc, #780]	; (800d2f8 <UART_SetConfig+0x388>)
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d103      	bne.n	800cff6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cfee:	f7fd fbf1 	bl	800a7d4 <HAL_RCC_GetPCLK2Freq>
 800cff2:	6778      	str	r0, [r7, #116]	; 0x74
 800cff4:	e002      	b.n	800cffc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cff6:	f7fd fbd9 	bl	800a7ac <HAL_RCC_GetPCLK1Freq>
 800cffa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cffe:	69db      	ldr	r3, [r3, #28]
 800d000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d004:	f040 80b6 	bne.w	800d174 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d00a:	461c      	mov	r4, r3
 800d00c:	f04f 0500 	mov.w	r5, #0
 800d010:	4622      	mov	r2, r4
 800d012:	462b      	mov	r3, r5
 800d014:	1891      	adds	r1, r2, r2
 800d016:	6439      	str	r1, [r7, #64]	; 0x40
 800d018:	415b      	adcs	r3, r3
 800d01a:	647b      	str	r3, [r7, #68]	; 0x44
 800d01c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d020:	1912      	adds	r2, r2, r4
 800d022:	eb45 0303 	adc.w	r3, r5, r3
 800d026:	f04f 0000 	mov.w	r0, #0
 800d02a:	f04f 0100 	mov.w	r1, #0
 800d02e:	00d9      	lsls	r1, r3, #3
 800d030:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d034:	00d0      	lsls	r0, r2, #3
 800d036:	4602      	mov	r2, r0
 800d038:	460b      	mov	r3, r1
 800d03a:	1911      	adds	r1, r2, r4
 800d03c:	6639      	str	r1, [r7, #96]	; 0x60
 800d03e:	416b      	adcs	r3, r5
 800d040:	667b      	str	r3, [r7, #100]	; 0x64
 800d042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	461a      	mov	r2, r3
 800d048:	f04f 0300 	mov.w	r3, #0
 800d04c:	1891      	adds	r1, r2, r2
 800d04e:	63b9      	str	r1, [r7, #56]	; 0x38
 800d050:	415b      	adcs	r3, r3
 800d052:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d054:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d058:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800d05c:	f7f3 fd82 	bl	8000b64 <__aeabi_uldivmod>
 800d060:	4602      	mov	r2, r0
 800d062:	460b      	mov	r3, r1
 800d064:	4ba5      	ldr	r3, [pc, #660]	; (800d2fc <UART_SetConfig+0x38c>)
 800d066:	fba3 2302 	umull	r2, r3, r3, r2
 800d06a:	095b      	lsrs	r3, r3, #5
 800d06c:	011e      	lsls	r6, r3, #4
 800d06e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d070:	461c      	mov	r4, r3
 800d072:	f04f 0500 	mov.w	r5, #0
 800d076:	4622      	mov	r2, r4
 800d078:	462b      	mov	r3, r5
 800d07a:	1891      	adds	r1, r2, r2
 800d07c:	6339      	str	r1, [r7, #48]	; 0x30
 800d07e:	415b      	adcs	r3, r3
 800d080:	637b      	str	r3, [r7, #52]	; 0x34
 800d082:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d086:	1912      	adds	r2, r2, r4
 800d088:	eb45 0303 	adc.w	r3, r5, r3
 800d08c:	f04f 0000 	mov.w	r0, #0
 800d090:	f04f 0100 	mov.w	r1, #0
 800d094:	00d9      	lsls	r1, r3, #3
 800d096:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d09a:	00d0      	lsls	r0, r2, #3
 800d09c:	4602      	mov	r2, r0
 800d09e:	460b      	mov	r3, r1
 800d0a0:	1911      	adds	r1, r2, r4
 800d0a2:	65b9      	str	r1, [r7, #88]	; 0x58
 800d0a4:	416b      	adcs	r3, r5
 800d0a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d0a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	f04f 0300 	mov.w	r3, #0
 800d0b2:	1891      	adds	r1, r2, r2
 800d0b4:	62b9      	str	r1, [r7, #40]	; 0x28
 800d0b6:	415b      	adcs	r3, r3
 800d0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d0be:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d0c2:	f7f3 fd4f 	bl	8000b64 <__aeabi_uldivmod>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	4b8c      	ldr	r3, [pc, #560]	; (800d2fc <UART_SetConfig+0x38c>)
 800d0cc:	fba3 1302 	umull	r1, r3, r3, r2
 800d0d0:	095b      	lsrs	r3, r3, #5
 800d0d2:	2164      	movs	r1, #100	; 0x64
 800d0d4:	fb01 f303 	mul.w	r3, r1, r3
 800d0d8:	1ad3      	subs	r3, r2, r3
 800d0da:	00db      	lsls	r3, r3, #3
 800d0dc:	3332      	adds	r3, #50	; 0x32
 800d0de:	4a87      	ldr	r2, [pc, #540]	; (800d2fc <UART_SetConfig+0x38c>)
 800d0e0:	fba2 2303 	umull	r2, r3, r2, r3
 800d0e4:	095b      	lsrs	r3, r3, #5
 800d0e6:	005b      	lsls	r3, r3, #1
 800d0e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d0ec:	441e      	add	r6, r3
 800d0ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f04f 0100 	mov.w	r1, #0
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	460b      	mov	r3, r1
 800d0fa:	1894      	adds	r4, r2, r2
 800d0fc:	623c      	str	r4, [r7, #32]
 800d0fe:	415b      	adcs	r3, r3
 800d100:	627b      	str	r3, [r7, #36]	; 0x24
 800d102:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d106:	1812      	adds	r2, r2, r0
 800d108:	eb41 0303 	adc.w	r3, r1, r3
 800d10c:	f04f 0400 	mov.w	r4, #0
 800d110:	f04f 0500 	mov.w	r5, #0
 800d114:	00dd      	lsls	r5, r3, #3
 800d116:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d11a:	00d4      	lsls	r4, r2, #3
 800d11c:	4622      	mov	r2, r4
 800d11e:	462b      	mov	r3, r5
 800d120:	1814      	adds	r4, r2, r0
 800d122:	653c      	str	r4, [r7, #80]	; 0x50
 800d124:	414b      	adcs	r3, r1
 800d126:	657b      	str	r3, [r7, #84]	; 0x54
 800d128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	461a      	mov	r2, r3
 800d12e:	f04f 0300 	mov.w	r3, #0
 800d132:	1891      	adds	r1, r2, r2
 800d134:	61b9      	str	r1, [r7, #24]
 800d136:	415b      	adcs	r3, r3
 800d138:	61fb      	str	r3, [r7, #28]
 800d13a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d13e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d142:	f7f3 fd0f 	bl	8000b64 <__aeabi_uldivmod>
 800d146:	4602      	mov	r2, r0
 800d148:	460b      	mov	r3, r1
 800d14a:	4b6c      	ldr	r3, [pc, #432]	; (800d2fc <UART_SetConfig+0x38c>)
 800d14c:	fba3 1302 	umull	r1, r3, r3, r2
 800d150:	095b      	lsrs	r3, r3, #5
 800d152:	2164      	movs	r1, #100	; 0x64
 800d154:	fb01 f303 	mul.w	r3, r1, r3
 800d158:	1ad3      	subs	r3, r2, r3
 800d15a:	00db      	lsls	r3, r3, #3
 800d15c:	3332      	adds	r3, #50	; 0x32
 800d15e:	4a67      	ldr	r2, [pc, #412]	; (800d2fc <UART_SetConfig+0x38c>)
 800d160:	fba2 2303 	umull	r2, r3, r2, r3
 800d164:	095b      	lsrs	r3, r3, #5
 800d166:	f003 0207 	and.w	r2, r3, #7
 800d16a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4432      	add	r2, r6
 800d170:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d172:	e0b9      	b.n	800d2e8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d176:	461c      	mov	r4, r3
 800d178:	f04f 0500 	mov.w	r5, #0
 800d17c:	4622      	mov	r2, r4
 800d17e:	462b      	mov	r3, r5
 800d180:	1891      	adds	r1, r2, r2
 800d182:	6139      	str	r1, [r7, #16]
 800d184:	415b      	adcs	r3, r3
 800d186:	617b      	str	r3, [r7, #20]
 800d188:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d18c:	1912      	adds	r2, r2, r4
 800d18e:	eb45 0303 	adc.w	r3, r5, r3
 800d192:	f04f 0000 	mov.w	r0, #0
 800d196:	f04f 0100 	mov.w	r1, #0
 800d19a:	00d9      	lsls	r1, r3, #3
 800d19c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d1a0:	00d0      	lsls	r0, r2, #3
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	eb12 0804 	adds.w	r8, r2, r4
 800d1aa:	eb43 0905 	adc.w	r9, r3, r5
 800d1ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1b0:	685b      	ldr	r3, [r3, #4]
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f04f 0100 	mov.w	r1, #0
 800d1b8:	f04f 0200 	mov.w	r2, #0
 800d1bc:	f04f 0300 	mov.w	r3, #0
 800d1c0:	008b      	lsls	r3, r1, #2
 800d1c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d1c6:	0082      	lsls	r2, r0, #2
 800d1c8:	4640      	mov	r0, r8
 800d1ca:	4649      	mov	r1, r9
 800d1cc:	f7f3 fcca 	bl	8000b64 <__aeabi_uldivmod>
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	460b      	mov	r3, r1
 800d1d4:	4b49      	ldr	r3, [pc, #292]	; (800d2fc <UART_SetConfig+0x38c>)
 800d1d6:	fba3 2302 	umull	r2, r3, r3, r2
 800d1da:	095b      	lsrs	r3, r3, #5
 800d1dc:	011e      	lsls	r6, r3, #4
 800d1de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f04f 0100 	mov.w	r1, #0
 800d1e6:	4602      	mov	r2, r0
 800d1e8:	460b      	mov	r3, r1
 800d1ea:	1894      	adds	r4, r2, r2
 800d1ec:	60bc      	str	r4, [r7, #8]
 800d1ee:	415b      	adcs	r3, r3
 800d1f0:	60fb      	str	r3, [r7, #12]
 800d1f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d1f6:	1812      	adds	r2, r2, r0
 800d1f8:	eb41 0303 	adc.w	r3, r1, r3
 800d1fc:	f04f 0400 	mov.w	r4, #0
 800d200:	f04f 0500 	mov.w	r5, #0
 800d204:	00dd      	lsls	r5, r3, #3
 800d206:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d20a:	00d4      	lsls	r4, r2, #3
 800d20c:	4622      	mov	r2, r4
 800d20e:	462b      	mov	r3, r5
 800d210:	1814      	adds	r4, r2, r0
 800d212:	64bc      	str	r4, [r7, #72]	; 0x48
 800d214:	414b      	adcs	r3, r1
 800d216:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d21a:	685b      	ldr	r3, [r3, #4]
 800d21c:	4618      	mov	r0, r3
 800d21e:	f04f 0100 	mov.w	r1, #0
 800d222:	f04f 0200 	mov.w	r2, #0
 800d226:	f04f 0300 	mov.w	r3, #0
 800d22a:	008b      	lsls	r3, r1, #2
 800d22c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d230:	0082      	lsls	r2, r0, #2
 800d232:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d236:	f7f3 fc95 	bl	8000b64 <__aeabi_uldivmod>
 800d23a:	4602      	mov	r2, r0
 800d23c:	460b      	mov	r3, r1
 800d23e:	4b2f      	ldr	r3, [pc, #188]	; (800d2fc <UART_SetConfig+0x38c>)
 800d240:	fba3 1302 	umull	r1, r3, r3, r2
 800d244:	095b      	lsrs	r3, r3, #5
 800d246:	2164      	movs	r1, #100	; 0x64
 800d248:	fb01 f303 	mul.w	r3, r1, r3
 800d24c:	1ad3      	subs	r3, r2, r3
 800d24e:	011b      	lsls	r3, r3, #4
 800d250:	3332      	adds	r3, #50	; 0x32
 800d252:	4a2a      	ldr	r2, [pc, #168]	; (800d2fc <UART_SetConfig+0x38c>)
 800d254:	fba2 2303 	umull	r2, r3, r2, r3
 800d258:	095b      	lsrs	r3, r3, #5
 800d25a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d25e:	441e      	add	r6, r3
 800d260:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d262:	4618      	mov	r0, r3
 800d264:	f04f 0100 	mov.w	r1, #0
 800d268:	4602      	mov	r2, r0
 800d26a:	460b      	mov	r3, r1
 800d26c:	1894      	adds	r4, r2, r2
 800d26e:	603c      	str	r4, [r7, #0]
 800d270:	415b      	adcs	r3, r3
 800d272:	607b      	str	r3, [r7, #4]
 800d274:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d278:	1812      	adds	r2, r2, r0
 800d27a:	eb41 0303 	adc.w	r3, r1, r3
 800d27e:	f04f 0400 	mov.w	r4, #0
 800d282:	f04f 0500 	mov.w	r5, #0
 800d286:	00dd      	lsls	r5, r3, #3
 800d288:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d28c:	00d4      	lsls	r4, r2, #3
 800d28e:	4622      	mov	r2, r4
 800d290:	462b      	mov	r3, r5
 800d292:	eb12 0a00 	adds.w	sl, r2, r0
 800d296:	eb43 0b01 	adc.w	fp, r3, r1
 800d29a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d29c:	685b      	ldr	r3, [r3, #4]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f04f 0100 	mov.w	r1, #0
 800d2a4:	f04f 0200 	mov.w	r2, #0
 800d2a8:	f04f 0300 	mov.w	r3, #0
 800d2ac:	008b      	lsls	r3, r1, #2
 800d2ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d2b2:	0082      	lsls	r2, r0, #2
 800d2b4:	4650      	mov	r0, sl
 800d2b6:	4659      	mov	r1, fp
 800d2b8:	f7f3 fc54 	bl	8000b64 <__aeabi_uldivmod>
 800d2bc:	4602      	mov	r2, r0
 800d2be:	460b      	mov	r3, r1
 800d2c0:	4b0e      	ldr	r3, [pc, #56]	; (800d2fc <UART_SetConfig+0x38c>)
 800d2c2:	fba3 1302 	umull	r1, r3, r3, r2
 800d2c6:	095b      	lsrs	r3, r3, #5
 800d2c8:	2164      	movs	r1, #100	; 0x64
 800d2ca:	fb01 f303 	mul.w	r3, r1, r3
 800d2ce:	1ad3      	subs	r3, r2, r3
 800d2d0:	011b      	lsls	r3, r3, #4
 800d2d2:	3332      	adds	r3, #50	; 0x32
 800d2d4:	4a09      	ldr	r2, [pc, #36]	; (800d2fc <UART_SetConfig+0x38c>)
 800d2d6:	fba2 2303 	umull	r2, r3, r2, r3
 800d2da:	095b      	lsrs	r3, r3, #5
 800d2dc:	f003 020f 	and.w	r2, r3, #15
 800d2e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4432      	add	r2, r6
 800d2e6:	609a      	str	r2, [r3, #8]
}
 800d2e8:	bf00      	nop
 800d2ea:	377c      	adds	r7, #124	; 0x7c
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2f2:	bf00      	nop
 800d2f4:	40011000 	.word	0x40011000
 800d2f8:	40011400 	.word	0x40011400
 800d2fc:	51eb851f 	.word	0x51eb851f

0800d300 <__cxa_pure_virtual>:
 800d300:	b508      	push	{r3, lr}
 800d302:	f000 f80d 	bl	800d320 <_ZSt9terminatev>

0800d306 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800d306:	b508      	push	{r3, lr}
 800d308:	4780      	blx	r0
 800d30a:	f000 f80e 	bl	800d32a <abort>
	...

0800d310 <_ZSt13get_terminatev>:
 800d310:	4b02      	ldr	r3, [pc, #8]	; (800d31c <_ZSt13get_terminatev+0xc>)
 800d312:	6818      	ldr	r0, [r3, #0]
 800d314:	f3bf 8f5b 	dmb	ish
 800d318:	4770      	bx	lr
 800d31a:	bf00      	nop
 800d31c:	20000028 	.word	0x20000028

0800d320 <_ZSt9terminatev>:
 800d320:	b508      	push	{r3, lr}
 800d322:	f7ff fff5 	bl	800d310 <_ZSt13get_terminatev>
 800d326:	f7ff ffee 	bl	800d306 <_ZN10__cxxabiv111__terminateEPFvvE>

0800d32a <abort>:
 800d32a:	b508      	push	{r3, lr}
 800d32c:	2006      	movs	r0, #6
 800d32e:	f000 f93d 	bl	800d5ac <raise>
 800d332:	2001      	movs	r0, #1
 800d334:	f7fc f95a 	bl	80095ec <_exit>

0800d338 <__errno>:
 800d338:	4b01      	ldr	r3, [pc, #4]	; (800d340 <__errno+0x8>)
 800d33a:	6818      	ldr	r0, [r3, #0]
 800d33c:	4770      	bx	lr
 800d33e:	bf00      	nop
 800d340:	2000002c 	.word	0x2000002c

0800d344 <__libc_init_array>:
 800d344:	b570      	push	{r4, r5, r6, lr}
 800d346:	4d0d      	ldr	r5, [pc, #52]	; (800d37c <__libc_init_array+0x38>)
 800d348:	4c0d      	ldr	r4, [pc, #52]	; (800d380 <__libc_init_array+0x3c>)
 800d34a:	1b64      	subs	r4, r4, r5
 800d34c:	10a4      	asrs	r4, r4, #2
 800d34e:	2600      	movs	r6, #0
 800d350:	42a6      	cmp	r6, r4
 800d352:	d109      	bne.n	800d368 <__libc_init_array+0x24>
 800d354:	4d0b      	ldr	r5, [pc, #44]	; (800d384 <__libc_init_array+0x40>)
 800d356:	4c0c      	ldr	r4, [pc, #48]	; (800d388 <__libc_init_array+0x44>)
 800d358:	f000 f980 	bl	800d65c <_init>
 800d35c:	1b64      	subs	r4, r4, r5
 800d35e:	10a4      	asrs	r4, r4, #2
 800d360:	2600      	movs	r6, #0
 800d362:	42a6      	cmp	r6, r4
 800d364:	d105      	bne.n	800d372 <__libc_init_array+0x2e>
 800d366:	bd70      	pop	{r4, r5, r6, pc}
 800d368:	f855 3b04 	ldr.w	r3, [r5], #4
 800d36c:	4798      	blx	r3
 800d36e:	3601      	adds	r6, #1
 800d370:	e7ee      	b.n	800d350 <__libc_init_array+0xc>
 800d372:	f855 3b04 	ldr.w	r3, [r5], #4
 800d376:	4798      	blx	r3
 800d378:	3601      	adds	r6, #1
 800d37a:	e7f2      	b.n	800d362 <__libc_init_array+0x1e>
 800d37c:	0800df88 	.word	0x0800df88
 800d380:	0800df88 	.word	0x0800df88
 800d384:	0800df88 	.word	0x0800df88
 800d388:	0800df90 	.word	0x0800df90

0800d38c <malloc>:
 800d38c:	4b02      	ldr	r3, [pc, #8]	; (800d398 <malloc+0xc>)
 800d38e:	4601      	mov	r1, r0
 800d390:	6818      	ldr	r0, [r3, #0]
 800d392:	f000 b871 	b.w	800d478 <_malloc_r>
 800d396:	bf00      	nop
 800d398:	2000002c 	.word	0x2000002c

0800d39c <free>:
 800d39c:	4b02      	ldr	r3, [pc, #8]	; (800d3a8 <free+0xc>)
 800d39e:	4601      	mov	r1, r0
 800d3a0:	6818      	ldr	r0, [r3, #0]
 800d3a2:	f000 b819 	b.w	800d3d8 <_free_r>
 800d3a6:	bf00      	nop
 800d3a8:	2000002c 	.word	0x2000002c

0800d3ac <memcpy>:
 800d3ac:	440a      	add	r2, r1
 800d3ae:	4291      	cmp	r1, r2
 800d3b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d3b4:	d100      	bne.n	800d3b8 <memcpy+0xc>
 800d3b6:	4770      	bx	lr
 800d3b8:	b510      	push	{r4, lr}
 800d3ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d3c2:	4291      	cmp	r1, r2
 800d3c4:	d1f9      	bne.n	800d3ba <memcpy+0xe>
 800d3c6:	bd10      	pop	{r4, pc}

0800d3c8 <memset>:
 800d3c8:	4402      	add	r2, r0
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d100      	bne.n	800d3d2 <memset+0xa>
 800d3d0:	4770      	bx	lr
 800d3d2:	f803 1b01 	strb.w	r1, [r3], #1
 800d3d6:	e7f9      	b.n	800d3cc <memset+0x4>

0800d3d8 <_free_r>:
 800d3d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3da:	2900      	cmp	r1, #0
 800d3dc:	d048      	beq.n	800d470 <_free_r+0x98>
 800d3de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3e2:	9001      	str	r0, [sp, #4]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	f1a1 0404 	sub.w	r4, r1, #4
 800d3ea:	bfb8      	it	lt
 800d3ec:	18e4      	addlt	r4, r4, r3
 800d3ee:	f000 f8f9 	bl	800d5e4 <__malloc_lock>
 800d3f2:	4a20      	ldr	r2, [pc, #128]	; (800d474 <_free_r+0x9c>)
 800d3f4:	9801      	ldr	r0, [sp, #4]
 800d3f6:	6813      	ldr	r3, [r2, #0]
 800d3f8:	4615      	mov	r5, r2
 800d3fa:	b933      	cbnz	r3, 800d40a <_free_r+0x32>
 800d3fc:	6063      	str	r3, [r4, #4]
 800d3fe:	6014      	str	r4, [r2, #0]
 800d400:	b003      	add	sp, #12
 800d402:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d406:	f000 b8f3 	b.w	800d5f0 <__malloc_unlock>
 800d40a:	42a3      	cmp	r3, r4
 800d40c:	d90b      	bls.n	800d426 <_free_r+0x4e>
 800d40e:	6821      	ldr	r1, [r4, #0]
 800d410:	1862      	adds	r2, r4, r1
 800d412:	4293      	cmp	r3, r2
 800d414:	bf04      	itt	eq
 800d416:	681a      	ldreq	r2, [r3, #0]
 800d418:	685b      	ldreq	r3, [r3, #4]
 800d41a:	6063      	str	r3, [r4, #4]
 800d41c:	bf04      	itt	eq
 800d41e:	1852      	addeq	r2, r2, r1
 800d420:	6022      	streq	r2, [r4, #0]
 800d422:	602c      	str	r4, [r5, #0]
 800d424:	e7ec      	b.n	800d400 <_free_r+0x28>
 800d426:	461a      	mov	r2, r3
 800d428:	685b      	ldr	r3, [r3, #4]
 800d42a:	b10b      	cbz	r3, 800d430 <_free_r+0x58>
 800d42c:	42a3      	cmp	r3, r4
 800d42e:	d9fa      	bls.n	800d426 <_free_r+0x4e>
 800d430:	6811      	ldr	r1, [r2, #0]
 800d432:	1855      	adds	r5, r2, r1
 800d434:	42a5      	cmp	r5, r4
 800d436:	d10b      	bne.n	800d450 <_free_r+0x78>
 800d438:	6824      	ldr	r4, [r4, #0]
 800d43a:	4421      	add	r1, r4
 800d43c:	1854      	adds	r4, r2, r1
 800d43e:	42a3      	cmp	r3, r4
 800d440:	6011      	str	r1, [r2, #0]
 800d442:	d1dd      	bne.n	800d400 <_free_r+0x28>
 800d444:	681c      	ldr	r4, [r3, #0]
 800d446:	685b      	ldr	r3, [r3, #4]
 800d448:	6053      	str	r3, [r2, #4]
 800d44a:	4421      	add	r1, r4
 800d44c:	6011      	str	r1, [r2, #0]
 800d44e:	e7d7      	b.n	800d400 <_free_r+0x28>
 800d450:	d902      	bls.n	800d458 <_free_r+0x80>
 800d452:	230c      	movs	r3, #12
 800d454:	6003      	str	r3, [r0, #0]
 800d456:	e7d3      	b.n	800d400 <_free_r+0x28>
 800d458:	6825      	ldr	r5, [r4, #0]
 800d45a:	1961      	adds	r1, r4, r5
 800d45c:	428b      	cmp	r3, r1
 800d45e:	bf04      	itt	eq
 800d460:	6819      	ldreq	r1, [r3, #0]
 800d462:	685b      	ldreq	r3, [r3, #4]
 800d464:	6063      	str	r3, [r4, #4]
 800d466:	bf04      	itt	eq
 800d468:	1949      	addeq	r1, r1, r5
 800d46a:	6021      	streq	r1, [r4, #0]
 800d46c:	6054      	str	r4, [r2, #4]
 800d46e:	e7c7      	b.n	800d400 <_free_r+0x28>
 800d470:	b003      	add	sp, #12
 800d472:	bd30      	pop	{r4, r5, pc}
 800d474:	20001124 	.word	0x20001124

0800d478 <_malloc_r>:
 800d478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d47a:	1ccd      	adds	r5, r1, #3
 800d47c:	f025 0503 	bic.w	r5, r5, #3
 800d480:	3508      	adds	r5, #8
 800d482:	2d0c      	cmp	r5, #12
 800d484:	bf38      	it	cc
 800d486:	250c      	movcc	r5, #12
 800d488:	2d00      	cmp	r5, #0
 800d48a:	4606      	mov	r6, r0
 800d48c:	db01      	blt.n	800d492 <_malloc_r+0x1a>
 800d48e:	42a9      	cmp	r1, r5
 800d490:	d903      	bls.n	800d49a <_malloc_r+0x22>
 800d492:	230c      	movs	r3, #12
 800d494:	6033      	str	r3, [r6, #0]
 800d496:	2000      	movs	r0, #0
 800d498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d49a:	f000 f8a3 	bl	800d5e4 <__malloc_lock>
 800d49e:	4921      	ldr	r1, [pc, #132]	; (800d524 <_malloc_r+0xac>)
 800d4a0:	680a      	ldr	r2, [r1, #0]
 800d4a2:	4614      	mov	r4, r2
 800d4a4:	b99c      	cbnz	r4, 800d4ce <_malloc_r+0x56>
 800d4a6:	4f20      	ldr	r7, [pc, #128]	; (800d528 <_malloc_r+0xb0>)
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	b923      	cbnz	r3, 800d4b6 <_malloc_r+0x3e>
 800d4ac:	4621      	mov	r1, r4
 800d4ae:	4630      	mov	r0, r6
 800d4b0:	f000 f844 	bl	800d53c <_sbrk_r>
 800d4b4:	6038      	str	r0, [r7, #0]
 800d4b6:	4629      	mov	r1, r5
 800d4b8:	4630      	mov	r0, r6
 800d4ba:	f000 f83f 	bl	800d53c <_sbrk_r>
 800d4be:	1c43      	adds	r3, r0, #1
 800d4c0:	d123      	bne.n	800d50a <_malloc_r+0x92>
 800d4c2:	230c      	movs	r3, #12
 800d4c4:	6033      	str	r3, [r6, #0]
 800d4c6:	4630      	mov	r0, r6
 800d4c8:	f000 f892 	bl	800d5f0 <__malloc_unlock>
 800d4cc:	e7e3      	b.n	800d496 <_malloc_r+0x1e>
 800d4ce:	6823      	ldr	r3, [r4, #0]
 800d4d0:	1b5b      	subs	r3, r3, r5
 800d4d2:	d417      	bmi.n	800d504 <_malloc_r+0x8c>
 800d4d4:	2b0b      	cmp	r3, #11
 800d4d6:	d903      	bls.n	800d4e0 <_malloc_r+0x68>
 800d4d8:	6023      	str	r3, [r4, #0]
 800d4da:	441c      	add	r4, r3
 800d4dc:	6025      	str	r5, [r4, #0]
 800d4de:	e004      	b.n	800d4ea <_malloc_r+0x72>
 800d4e0:	6863      	ldr	r3, [r4, #4]
 800d4e2:	42a2      	cmp	r2, r4
 800d4e4:	bf0c      	ite	eq
 800d4e6:	600b      	streq	r3, [r1, #0]
 800d4e8:	6053      	strne	r3, [r2, #4]
 800d4ea:	4630      	mov	r0, r6
 800d4ec:	f000 f880 	bl	800d5f0 <__malloc_unlock>
 800d4f0:	f104 000b 	add.w	r0, r4, #11
 800d4f4:	1d23      	adds	r3, r4, #4
 800d4f6:	f020 0007 	bic.w	r0, r0, #7
 800d4fa:	1ac2      	subs	r2, r0, r3
 800d4fc:	d0cc      	beq.n	800d498 <_malloc_r+0x20>
 800d4fe:	1a1b      	subs	r3, r3, r0
 800d500:	50a3      	str	r3, [r4, r2]
 800d502:	e7c9      	b.n	800d498 <_malloc_r+0x20>
 800d504:	4622      	mov	r2, r4
 800d506:	6864      	ldr	r4, [r4, #4]
 800d508:	e7cc      	b.n	800d4a4 <_malloc_r+0x2c>
 800d50a:	1cc4      	adds	r4, r0, #3
 800d50c:	f024 0403 	bic.w	r4, r4, #3
 800d510:	42a0      	cmp	r0, r4
 800d512:	d0e3      	beq.n	800d4dc <_malloc_r+0x64>
 800d514:	1a21      	subs	r1, r4, r0
 800d516:	4630      	mov	r0, r6
 800d518:	f000 f810 	bl	800d53c <_sbrk_r>
 800d51c:	3001      	adds	r0, #1
 800d51e:	d1dd      	bne.n	800d4dc <_malloc_r+0x64>
 800d520:	e7cf      	b.n	800d4c2 <_malloc_r+0x4a>
 800d522:	bf00      	nop
 800d524:	20001124 	.word	0x20001124
 800d528:	20001128 	.word	0x20001128

0800d52c <realloc>:
 800d52c:	4b02      	ldr	r3, [pc, #8]	; (800d538 <realloc+0xc>)
 800d52e:	460a      	mov	r2, r1
 800d530:	4601      	mov	r1, r0
 800d532:	6818      	ldr	r0, [r3, #0]
 800d534:	f000 b862 	b.w	800d5fc <_realloc_r>
 800d538:	2000002c 	.word	0x2000002c

0800d53c <_sbrk_r>:
 800d53c:	b538      	push	{r3, r4, r5, lr}
 800d53e:	4d06      	ldr	r5, [pc, #24]	; (800d558 <_sbrk_r+0x1c>)
 800d540:	2300      	movs	r3, #0
 800d542:	4604      	mov	r4, r0
 800d544:	4608      	mov	r0, r1
 800d546:	602b      	str	r3, [r5, #0]
 800d548:	f7fc f85a 	bl	8009600 <_sbrk>
 800d54c:	1c43      	adds	r3, r0, #1
 800d54e:	d102      	bne.n	800d556 <_sbrk_r+0x1a>
 800d550:	682b      	ldr	r3, [r5, #0]
 800d552:	b103      	cbz	r3, 800d556 <_sbrk_r+0x1a>
 800d554:	6023      	str	r3, [r4, #0]
 800d556:	bd38      	pop	{r3, r4, r5, pc}
 800d558:	20001358 	.word	0x20001358

0800d55c <_raise_r>:
 800d55c:	291f      	cmp	r1, #31
 800d55e:	b538      	push	{r3, r4, r5, lr}
 800d560:	4604      	mov	r4, r0
 800d562:	460d      	mov	r5, r1
 800d564:	d904      	bls.n	800d570 <_raise_r+0x14>
 800d566:	2316      	movs	r3, #22
 800d568:	6003      	str	r3, [r0, #0]
 800d56a:	f04f 30ff 	mov.w	r0, #4294967295
 800d56e:	bd38      	pop	{r3, r4, r5, pc}
 800d570:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d572:	b112      	cbz	r2, 800d57a <_raise_r+0x1e>
 800d574:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d578:	b94b      	cbnz	r3, 800d58e <_raise_r+0x32>
 800d57a:	4620      	mov	r0, r4
 800d57c:	f000 f830 	bl	800d5e0 <_getpid_r>
 800d580:	462a      	mov	r2, r5
 800d582:	4601      	mov	r1, r0
 800d584:	4620      	mov	r0, r4
 800d586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d58a:	f000 b817 	b.w	800d5bc <_kill_r>
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d00a      	beq.n	800d5a8 <_raise_r+0x4c>
 800d592:	1c59      	adds	r1, r3, #1
 800d594:	d103      	bne.n	800d59e <_raise_r+0x42>
 800d596:	2316      	movs	r3, #22
 800d598:	6003      	str	r3, [r0, #0]
 800d59a:	2001      	movs	r0, #1
 800d59c:	e7e7      	b.n	800d56e <_raise_r+0x12>
 800d59e:	2400      	movs	r4, #0
 800d5a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d5a4:	4628      	mov	r0, r5
 800d5a6:	4798      	blx	r3
 800d5a8:	2000      	movs	r0, #0
 800d5aa:	e7e0      	b.n	800d56e <_raise_r+0x12>

0800d5ac <raise>:
 800d5ac:	4b02      	ldr	r3, [pc, #8]	; (800d5b8 <raise+0xc>)
 800d5ae:	4601      	mov	r1, r0
 800d5b0:	6818      	ldr	r0, [r3, #0]
 800d5b2:	f7ff bfd3 	b.w	800d55c <_raise_r>
 800d5b6:	bf00      	nop
 800d5b8:	2000002c 	.word	0x2000002c

0800d5bc <_kill_r>:
 800d5bc:	b538      	push	{r3, r4, r5, lr}
 800d5be:	4d07      	ldr	r5, [pc, #28]	; (800d5dc <_kill_r+0x20>)
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	4604      	mov	r4, r0
 800d5c4:	4608      	mov	r0, r1
 800d5c6:	4611      	mov	r1, r2
 800d5c8:	602b      	str	r3, [r5, #0]
 800d5ca:	f7fb ffff 	bl	80095cc <_kill>
 800d5ce:	1c43      	adds	r3, r0, #1
 800d5d0:	d102      	bne.n	800d5d8 <_kill_r+0x1c>
 800d5d2:	682b      	ldr	r3, [r5, #0]
 800d5d4:	b103      	cbz	r3, 800d5d8 <_kill_r+0x1c>
 800d5d6:	6023      	str	r3, [r4, #0]
 800d5d8:	bd38      	pop	{r3, r4, r5, pc}
 800d5da:	bf00      	nop
 800d5dc:	20001358 	.word	0x20001358

0800d5e0 <_getpid_r>:
 800d5e0:	f7fb bfec 	b.w	80095bc <_getpid>

0800d5e4 <__malloc_lock>:
 800d5e4:	4801      	ldr	r0, [pc, #4]	; (800d5ec <__malloc_lock+0x8>)
 800d5e6:	f000 b82f 	b.w	800d648 <__retarget_lock_acquire_recursive>
 800d5ea:	bf00      	nop
 800d5ec:	20001360 	.word	0x20001360

0800d5f0 <__malloc_unlock>:
 800d5f0:	4801      	ldr	r0, [pc, #4]	; (800d5f8 <__malloc_unlock+0x8>)
 800d5f2:	f000 b82a 	b.w	800d64a <__retarget_lock_release_recursive>
 800d5f6:	bf00      	nop
 800d5f8:	20001360 	.word	0x20001360

0800d5fc <_realloc_r>:
 800d5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5fe:	4607      	mov	r7, r0
 800d600:	4614      	mov	r4, r2
 800d602:	460e      	mov	r6, r1
 800d604:	b921      	cbnz	r1, 800d610 <_realloc_r+0x14>
 800d606:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d60a:	4611      	mov	r1, r2
 800d60c:	f7ff bf34 	b.w	800d478 <_malloc_r>
 800d610:	b922      	cbnz	r2, 800d61c <_realloc_r+0x20>
 800d612:	f7ff fee1 	bl	800d3d8 <_free_r>
 800d616:	4625      	mov	r5, r4
 800d618:	4628      	mov	r0, r5
 800d61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d61c:	f000 f816 	bl	800d64c <_malloc_usable_size_r>
 800d620:	42a0      	cmp	r0, r4
 800d622:	d20f      	bcs.n	800d644 <_realloc_r+0x48>
 800d624:	4621      	mov	r1, r4
 800d626:	4638      	mov	r0, r7
 800d628:	f7ff ff26 	bl	800d478 <_malloc_r>
 800d62c:	4605      	mov	r5, r0
 800d62e:	2800      	cmp	r0, #0
 800d630:	d0f2      	beq.n	800d618 <_realloc_r+0x1c>
 800d632:	4631      	mov	r1, r6
 800d634:	4622      	mov	r2, r4
 800d636:	f7ff feb9 	bl	800d3ac <memcpy>
 800d63a:	4631      	mov	r1, r6
 800d63c:	4638      	mov	r0, r7
 800d63e:	f7ff fecb 	bl	800d3d8 <_free_r>
 800d642:	e7e9      	b.n	800d618 <_realloc_r+0x1c>
 800d644:	4635      	mov	r5, r6
 800d646:	e7e7      	b.n	800d618 <_realloc_r+0x1c>

0800d648 <__retarget_lock_acquire_recursive>:
 800d648:	4770      	bx	lr

0800d64a <__retarget_lock_release_recursive>:
 800d64a:	4770      	bx	lr

0800d64c <_malloc_usable_size_r>:
 800d64c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d650:	1f18      	subs	r0, r3, #4
 800d652:	2b00      	cmp	r3, #0
 800d654:	bfbc      	itt	lt
 800d656:	580b      	ldrlt	r3, [r1, r0]
 800d658:	18c0      	addlt	r0, r0, r3
 800d65a:	4770      	bx	lr

0800d65c <_init>:
 800d65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d65e:	bf00      	nop
 800d660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d662:	bc08      	pop	{r3}
 800d664:	469e      	mov	lr, r3
 800d666:	4770      	bx	lr

0800d668 <_fini>:
 800d668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d66a:	bf00      	nop
 800d66c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d66e:	bc08      	pop	{r3}
 800d670:	469e      	mov	lr, r3
 800d672:	4770      	bx	lr
